<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\list\firmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\list\firmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Dec 05 14:53:09 2022
<BR><P>
<H3>Maximum Stack Usage =        760 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
menu_main() &rArr; MarlinUI::pause_print() &rArr; GcodeSuite::process_subcommands_now(char*) &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M501() &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9b]">IRQ133_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9b]">IRQ133_Handler</a><BR>
 <LI><a href="#[24f]">Planner::synchronize()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2dd]">idle()</a><BR>
 <LI><a href="#[4fb]">Planner::buffer_sync_block()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2dd]">idle()</a><BR>
 <LI><a href="#[4ef]">Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2dd]">idle()</a><BR>
 <LI><a href="#[3cf]">GcodeSuite::process_subcommands_now_P(const char*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[373]">GcodeSuite::process_parsed_command(bool)</a><BR>
 <LI><a href="#[409]">PrintJobRecovery::resume()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ce]">GcodeSuite::process_subcommands_now(char*)</a><BR>
 <LI><a href="#[33d]">CardReader::printListing(SdFile, const char*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33d]">CardReader::printListing(SdFile, const char*)</a><BR>
 <LI><a href="#[43c]">MarlinUI::CompletedMaticHate()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ce]">GcodeSuite::process_subcommands_now(char*)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[115]">&lang;Func48&rang;</a> from cardreader.o(i.<Func48>) referenced from cardreader.o(i.__sti___14_cardreader_cpp_M23_STR)
 <LI><a href="#[10]">BusFault_Handler</a> from hc32f46x_interrupts.o(i.BusFault_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[13]">DebugMon_Handler</a> from hc32f46x_interrupts.o(i.DebugMon_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[101]">Dma1Btc3_IrqHandler</a> from adc.o(i.Dma1Btc3_IrqHandler) referenced from adc.o(i._ZN22_INTERNAL_5_adc_c_adc116adc_DMAIrqConfigEv)
 <LI><a href="#[e]">HardFault_Handler</a> from hc32f46x_interrupts.o(i.HardFault_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[16]">IRQ000_Handler</a> from hc32f46x_interrupts.o(i.IRQ000_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[17]">IRQ001_Handler</a> from hc32f46x_interrupts.o(i.IRQ001_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[18]">IRQ002_Handler</a> from hc32f46x_interrupts.o(i.IRQ002_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[19]">IRQ003_Handler</a> from hc32f46x_interrupts.o(i.IRQ003_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[1a]">IRQ004_Handler</a> from hc32f46x_interrupts.o(i.IRQ004_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[1b]">IRQ005_Handler</a> from hc32f46x_interrupts.o(i.IRQ005_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[1c]">IRQ006_Handler</a> from hc32f46x_interrupts.o(i.IRQ006_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[1d]">IRQ007_Handler</a> from hc32f46x_interrupts.o(i.IRQ007_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[1e]">IRQ008_Handler</a> from hc32f46x_interrupts.o(i.IRQ008_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[1f]">IRQ009_Handler</a> from hc32f46x_interrupts.o(i.IRQ009_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[20]">IRQ010_Handler</a> from hc32f46x_interrupts.o(i.IRQ010_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[21]">IRQ011_Handler</a> from hc32f46x_interrupts.o(i.IRQ011_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[22]">IRQ012_Handler</a> from hc32f46x_interrupts.o(i.IRQ012_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[23]">IRQ013_Handler</a> from hc32f46x_interrupts.o(i.IRQ013_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[24]">IRQ014_Handler</a> from hc32f46x_interrupts.o(i.IRQ014_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[25]">IRQ015_Handler</a> from hc32f46x_interrupts.o(i.IRQ015_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[26]">IRQ016_Handler</a> from hc32f46x_interrupts.o(i.IRQ016_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[27]">IRQ017_Handler</a> from hc32f46x_interrupts.o(i.IRQ017_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[28]">IRQ018_Handler</a> from hc32f46x_interrupts.o(i.IRQ018_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[29]">IRQ019_Handler</a> from hc32f46x_interrupts.o(i.IRQ019_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[2a]">IRQ020_Handler</a> from hc32f46x_interrupts.o(i.IRQ020_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[2b]">IRQ021_Handler</a> from hc32f46x_interrupts.o(i.IRQ021_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[2c]">IRQ022_Handler</a> from hc32f46x_interrupts.o(i.IRQ022_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[2d]">IRQ023_Handler</a> from hc32f46x_interrupts.o(i.IRQ023_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[2e]">IRQ024_Handler</a> from hc32f46x_interrupts.o(i.IRQ024_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[2f]">IRQ025_Handler</a> from hc32f46x_interrupts.o(i.IRQ025_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[30]">IRQ026_Handler</a> from hc32f46x_interrupts.o(i.IRQ026_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[31]">IRQ027_Handler</a> from hc32f46x_interrupts.o(i.IRQ027_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[32]">IRQ028_Handler</a> from hc32f46x_interrupts.o(i.IRQ028_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[33]">IRQ029_Handler</a> from hc32f46x_interrupts.o(i.IRQ029_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[34]">IRQ030_Handler</a> from hc32f46x_interrupts.o(i.IRQ030_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[35]">IRQ031_Handler</a> from hc32f46x_interrupts.o(i.IRQ031_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[36]">IRQ032_Handler</a> from hc32f46x_interrupts.o(i.IRQ032_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[37]">IRQ033_Handler</a> from hc32f46x_interrupts.o(i.IRQ033_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[38]">IRQ034_Handler</a> from hc32f46x_interrupts.o(i.IRQ034_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[39]">IRQ035_Handler</a> from hc32f46x_interrupts.o(i.IRQ035_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[3a]">IRQ036_Handler</a> from hc32f46x_interrupts.o(i.IRQ036_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[3b]">IRQ037_Handler</a> from hc32f46x_interrupts.o(i.IRQ037_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[3c]">IRQ038_Handler</a> from hc32f46x_interrupts.o(i.IRQ038_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[3d]">IRQ039_Handler</a> from hc32f46x_interrupts.o(i.IRQ039_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[3e]">IRQ040_Handler</a> from hc32f46x_interrupts.o(i.IRQ040_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[3f]">IRQ041_Handler</a> from hc32f46x_interrupts.o(i.IRQ041_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[40]">IRQ042_Handler</a> from hc32f46x_interrupts.o(i.IRQ042_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[41]">IRQ043_Handler</a> from hc32f46x_interrupts.o(i.IRQ043_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[42]">IRQ044_Handler</a> from hc32f46x_interrupts.o(i.IRQ044_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[43]">IRQ045_Handler</a> from hc32f46x_interrupts.o(i.IRQ045_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[44]">IRQ046_Handler</a> from hc32f46x_interrupts.o(i.IRQ046_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[45]">IRQ047_Handler</a> from hc32f46x_interrupts.o(i.IRQ047_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[46]">IRQ048_Handler</a> from hc32f46x_interrupts.o(i.IRQ048_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[47]">IRQ049_Handler</a> from hc32f46x_interrupts.o(i.IRQ049_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[48]">IRQ050_Handler</a> from hc32f46x_interrupts.o(i.IRQ050_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[49]">IRQ051_Handler</a> from hc32f46x_interrupts.o(i.IRQ051_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[4a]">IRQ052_Handler</a> from hc32f46x_interrupts.o(i.IRQ052_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[4b]">IRQ053_Handler</a> from hc32f46x_interrupts.o(i.IRQ053_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[4c]">IRQ054_Handler</a> from hc32f46x_interrupts.o(i.IRQ054_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[4d]">IRQ055_Handler</a> from hc32f46x_interrupts.o(i.IRQ055_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[4e]">IRQ056_Handler</a> from hc32f46x_interrupts.o(i.IRQ056_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[4f]">IRQ057_Handler</a> from hc32f46x_interrupts.o(i.IRQ057_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[50]">IRQ058_Handler</a> from hc32f46x_interrupts.o(i.IRQ058_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[51]">IRQ059_Handler</a> from hc32f46x_interrupts.o(i.IRQ059_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[52]">IRQ060_Handler</a> from hc32f46x_interrupts.o(i.IRQ060_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[53]">IRQ061_Handler</a> from hc32f46x_interrupts.o(i.IRQ061_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[54]">IRQ062_Handler</a> from hc32f46x_interrupts.o(i.IRQ062_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[55]">IRQ063_Handler</a> from hc32f46x_interrupts.o(i.IRQ063_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[56]">IRQ064_Handler</a> from hc32f46x_interrupts.o(i.IRQ064_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[57]">IRQ065_Handler</a> from hc32f46x_interrupts.o(i.IRQ065_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[58]">IRQ066_Handler</a> from hc32f46x_interrupts.o(i.IRQ066_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[59]">IRQ067_Handler</a> from hc32f46x_interrupts.o(i.IRQ067_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[5a]">IRQ068_Handler</a> from hc32f46x_interrupts.o(i.IRQ068_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[5b]">IRQ069_Handler</a> from hc32f46x_interrupts.o(i.IRQ069_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[5c]">IRQ070_Handler</a> from hc32f46x_interrupts.o(i.IRQ070_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[5d]">IRQ071_Handler</a> from hc32f46x_interrupts.o(i.IRQ071_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[5e]">IRQ072_Handler</a> from hc32f46x_interrupts.o(i.IRQ072_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[5f]">IRQ073_Handler</a> from hc32f46x_interrupts.o(i.IRQ073_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[60]">IRQ074_Handler</a> from hc32f46x_interrupts.o(i.IRQ074_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[61]">IRQ075_Handler</a> from hc32f46x_interrupts.o(i.IRQ075_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[62]">IRQ076_Handler</a> from hc32f46x_interrupts.o(i.IRQ076_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[63]">IRQ077_Handler</a> from hc32f46x_interrupts.o(i.IRQ077_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[64]">IRQ078_Handler</a> from hc32f46x_interrupts.o(i.IRQ078_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[65]">IRQ079_Handler</a> from hc32f46x_interrupts.o(i.IRQ079_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[66]">IRQ080_Handler</a> from hc32f46x_interrupts.o(i.IRQ080_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[67]">IRQ081_Handler</a> from hc32f46x_interrupts.o(i.IRQ081_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[68]">IRQ082_Handler</a> from hc32f46x_interrupts.o(i.IRQ082_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[69]">IRQ083_Handler</a> from hc32f46x_interrupts.o(i.IRQ083_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[6a]">IRQ084_Handler</a> from hc32f46x_interrupts.o(i.IRQ084_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[6b]">IRQ085_Handler</a> from hc32f46x_interrupts.o(i.IRQ085_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[6c]">IRQ086_Handler</a> from hc32f46x_interrupts.o(i.IRQ086_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[6d]">IRQ087_Handler</a> from hc32f46x_interrupts.o(i.IRQ087_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[6e]">IRQ088_Handler</a> from hc32f46x_interrupts.o(i.IRQ088_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[6f]">IRQ089_Handler</a> from hc32f46x_interrupts.o(i.IRQ089_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[70]">IRQ090_Handler</a> from hc32f46x_interrupts.o(i.IRQ090_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[71]">IRQ091_Handler</a> from hc32f46x_interrupts.o(i.IRQ091_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[72]">IRQ092_Handler</a> from hc32f46x_interrupts.o(i.IRQ092_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[73]">IRQ093_Handler</a> from hc32f46x_interrupts.o(i.IRQ093_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[74]">IRQ094_Handler</a> from hc32f46x_interrupts.o(i.IRQ094_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[75]">IRQ095_Handler</a> from hc32f46x_interrupts.o(i.IRQ095_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[76]">IRQ096_Handler</a> from hc32f46x_interrupts.o(i.IRQ096_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[77]">IRQ097_Handler</a> from hc32f46x_interrupts.o(i.IRQ097_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[78]">IRQ098_Handler</a> from hc32f46x_interrupts.o(i.IRQ098_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[79]">IRQ099_Handler</a> from hc32f46x_interrupts.o(i.IRQ099_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[7a]">IRQ100_Handler</a> from hc32f46x_interrupts.o(i.IRQ100_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[7b]">IRQ101_Handler</a> from hc32f46x_interrupts.o(i.IRQ101_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[7c]">IRQ102_Handler</a> from hc32f46x_interrupts.o(i.IRQ102_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[7d]">IRQ103_Handler</a> from hc32f46x_interrupts.o(i.IRQ103_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[7e]">IRQ104_Handler</a> from hc32f46x_interrupts.o(i.IRQ104_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[7f]">IRQ105_Handler</a> from hc32f46x_interrupts.o(i.IRQ105_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[80]">IRQ106_Handler</a> from hc32f46x_interrupts.o(i.IRQ106_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[81]">IRQ107_Handler</a> from hc32f46x_interrupts.o(i.IRQ107_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[82]">IRQ108_Handler</a> from hc32f46x_interrupts.o(i.IRQ108_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[83]">IRQ109_Handler</a> from hc32f46x_interrupts.o(i.IRQ109_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[84]">IRQ110_Handler</a> from hc32f46x_interrupts.o(i.IRQ110_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[85]">IRQ111_Handler</a> from hc32f46x_interrupts.o(i.IRQ111_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[86]">IRQ112_Handler</a> from hc32f46x_interrupts.o(i.IRQ112_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[87]">IRQ113_Handler</a> from hc32f46x_interrupts.o(i.IRQ113_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[88]">IRQ114_Handler</a> from hc32f46x_interrupts.o(i.IRQ114_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[89]">IRQ115_Handler</a> from hc32f46x_interrupts.o(i.IRQ115_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[8a]">IRQ116_Handler</a> from hc32f46x_interrupts.o(i.IRQ116_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[8b]">IRQ117_Handler</a> from hc32f46x_interrupts.o(i.IRQ117_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[8c]">IRQ118_Handler</a> from hc32f46x_interrupts.o(i.IRQ118_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[8d]">IRQ119_Handler</a> from hc32f46x_interrupts.o(i.IRQ119_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[8e]">IRQ120_Handler</a> from hc32f46x_interrupts.o(i.IRQ120_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[8f]">IRQ121_Handler</a> from hc32f46x_interrupts.o(i.IRQ121_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[90]">IRQ122_Handler</a> from hc32f46x_interrupts.o(i.IRQ122_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[91]">IRQ123_Handler</a> from hc32f46x_interrupts.o(i.IRQ123_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[92]">IRQ124_Handler</a> from hc32f46x_interrupts.o(i.IRQ124_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[93]">IRQ125_Handler</a> from hc32f46x_interrupts.o(i.IRQ125_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[94]">IRQ126_Handler</a> from hc32f46x_interrupts.o(i.IRQ126_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[95]">IRQ127_Handler</a> from hc32f46x_interrupts.o(i.IRQ127_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[96]">IRQ128_Handler</a> from hc32f46x_interrupts.o(i.IRQ128_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[97]">IRQ129_Handler</a> from hc32f46x_interrupts.o(i.IRQ129_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[98]">IRQ130_Handler</a> from hc32f46x_interrupts.o(i.IRQ130_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[99]">IRQ131_Handler</a> from hc32f46x_interrupts.o(i.IRQ131_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[9a]">IRQ132_Handler</a> from hc32f46x_interrupts.o(i.IRQ132_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[9b]">IRQ133_Handler</a> from startup_hc32f460petb.o(.text) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[9c]">IRQ134_Handler</a> from startup_hc32f460petb.o(.text) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[9d]">IRQ135_Handler</a> from startup_hc32f460petb.o(.text) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[9e]">IRQ136_Handler</a> from hc32f46x_interrupts.o(i.IRQ136_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[9f]">IRQ137_Handler</a> from hc32f46x_interrupts.o(i.IRQ137_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[a0]">IRQ138_Handler</a> from hc32f46x_interrupts.o(i.IRQ138_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[a1]">IRQ139_Handler</a> from hc32f46x_interrupts.o(i.IRQ139_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[a2]">IRQ140_Handler</a> from hc32f46x_interrupts.o(i.IRQ140_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[a3]">IRQ141_Handler</a> from hc32f46x_interrupts.o(i.IRQ141_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[a4]">IRQ142_Handler</a> from hc32f46x_interrupts.o(i.IRQ142_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[a5]">IRQ143_Handler</a> from hc32f46x_interrupts.o(i.IRQ143_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[f]">MemManage_Handler</a> from hc32f46x_interrupts.o(i.MemManage_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[d]">NMI_Handler</a> from hc32f46x_interrupts.o(i.NMI_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[14]">PendSV_Handler</a> from hc32f46x_interrupts.o(i.PendSV_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[c]">Reset_Handler</a> from startup_hc32f460petb.o(.text) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from hc32f46x_interrupts.o(i.SVC_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[15]">SysTick_Handler</a> from hc32f46x_interrupts.o(i.SysTick_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[a7]">SystemInit</a> from system_hc32f460petb.o(i.SystemInit) referenced from startup_hc32f460petb.o(.text)
 <LI><a href="#[11]">UsageFault_Handler</a> from hc32f46x_interrupts.o(i.UsageFault_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[10d]">lcd_move_x()</a> from menu_motion.o(i._Z10lcd_move_xv) referenced from menu_motion.o(i._ZZ9menu_movevENUlvE_4_FUNEv)
 <LI><a href="#[10a]">lcd_move_y()</a> from menu_motion.o(i._Z10lcd_move_yv) referenced from menu_motion.o(i._ZZ9menu_movevENUlvE1_4_FUNEv)
 <LI><a href="#[10b]">lcd_move_z()</a> from menu_motion.o(i._Z10lcd_move_zv) referenced from menu_motion.o(i._ZZ9menu_movevENUlvE3_4_FUNEv)
 <LI><a href="#[f4]">menu_media()</a> from menu_media.o(i._Z10menu_mediav) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[f2]">menu_motion()</a> from menu_motion.o(i._Z11menu_motionv) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[bc]">lcd_cooldown()</a> from menu_temperature.o(i._Z12lcd_cooldownv) referenced from menu_temperature.o(i._Z16menu_temperaturev)
 <LI><a href="#[ad]">lcd_sd_updir()</a> from menu_media.o(i._Z12lcd_sd_updirv) referenced from menu_media.o(i._Z10menu_mediav)
 <LI><a href="#[c5]">menu_language()</a> from menu_language.o(i._Z13menu_languagev) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[b9]">on_fan_update()</a> from menu_temperature.o(i._Z13on_fan_updatev) referenced from menu_temperature.o(i._Z16menu_temperaturev)
 <LI><a href="#[b9]">on_fan_update()</a> from menu_temperature.o(i._Z13on_fan_updatev) referenced from menu_tune.o(i._Z9menu_tunev)
 <LI><a href="#[b2]">read_byte_ram(unsigned char*)</a> from fontutils.o(i._Z13read_byte_ramPh) referenced from fontutils.o(i._Z11utf8_strlenPKc)
 <LI><a href="#[b2]">read_byte_ram(unsigned char*)</a> from fontutils.o(i._Z13read_byte_ramPh) referenced from u8g_fontutf8.o(i._Z15uxg_DrawUtf8StrP6_u8g_tjjPKct)
 <LI><a href="#[b2]">read_byte_ram(unsigned char*)</a> from fontutils.o(i._Z13read_byte_ramPh) referenced from u8g_fontutf8.o(i._Z24uxg_GetUtf8StrPixelWidthP6_u8g_tPKc)
 <LI><a href="#[b2]">read_byte_ram(unsigned char*)</a> from fontutils.o(i._Z13read_byte_ramPh) referenced from marlinui.o(i._ZN8MarlinUI25draw_select_screen_promptEPKcS1_S1_)
 <LI><a href="#[b3]">read_byte_rom(unsigned char*)</a> from fontutils.o(i._Z13read_byte_romPh) referenced from fontutils.o(i._Z13utf8_strlen_PPKc)
 <LI><a href="#[b3]">read_byte_rom(unsigned char*)</a> from fontutils.o(i._Z13read_byte_romPh) referenced from marlinui.o(i._Z13wrap_string_PRhS_PKcb)
 <LI><a href="#[b3]">read_byte_rom(unsigned char*)</a> from fontutils.o(i._Z13read_byte_romPh) referenced from u8g_fontutf8.o(i._Z16uxg_DrawUtf8StrPP6_u8g_tjjPKct)
 <LI><a href="#[b3]">read_byte_rom(unsigned char*)</a> from fontutils.o(i._Z13read_byte_romPh) referenced from lcdprint.o(i._Z19lcd_put_u8str_ind_PPKcaS0_h)
 <LI><a href="#[b3]">read_byte_rom(unsigned char*)</a> from fontutils.o(i._Z13read_byte_romPh) referenced from u8g_fontutf8.o(i._Z25uxg_GetUtf8StrPixelWidthPP6_u8g_tPKc)
 <LI><a href="#[ff]">lcd_babystep_z()</a> from menu_tune.o(i._Z14lcd_babystep_zv) referenced from menu_tune.o(i._Z9menu_tunev)
 <LI><a href="#[bb]">menu_preheat_m()</a> from menu_temperature.o(i._Z14menu_preheat_mv) referenced 2 times from menu_temperature.o(i._Z16menu_temperaturev)
 <LI><a href="#[119]">stepTC_Handler()</a> from board_tim0.o(i._Z14stepTC_Handlerv) referenced from board_tim0.o(i.setup_time2B)
 <LI><a href="#[118]">tempTC_Handler()</a> from board_tim0.o(i._Z14tempTC_Handlerv) referenced from board_tim0.o(i.setup_time2A)
 <LI><a href="#[10e]">_lcd_babystep_x()</a> from menu_tune.o(i._Z15_lcd_babystep_xv) referenced from menu_tune.o(i._ZZ9menu_tunevENUlvE3_4_FUNEv)
 <LI><a href="#[10f]">_lcd_babystep_y()</a> from menu_tune.o(i._Z15_lcd_babystep_yv) referenced from menu_tune.o(i._ZZ9menu_tunevENUlvE5_4_FUNEv)
 <LI><a href="#[b5]">_lcd_babystep_z()</a> from menu_tune.o(i._Z15_lcd_babystep_zv) referenced from menu_tune.o(i._Z14lcd_babystep_zv)
 <LI><a href="#[ea]">menu_info_board()</a> from menu_info.o(i._Z15menu_info_boardv) referenced from menu_info.o(i._Z9menu_infov)
 <LI><a href="#[b6]">do_preheat_end_m()</a> from menu_temperature.o(i._Z16do_preheat_end_mv) referenced from menu_temperature.o(i._Z14menu_preheat_mv)
 <LI><a href="#[f3]">menu_temperature()</a> from menu_temperature.o(i._Z16menu_temperaturev) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[e9]">menu_info_printer()</a> from menu_info.o(i._Z17menu_info_printerv) referenced from menu_info.o(i._Z9menu_infov)
 <LI><a href="#[100]">menu_job_recovery()</a> from menu_job_recovery.o(i._Z17menu_job_recoveryv) referenced from m1000.o(i._ZN10GcodeSuite5M1000Ev)
 <LI><a href="#[11a]">u8g_font_get_char(const void*)</a> from u8g_font.o(i._Z17u8g_font_get_charPKv) referenced from u8g_font.o(i.u8g_GetStrPixelWidth)
 <LI><a href="#[d1]">menu_advanced_jerk()</a> from menu_advanced.o(i._Z18menu_advanced_jerkv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[f5]">menu_configuration()</a> from menu_configuration.o(i._Z18menu_configurationv) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[11f]">Usart1RxIrqCallback()</a> from usart.o(i._Z19Usart1RxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[127]">Usart1TxIrqCallback()</a> from usart.o(i._Z19Usart1TxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[11e]">Usart2RxIrqCallback()</a> from usart.o(i._Z19Usart2RxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[126]">Usart2TxIrqCallback()</a> from usart.o(i._Z19Usart2TxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[11d]">Usart3RxIrqCallback()</a> from usart.o(i._Z19Usart3RxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[125]">Usart3TxIrqCallback()</a> from usart.o(i._Z19Usart3TxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[11c]">Usart4RxIrqCallback()</a> from usart.o(i._Z19Usart4RxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[124]">Usart4TxIrqCallback()</a> from usart.o(i._Z19Usart4TxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[123]">Usart1ErrIrqCallback()</a> from usart.o(i._Z20Usart1ErrIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[122]">Usart2ErrIrqCallback()</a> from usart.o(i._Z20Usart2ErrIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[121]">Usart3ErrIrqCallback()</a> from usart.o(i._Z20Usart3ErrIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[120]">Usart4ErrIrqCallback()</a> from usart.o(i._Z20Usart4ErrIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[eb]">menu_info_thermistors()</a> from menu_info.o(i._Z21menu_info_thermistorsv) referenced from menu_info.o(i._Z9menu_infov)
 <LI><a href="#[d4]">menu_advanced_filament()</a> from menu_advanced.o(i._Z22menu_advanced_filamentv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[bf]">menu_advanced_settings()</a> from menu_advanced.o(i._Z22menu_advanced_settingsv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[cf]">menu_advanced_velocity()</a> from menu_advanced.o(i._Z22menu_advanced_velocityv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[12b]">Usart1TxCmpltIrqCallback()</a> from usart.o(i._Z24Usart1TxCmpltIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[12a]">Usart2TxCmpltIrqCallback()</a> from usart.o(i._Z24Usart2TxCmpltIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[129]">Usart3TxCmpltIrqCallback()</a> from usart.o(i._Z24Usart3TxCmpltIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[128]">Usart4TxCmpltIrqCallback()</a> from usart.o(i._Z24Usart4TxCmpltIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[d3]">menu_advanced_temperature()</a> from menu_advanced.o(i._Z25menu_advanced_temperaturev) referenced 2 times from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[109]">_goto_menu_move_distance_e()</a> from menu_motion.o(i._Z26_goto_menu_move_distance_ev) referenced from menu_motion.o(i._ZZ27_menu_move_distance_e_maybevENKUlvE_clEv)
 <LI><a href="#[d0]">menu_advanced_acceleration()</a> from menu_advanced.o(i._Z26menu_advanced_accelerationv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[d2]">menu_advanced_steps_per_mm()</a> from menu_advanced.o(i._Z26menu_advanced_steps_per_mmv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[110]">sdcard_start_selected_file()</a> from menu_media.o(i._Z26sdcard_start_selected_filev) referenced from menu_media.o(i._ZZN15MenuItem_sdfile6actionEPKcR10CardReaderENKUlvE_clEv)
 <LI><a href="#[a]">u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)</a> from ultralcd_st7920_u8glib_rrd_avr.o(i._Z28u8g_dev_rrd_st7920_128x64_fnP6_u8g_tP10_u8g_dev_thPv) referenced 2 times from ultralcd_st7920_u8glib_rrd_avr.o(.data)
 <LI><a href="#[be]">lcd_power_loss_recovery_cancel()</a> from menu_job_recovery.o(i._Z30lcd_power_loss_recovery_cancelv) referenced from menu_job_recovery.o(i._Z17menu_job_recoveryv)
 <LI><a href="#[c1]">_menu_configuration_preheat_settings()</a> from menu_configuration.o(i._Z36_menu_configuration_preheat_settingsv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[155]">premain()</a> from main.o(i._Z7premainv) referenced from main.o(.init_array.00101)
 <LI><a href="#[f6]">menu_info()</a> from menu_info.o(i._Z9menu_infov) referenced 2 times from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[106]">menu_main()</a> from menu_main.o(i._Z9menu_mainv) referenced from marlinui.o(i._ZN8MarlinUI13status_screenEv)
 <LI><a href="#[af]">menu_move()</a> from menu_motion.o(i._Z9menu_movev) referenced from menu_motion.o(i._Z11menu_motionv)
 <LI><a href="#[ef]">menu_tune()</a> from menu_tune.o(i._Z9menu_tunev) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[b8]">Temperature::start_watching_bed()</a> from temperature.o(i._ZN11Temperature18start_watching_bedEv) referenced from menu_temperature.o(i._Z16menu_temperaturev)
 <LI><a href="#[b8]">Temperature::start_watching_bed()</a> from temperature.o(i._ZN11Temperature18start_watching_bedEv) referenced from menu_tune.o(i._Z9menu_tunev)
 <LI><a href="#[116]">Temperature::tr_state_machine_t::tr_state_machine_t()</a> from temperature.o(i._ZN11Temperature18tr_state_machine_tC1Ev) referenced from temperature.o(i.__sti___15_temperature_cpp_ca4fe824)
 <LI><a href="#[12e]">TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E6actionEPKcPsssPFvvEb)
 <LI><a href="#[12c]">TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E11edit_screenEv)
 <LI><a href="#[12d]">TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E11edit_screenEv)
 <LI><a href="#[131]">TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E6actionEPKcPfffPFvvEb)
 <LI><a href="#[12f]">TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E11edit_screenEv)
 <LI><a href="#[130]">TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E11edit_screenEv)
 <LI><a href="#[134]">TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E6actionEPKcPfffPFvvEb)
 <LI><a href="#[132]">TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E11edit_screenEv)
 <LI><a href="#[133]">TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E11edit_screenEv)
 <LI><a href="#[ce]">TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E11edit_screenEv) referenced from menu_advanced.o(i._Z22menu_advanced_filamentv)
 <LI><a href="#[135]">TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E11edit_screenEv)
 <LI><a href="#[136]">TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E11edit_screenEv)
 <LI><a href="#[139]">TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E6actionEPKcPfffPFvvEb)
 <LI><a href="#[137]">TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E11edit_screenEv)
 <LI><a href="#[138]">TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E11edit_screenEv)
 <LI><a href="#[ba]">TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::edit_screen()</a> from menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE11edit_screenEv) referenced from menu_temperature.o(i._Z16menu_temperaturev)
 <LI><a href="#[ba]">TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::edit_screen()</a> from menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE11edit_screenEv) referenced from menu_configuration.o(i._Z36_menu_configuration_preheat_settingsv)
 <LI><a href="#[ba]">TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::edit_screen()</a> from menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE11edit_screenEv) referenced from menu_tune.o(i._Z9menu_tunev)
 <LI><a href="#[13a]">TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::load(void*, int)</a> from menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE4loadEPvi) referenced from menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE11edit_screenEv)
 <LI><a href="#[13b]">TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::to_string(int)</a> from menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE9to_stringEi) referenced from menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE11edit_screenEv)
 <LI><a href="#[13e]">TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E6actionEPKcPjjjPFvvEb)
 <LI><a href="#[13c]">TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E11edit_screenEv)
 <LI><a href="#[13d]">TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E11edit_screenEv)
 <LI><a href="#[141]">TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E6actionEPKcPfffPFvvEb)
 <LI><a href="#[13f]">TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E11edit_screenEv)
 <LI><a href="#[140]">TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E11edit_screenEv)
 <LI><a href="#[d8]">TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI27MenuEditItemInfo_float42_52E11edit_screenEv) referenced from menu_advanced.o(i._Z25menu_advanced_temperaturev)
 <LI><a href="#[142]">TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI27MenuEditItemInfo_float42_52E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI27MenuEditItemInfo_float42_52E11edit_screenEv)
 <LI><a href="#[143]">TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI27MenuEditItemInfo_float42_52E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI27MenuEditItemInfo_float42_52E11edit_screenEv)
 <LI><a href="#[146]">TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE6actionEPKcPfffPFvvEb)
 <LI><a href="#[144]">TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE11edit_screenEv)
 <LI><a href="#[145]">TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE11edit_screenEv)
 <LI><a href="#[149]">TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE6actionEPKcPfffPFvvEb)
 <LI><a href="#[147]">TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE11edit_screenEv)
 <LI><a href="#[148]">TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE11edit_screenEv)
 <LI><a href="#[14e]">HardwareSerial::read()</a> from hardwareserial.o(i._ZN14HardwareSerial4readEv) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[14f]">HardwareSerial::flush()</a> from hardwareserial.o(i._ZN14HardwareSerial5flushEv) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[14a]">HardwareSerial::write(unsigned char)</a> from hardwareserial.o(i._ZN14HardwareSerial5writeEh) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[14d]">HardwareSerial::available()</a> from hardwareserial.o(i._ZN14HardwareSerial9availableEv) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[c0]">PrintJobRecovery::changed()</a> from powerloss.o(i._ZN16PrintJobRecovery7changedEv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[152]">DiskIODriver_SDIO::writeBlock(unsigned, const unsigned char*)</a> from cardreader.o(i._ZN17DiskIODriver_SDIO10writeBlockEjPKh) referenced from cardreader.o(.constdata__ZTV17DiskIODriver_SDIO)
 <LI><a href="#[150]">DiskIODriver_SDIO::init(unsigned char, signed char)</a> from cardreader.o(i._ZN17DiskIODriver_SDIO4initEha) referenced from cardreader.o(.constdata__ZTV17DiskIODriver_SDIO)
 <LI><a href="#[151]">DiskIODriver_SDIO::readBlock(unsigned, unsigned char*)</a> from cardreader.o(i._ZN17DiskIODriver_SDIO9readBlockEjPh) referenced from cardreader.o(.constdata__ZTV17DiskIODriver_SDIO)
 <LI><a href="#[117]">[local to adc_c]::adc_default_config(adc_dev*)</a> from adc.o(i._ZN22_INTERNAL_5_adc_c_adc118adc_default_configEP7adc_dev) referenced from adc.o(i.setup_adcs)
 <LI><a href="#[b4]">[local to u8g_fontutf8_cpp]::fontgroup_cb_draw_u8g(void*, const void*, const char*)</a> from u8g_fontutf8.o(i._ZN38_INTERNAL_16_u8g_fontutf8_cpp_853c9b3b21fontgroup_cb_draw_u8gEPvPKvPKc) referenced from u8g_fontutf8.o(i._Z13uxg_DrawWcharP6_u8g_tjjjt)
 <LI><a href="#[b4]">[local to u8g_fontutf8_cpp]::fontgroup_cb_draw_u8g(void*, const void*, const char*)</a> from u8g_fontutf8.o(i._ZN38_INTERNAL_16_u8g_fontutf8_cpp_853c9b3b21fontgroup_cb_draw_u8gEPvPKvPKc) referenced from u8g_fontutf8.o(i._Z15uxg_DrawUtf8StrP6_u8g_tjjPKct)
 <LI><a href="#[b4]">[local to u8g_fontutf8_cpp]::fontgroup_cb_draw_u8g(void*, const void*, const char*)</a> from u8g_fontutf8.o(i._ZN38_INTERNAL_16_u8g_fontutf8_cpp_853c9b3b21fontgroup_cb_draw_u8gEPvPKvPKc) referenced from u8g_fontutf8.o(i._Z16uxg_DrawUtf8StrPP6_u8g_tjjPKct)
 <LI><a href="#[d7]">[local to u8g_fontutf8_cpp]::fontgroup_cb_draw_u8gstrlen(void*, const void*, const char*)</a> from u8g_fontutf8.o(i._ZN38_INTERNAL_16_u8g_fontutf8_cpp_853c9b3b27fontgroup_cb_draw_u8gstrlenEPvPKvPKc) referenced from u8g_fontutf8.o(i._Z24uxg_GetUtf8StrPixelWidthP6_u8g_tPKc)
 <LI><a href="#[d7]">[local to u8g_fontutf8_cpp]::fontgroup_cb_draw_u8gstrlen(void*, const void*, const char*)</a> from u8g_fontutf8.o(i._ZN38_INTERNAL_16_u8g_fontutf8_cpp_853c9b3b27fontgroup_cb_draw_u8gstrlenEPvPKvPKc) referenced from u8g_fontutf8.o(i._Z25uxg_GetUtf8StrPixelWidthPP6_u8g_tPKc)
 <LI><a href="#[103]">[local to u8g_fontutf8_cpp]::pf_bsearch_cb_comp_fntifo_pgm(void*, unsigned, void*)</a> from u8g_fontutf8.o(i._ZN38_INTERNAL_16_u8g_fontutf8_cpp_853c9b3b29pf_bsearch_cb_comp_fntifo_pgmEPvjS0_) referenced from u8g_fontutf8.o(i._ZN38_INTERNAL_16_u8g_fontutf8_cpp_853c9b3b14fontgroup_findEP13_font_group_tj)
 <LI><a href="#[bd]">[local to menu_job_recovery_cpp]::lcd_power_loss_recovery_resume()</a> from menu_job_recovery.o(i._ZN43_INTERNAL_21_menu_job_recovery_cpp_ae259b3f30lcd_power_loss_recovery_resumeEv) referenced from menu_job_recovery.o(i._Z17menu_job_recoveryv)
 <LI><a href="#[14b]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[14b]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from marlinui_dogm.o(.constdata__ZTV24U8GLIB_ST7920_128X64_RRD)
 <LI><a href="#[14b]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[14b]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from hardwareserial.o(.constdata__ZTV6Stream)
 <LI><a href="#[14c]">Print::write(const void*, unsigned)</a> from print.o(i._ZN5Print5writeEPKvj) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[14c]">Print::write(const void*, unsigned)</a> from print.o(i._ZN5Print5writeEPKvj) referenced from marlinui_dogm.o(.constdata__ZTV24U8GLIB_ST7920_128X64_RRD)
 <LI><a href="#[14c]">Print::write(const void*, unsigned)</a> from print.o(i._ZN5Print5writeEPKvj) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[14c]">Print::write(const void*, unsigned)</a> from print.o(i._ZN5Print5writeEPKvj) referenced from hardwareserial.o(.constdata__ZTV6Stream)
 <LI><a href="#[114]">SdFile::SdFile()</a> from cardreader.o(i._ZN6SdFileC1Ev) referenced from cardreader.o(i.__sti___14_cardreader_cpp_M23_STR)
 <LI><a href="#[ac]">SdFile::~SdFile()</a> from powerloss.o(i._ZN6SdFileD1Ev) referenced from cardreader.o(i.<Func48>)
 <LI><a href="#[ac]">SdFile::~SdFile()</a> from powerloss.o(i._ZN6SdFileD1Ev) referenced from cardreader.o(i._ZN10CardReader10diveToFileEbRP6SdFilePKcb)
 <LI><a href="#[ac]">SdFile::~SdFile()</a> from powerloss.o(i._ZN6SdFileD1Ev) referenced from powerloss.o(i.__sti___13_powerloss_cpp_1e506b3c)
 <LI><a href="#[ac]">SdFile::~SdFile()</a> from powerloss.o(i._ZN6SdFileD1Ev) referenced from cardreader.o(i.__sti___14_cardreader_cpp_M23_STR)
 <LI><a href="#[153]">U8GLIB::write(unsigned char)</a> from marlinui_dogm.o(i._ZN6U8GLIB5writeEh) referenced from marlinui_dogm.o(.constdata__ZTV24U8GLIB_ST7920_128X64_RRD)
 <LI><a href="#[cd]">Planner::calculate_volumetric_multipliers()</a> from planner.o(i._ZN7Planner32calculate_volumetric_multipliersEv) referenced from menu_advanced.o(i._Z22menu_advanced_filamentv)
 <LI><a href="#[ec]">MarlinUI::abort_load()</a> from marlinui.o(i._ZN8MarlinUI10abort_loadEv) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[f1]">MarlinUI::abort_print()</a> from marlinui.o(i._ZN8MarlinUI11abort_printEv) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[f1]">MarlinUI::abort_print()</a> from marlinui.o(i._ZN8MarlinUI11abort_printEv) referenced from menu_main.o(i._ZZ9menu_mainvENKUlvE_clEv)
 <LI><a href="#[d6]">MarlinUI::init_eeprom()</a> from marlinui.o(i._ZN8MarlinUI11init_eepromEv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[d6]">MarlinUI::init_eeprom()</a> from marlinui.o(i._ZN8MarlinUI11init_eepromEv) referenced from menu_advanced.o(i._ZZ22menu_advanced_settingsvENKUlvE1_clEv)
 <LI><a href="#[ed]">MarlinUI::pause_print()</a> from marlinui.o(i._ZN8MarlinUI11pause_printEv) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[b0]">MarlinUI::auto_Feeding()</a> from marlinui.o(i._ZN8MarlinUI12auto_FeedingEv) referenced from menu_motion.o(i._Z11menu_motionv)
 <LI><a href="#[f0]">MarlinUI::resume_print()</a> from marlinui.o(i._ZN8MarlinUI12resume_printEv) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[b1]">MarlinUI::auto_Desizing()</a> from marlinui.o(i._ZN8MarlinUI13auto_DesizingEv) referenced from menu_motion.o(i._Z11menu_motionv)
 <LI><a href="#[c3]">MarlinUI::load_settings()</a> from marlinui.o(i._ZN8MarlinUI13load_settingsEv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[104]">MarlinUI::status_screen()</a> from marlinui.o(i._ZN8MarlinUI13status_screenEv) referenced from menu.o(i._ZN8MarlinUI11goto_screenEPFvvEthh)
 <LI><a href="#[104]">MarlinUI::status_screen()</a> from marlinui.o(i._ZN8MarlinUI13status_screenEv) referenced from marlinui.o(i._ZN8MarlinUI16on_status_screenEv)
 <LI><a href="#[104]">MarlinUI::status_screen()</a> from marlinui.o(i._ZN8MarlinUI13status_screenEv) referenced from menu.o(i._ZN8MarlinUI16return_to_statusEv)
 <LI><a href="#[104]">MarlinUI::status_screen()</a> from marlinui.o(i._ZN8MarlinUI13status_screenEv) referenced from marlinui.o(i.__sti___12_marlinui_cpp_ui)
 <LI><a href="#[c4]">MarlinUI::reset_settings()</a> from marlinui.o(i._ZN8MarlinUI14reset_settingsEv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[c2]">MarlinUI::store_settings()</a> from marlinui.o(i._ZN8MarlinUI14store_settingsEv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[c2]">MarlinUI::store_settings()</a> from marlinui.o(i._ZN8MarlinUI14store_settingsEv) referenced from menu_configuration.o(i._Z36_menu_configuration_preheat_settingsv)
 <LI><a href="#[108]">MarlinUI::goto_previous_screen()</a> from menu_main.o(i._ZN8MarlinUI20goto_previous_screenEv) referenced from menu_motion.o(i._ZZ27_menu_move_distance_e_maybevENKUlvE_clEv)
 <LI><a href="#[108]">MarlinUI::goto_previous_screen()</a> from menu_main.o(i._ZN8MarlinUI20goto_previous_screenEv) referenced from menu_main.o(i._ZZ9menu_mainvENKUlvE_clEv)
 <LI><a href="#[108]">MarlinUI::goto_previous_screen()</a> from menu_main.o(i._ZN8MarlinUI20goto_previous_screenEv) referenced from menu_media.o(i._ZZN15MenuItem_sdfile6actionEPKcR10CardReaderENKUlvE_clEv)
 <LI><a href="#[b7]">menu_temperature()::[lambda() (instance 1)]::_FUN()</a> from menu_temperature.o(i._ZZ16menu_temperaturevENUlvE_4_FUNEv) referenced from menu_temperature.o(i._Z16menu_temperaturev)
 <LI><a href="#[cc]">_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 13)]::_FUN()</a> from menu_motion.o(i._ZZ19_menu_move_distance8AxisEnumPFvvEaENUlvE11_4_FUNEv) referenced from menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa)
 <LI><a href="#[c7]">_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 3)]::_FUN()</a> from menu_motion.o(i._ZZ19_menu_move_distance8AxisEnumPFvvEaENUlvE1_4_FUNEv) referenced from menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa)
 <LI><a href="#[c8]">_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 5)]::_FUN()</a> from menu_motion.o(i._ZZ19_menu_move_distance8AxisEnumPFvvEaENUlvE3_4_FUNEv) referenced from menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa)
 <LI><a href="#[c9]">_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 7)]::_FUN()</a> from menu_motion.o(i._ZZ19_menu_move_distance8AxisEnumPFvvEaENUlvE5_4_FUNEv) referenced from menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa)
 <LI><a href="#[ca]">_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 9)]::_FUN()</a> from menu_motion.o(i._ZZ19_menu_move_distance8AxisEnumPFvvEaENUlvE7_4_FUNEv) referenced from menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa)
 <LI><a href="#[cb]">_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 11)]::_FUN()</a> from menu_motion.o(i._ZZ19_menu_move_distance8AxisEnumPFvvEaENUlvE9_4_FUNEv) referenced from menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa)
 <LI><a href="#[c6]">_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 1)]::_FUN()</a> from menu_motion.o(i._ZZ19_menu_move_distance8AxisEnumPFvvEaENUlvE_4_FUNEv) referenced from menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa)
 <LI><a href="#[d5]">menu_advanced_settings()::[lambda() (instance 3)]::_FUN()</a> from menu_advanced.o(i._ZZ22menu_advanced_settingsvENUlvE1_4_FUNEv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[da]">menu_advanced_temperature()::[lambda() (instance 3)]::_FUN()</a> from menu_advanced.o(i._ZZ25menu_advanced_temperaturevENUlvE1_4_FUNEv) referenced from menu_advanced.o(i._Z25menu_advanced_temperaturev)
 <LI><a href="#[db]">menu_advanced_temperature()::[lambda() (instance 5)]::_FUN()</a> from menu_advanced.o(i._ZZ25menu_advanced_temperaturevENUlvE3_4_FUNEv) referenced from menu_advanced.o(i._Z25menu_advanced_temperaturev)
 <LI><a href="#[dc]">menu_advanced_temperature()::[lambda() (instance 7)]::_FUN()</a> from menu_advanced.o(i._ZZ25menu_advanced_temperaturevENUlvE5_4_FUNEv) referenced from menu_advanced.o(i._Z25menu_advanced_temperaturev)
 <LI><a href="#[dd]">menu_advanced_temperature()::[lambda() (instance 9)]::_FUN()</a> from menu_advanced.o(i._ZZ25menu_advanced_temperaturevENUlvE7_4_FUNEv) referenced from menu_advanced.o(i._Z25menu_advanced_temperaturev)
 <LI><a href="#[de]">menu_advanced_temperature()::[lambda() (instance 11)]::_FUN()</a> from menu_advanced.o(i._ZZ25menu_advanced_temperaturevENUlvE9_4_FUNEv) referenced from menu_advanced.o(i._Z25menu_advanced_temperaturev)
 <LI><a href="#[d9]">menu_advanced_temperature()::[lambda() (instance 1)]::_FUN()</a> from menu_advanced.o(i._ZZ25menu_advanced_temperaturevENUlvE_4_FUNEv) referenced from menu_advanced.o(i._Z25menu_advanced_temperaturev)
 <LI><a href="#[df]">_goto_menu_move_distance_e()::[lambda() (instance 1)]::_FUN()</a> from menu_motion.o(i._ZZ26_goto_menu_move_distance_evENUlvE_4_FUNEv) referenced from menu_motion.o(i._Z26_goto_menu_move_distance_ev)
 <LI><a href="#[e1]">menu_advanced_acceleration()::[lambda() (instance 3)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE1_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_accelerationv)
 <LI><a href="#[e2]">menu_advanced_acceleration()::[lambda() (instance 5)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE3_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_accelerationv)
 <LI><a href="#[e3]">menu_advanced_acceleration()::[lambda() (instance 7)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE5_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_accelerationv)
 <LI><a href="#[e0]">menu_advanced_acceleration()::[lambda() (instance 1)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_accelerationv)
 <LI><a href="#[e5]">menu_advanced_steps_per_mm()::[lambda() (instance 3)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE1_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
 <LI><a href="#[e6]">menu_advanced_steps_per_mm()::[lambda() (instance 5)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE3_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
 <LI><a href="#[e7]">menu_advanced_steps_per_mm()::[lambda() (instance 7)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE5_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
 <LI><a href="#[e4]">menu_advanced_steps_per_mm()::[lambda() (instance 1)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
 <LI><a href="#[10c]">_menu_move_distance_e_maybe()::[lambda() (instance 1)]::_FUN()</a> from menu_motion.o(i._ZZ27_menu_move_distance_e_maybevENUlvE_4_FUNEv) referenced from menu_motion.o(i._ZZ9menu_movevENUlvE5_4_FUNEv)
 <LI><a href="#[e8]">_menu_configuration_preheat_settings()::[lambda() (instance 1)]::_FUN()</a> from menu_configuration.o(i._ZZ36_menu_configuration_preheat_settingsvENUlvE_4_FUNEv) referenced from menu_configuration.o(i._Z36_menu_configuration_preheat_settingsv)
 <LI><a href="#[ee]">menu_main()::[lambda() (instance 1)]::_FUN()</a> from menu_main.o(i._ZZ9menu_mainvENUlvE_4_FUNEv) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[f8]">menu_move()::[lambda() (instance 3)]::_FUN()</a> from menu_motion.o(i._ZZ9menu_movevENUlvE1_4_FUNEv) referenced from menu_motion.o(i._Z9menu_movev)
 <LI><a href="#[f9]">menu_move()::[lambda() (instance 5)]::_FUN()</a> from menu_motion.o(i._ZZ9menu_movevENUlvE3_4_FUNEv) referenced from menu_motion.o(i._Z9menu_movev)
 <LI><a href="#[fa]">menu_move()::[lambda() (instance 7)]::_FUN()</a> from menu_motion.o(i._ZZ9menu_movevENUlvE5_4_FUNEv) referenced from menu_motion.o(i._Z9menu_movev)
 <LI><a href="#[f7]">menu_move()::[lambda() (instance 1)]::_FUN()</a> from menu_motion.o(i._ZZ9menu_movevENUlvE_4_FUNEv) referenced from menu_motion.o(i._Z9menu_movev)
 <LI><a href="#[fc]">menu_tune()::[lambda() (instance 3)]::_FUN()</a> from menu_tune.o(i._ZZ9menu_tunevENUlvE1_4_FUNEv) referenced from menu_tune.o(i._Z9menu_tunev)
 <LI><a href="#[fd]">menu_tune()::[lambda() (instance 5)]::_FUN()</a> from menu_tune.o(i._ZZ9menu_tunevENUlvE3_4_FUNEv) referenced from menu_tune.o(i._Z9menu_tunev)
 <LI><a href="#[fe]">menu_tune()::[lambda() (instance 7)]::_FUN()</a> from menu_tune.o(i._ZZ9menu_tunevENUlvE5_4_FUNEv) referenced from menu_tune.o(i._Z9menu_tunev)
 <LI><a href="#[fb]">menu_tune()::[lambda() (instance 1)]::_FUN()</a> from menu_tune.o(i._ZZ9menu_tunevENUlvE_4_FUNEv) referenced from menu_tune.o(i._Z9menu_tunev)
 <LI><a href="#[ae]">MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::_FUN()</a> from menu_media.o(i._ZZN15MenuItem_sdfile6actionEPKcR10CardReaderENUlvE_4_FUNEv) referenced from menu_media.o(i._Z10menu_mediav)
 <LI><a href="#[105]">MarlinUI::synchronize(const char*)::[lambda() (instance 1)]::_FUN()</a> from menu.o(i._ZZN8MarlinUI11synchronizeEPKcENUlvE_4_FUNEv) referenced from menu.o(i._ZN8MarlinUI11synchronizeEPKc)
 <LI><a href="#[107]">_goto_menu_move_distance_e()::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 1)]::_FUN()</a> from menu_motion.o(i._ZZZ26_goto_menu_move_distance_evENKUlvE_clEvENUlvE_4_FUNEv) referenced from menu_motion.o(i._ZZ26_goto_menu_move_distance_evENUlvE_4_FUNEv)
 <LI><a href="#[154]">__cxa_pure_virtual</a> from cxxabi-compat.o(i.__cxa_pure_virtual) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[154]">__cxa_pure_virtual</a> from cxxabi-compat.o(i.__cxa_pure_virtual) referenced 5 times from hardwareserial.o(.constdata__ZTV6Stream)
 <LI><a href="#[a8]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32f460petb.o(.text)
 <LI><a href="#[15b]">__sti___10_buzzer_cpp_f84fbc67</a> from buzzer.o(i.__sti___10_buzzer_cpp_f84fbc67) referenced from buzzer.o(.init_array)
 <LI><a href="#[15c]">__sti___11_planner_cpp_planner</a> from planner.o(i.__sti___11_planner_cpp_planner) referenced from planner.o(.init_array)
 <LI><a href="#[156]">__sti___12_board_gpio_c_PIN_MAP</a> from board_gpio.o(i.__sti___12_board_gpio_c_PIN_MAP) referenced from board_gpio.o(.init_array)
 <LI><a href="#[15a]">__sti___12_marlinui_cpp_ui</a> from marlinui.o(i.__sti___12_marlinui_cpp_ui) referenced from marlinui.o(.init_array)
 <LI><a href="#[158]">__sti___13_powerloss_cpp_1e506b3c</a> from powerloss.o(i.__sti___13_powerloss_cpp_1e506b3c) referenced from powerloss.o(.init_array)
 <LI><a href="#[157]">__sti___14_MarlinCore_cpp_card</a> from marlincore.o(i.__sti___14_MarlinCore_cpp_card) referenced from marlincore.o(.init_array)
 <LI><a href="#[15e]">__sti___14_cardreader_cpp_M23_STR</a> from cardreader.o(i.__sti___14_cardreader_cpp_M23_STR) referenced from cardreader.o(.init_array)
 <LI><a href="#[15d]">__sti___15_temperature_cpp_ca4fe824</a> from temperature.o(i.__sti___15_temperature_cpp_ca4fe824) referenced from temperature.o(.init_array)
 <LI><a href="#[159]">__sti___17_marlinui_DOGM_cpp_u8g</a> from marlinui_dogm.o(i.__sti___17_marlinui_DOGM_cpp_u8g) referenced from marlinui_dogm.o(.init_array)
 <LI><a href="#[aa]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[a9]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[113]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[112]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[111]">fputc</a> from hc32f46x_utility.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[ab]">isspace</a> from wstring.o(i.isspace) referenced from strtod.o(.text)
 <LI><a href="#[a6]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[b]">u8g_com_null_fn</a> from u8g_com_null.o(i.u8g_com_null_fn) referenced 2 times from ultralcd_st7920_u8glib_rrd_avr.o(.data)
 <LI><a href="#[11b]">u8g_font_calc_vref_font</a> from u8g_font.o(i.u8g_font_calc_vref_font) referenced from u8g_font.o(i.u8g_SetFontPosBaseline)
 <LI><a href="#[102]">u8g_state_dummy_cb</a> from u8g_state.o(i.u8g_state_dummy_cb) referenced from u8g_ll_api.o(i._ZN34_INTERNAL_12_u8g_ll_api_c_2adb469613u8g_init_dataEP6_u8g_t)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a8]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(.text)
</UL>
<P><STRONG><a name="[588]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[162]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[589]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[164]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[58a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[58b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[58c]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[58d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[165]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[58e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[c]"></a>Reset_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, startup_hc32f460petb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460petb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460petb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460petb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[194]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func48&rang;
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetClkSyncBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetUartBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_utility_c]::SetUartBaudrate(unsigned)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[58f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[590]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[591]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[592]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[2e7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::CardReader()
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::init()
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_GetUtf8StrPixelWidthP(_u8g_t*, const char*)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_GetUtf8StrPixelWidth(_u8g_t*, const char*)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_systick
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::Sdioc_Class(M4_SDIOC_TypeDef*)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>

<P><STRONG><a name="[593]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[341]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[36e]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[226]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_thermistors()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_printer()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_board()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_autotune(heater_id_t)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[328]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[2a7]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const char*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[422]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[340]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::enqueue(const char*, bool)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[466]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[36f]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[16d]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
</UL>

<P><STRONG><a name="[16f]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M997()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G27()
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M110()
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::ushortval(char, unsigned short)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_int()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M26()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_celsius()
</UL>

<P><STRONG><a name="[173]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
</UL>

<P><STRONG><a name="[161]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_powerloss_cpp_1e506b3c
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_cardreader_cpp_M23_STR
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[296]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_PRINT&lang;float, int&rang;(T1, T2)
</UL>

<P><STRONG><a name="[53a]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[4cf]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[4ce]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[594]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[54b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[595]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[171]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[186]"></a>__strtof_int</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, strtof.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>

<P><STRONG><a name="[596]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[166]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[184]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
</UL>

<P><STRONG><a name="[597]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>

<P><STRONG><a name="[17a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[179]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18c]"></a>_ffix_r</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ffix_r
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>

<P><STRONG><a name="[598]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[53b]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[163]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[599]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[187]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>

<P><STRONG><a name="[59a]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[192]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[a9]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[59b]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_now_P(const char*)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[32b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cdup()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByIndex(unsigned short)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cdroot()
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countFilesInWorkDir()
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[59c]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[59d]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[59e]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[59f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5a0]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[498]"></a>ADC_AddAdcChannel</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, hc32f46x_adc.o(i.ADC_AddAdcChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_AddAdcChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_channelchonfig(adc_dev*, en_pin_mode)
</UL>

<P><STRONG><a name="[489]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hc32f46x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_initconfig(adc_dev*)
</UL>

<P><STRONG><a name="[499]"></a>ADC_StartConvert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_adc.o(i.ADC_StartConvert))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_default_config(adc_dev*)
</UL>

<P><STRONG><a name="[493]"></a>ADC_TriggerSrcCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hc32f46x_adc.o(i.ADC_TriggerSrcCmd))
<BR><BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_TriggerConfig(adc_dev*, unsigned)
</UL>

<P><STRONG><a name="[10]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[4ac]"></a>CLK_GetClockFreq</STRONG> (Thumb, 196 bytes, Stack size 20 bytes, hc32f46x_clk.o(i.CLK_GetClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_systick
</UL>

<P><STRONG><a name="[196]"></a>CLK_GetFlagStatus</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllCmd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[4ab]"></a>CLK_GetSysClkSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[195]"></a>CLK_MpllCmd</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, hc32f46x_clk.o(i.CLK_MpllCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_MpllCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[4a6]"></a>CLK_MpllConfig</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_MpllConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[485]"></a>CLK_SetPeriClkSource</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_SetPeriClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>

<P><STRONG><a name="[483]"></a>CLK_SetPllSource</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_SetPllSource))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>

<P><STRONG><a name="[197]"></a>CLK_SetSysClkSource</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, hc32f46x_clk.o(i.CLK_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[4a5]"></a>CLK_SysClkConfig</STRONG> (Thumb, 184 bytes, Stack size 36 bytes, hc32f46x_clk.o(i.CLK_SysClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLK_SysClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[199]"></a>CLK_UpllCmd</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, hc32f46x_clk.o(i.CLK_UpllCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_UpllCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>

<P><STRONG><a name="[484]"></a>CLK_UpllConfig</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_UpllConfig))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>

<P><STRONG><a name="[19a]"></a>CLK_XtalCmd</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, hc32f46x_clk.o(i.CLK_XtalCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_XtalCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>

<P><STRONG><a name="[482]"></a>CLK_XtalConfig</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hc32f46x_clk.o(i.CLK_XtalConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_XtalConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>

<P><STRONG><a name="[19c]"></a>DMA_ChannelCfg</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, hc32f46x_dmac.o(i.DMA_ChannelCfg))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
</UL>

<P><STRONG><a name="[48f]"></a>DMA_ChannelCmd</STRONG> (Thumb, 318 bytes, Stack size 28 bytes, hc32f46x_dmac.o(i.DMA_ChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_ChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
</UL>

<P><STRONG><a name="[490]"></a>DMA_ClearIrqFlag</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, hc32f46x_dmac.o(i.DMA_ClearIrqFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_ClearIrqFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
</UL>

<P><STRONG><a name="[48e]"></a>DMA_Cmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_dmac.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
</UL>

<P><STRONG><a name="[19b]"></a>DMA_InitChannel</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, hc32f46x_dmac.o(i.DMA_InitChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_InitChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
</UL>

<P><STRONG><a name="[491]"></a>DMA_SetTriggerSrc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hc32f46x_dmac.o(i.DMA_SetTriggerSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetTriggerSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
</UL>

<P><STRONG><a name="[30e]"></a>Ddl_Delay1ms</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hc32f46x_utility.o(i.Ddl_Delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ddl_Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[27c]"></a>Ddl_Delay1us</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hc32f46x_utility.o(i.Ddl_Delay1us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ddl_Delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::send_byte(unsigned char)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::start()
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::stop()
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::nAck()
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::ack()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds(unsigned)
</UL>

<P><STRONG><a name="[19d]"></a>Ddl_UartInit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hc32f46x_utility.o(i.Ddl_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Ddl_UartInit &rArr; [local to hc32f46x_utility_c]::SetUartBaudrate(unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_utility_c]::SetUartBaudrate(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[13]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[54c]"></a>DebugOutput</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hc32f46x_utility.o(i.DebugOutput))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[101]"></a>Dma1Btc3_IrqHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.Dma1Btc3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i._ZN22_INTERNAL_5_adc_c_adc116adc_DMAIrqConfigEv)
</UL>
<P><STRONG><a name="[4a9]"></a>EFM_InstructionCacheCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_InstructionCacheCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[4aa]"></a>EFM_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[4a8]"></a>EFM_SetLatency</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[4a7]"></a>EFM_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[e]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ000_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ000_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ001_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ001_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ002_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ002_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ003_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ003_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ004_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ004_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ005_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ005_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ006_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ006_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ007_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ007_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ008_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ008_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ009_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ009_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ010_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ010_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ011_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ011_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ012_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ012_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ013_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ013_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ014_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ014_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ015_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ015_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ016_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ016_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ017_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ017_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ018_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ018_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ019_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ019_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ020_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ020_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ021_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ021_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ022_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ022_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ023_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ023_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ024_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ024_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ025_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ025_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ026_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ026_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ027_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ027_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ028_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ028_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ029_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ029_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ030_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ030_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ031_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ031_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ032_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ032_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ033_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ033_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ034_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ034_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ035_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ035_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ036_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ036_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ037_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ037_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ038_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ038_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ039_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ039_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ040_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ040_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ041_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ041_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ042_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ042_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ043_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ043_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ044_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ044_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ045_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ045_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ046_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ046_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ047_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ047_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ048_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ048_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ049_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ049_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ050_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ050_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ051_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ051_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ052_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ052_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ053_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ053_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ054_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ054_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ055_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ055_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ056_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ056_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ057_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ057_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ058_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ058_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ059_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ059_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ060_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ060_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ061_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ061_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ062_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ062_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ063_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ063_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ064_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ064_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ065_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ065_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ066_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ066_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ067_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ067_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ068_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ068_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ069_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ069_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ070_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ070_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ071_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ071_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ072_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ072_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ073_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ073_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ074_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ074_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ075_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ075_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ076_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ076_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ077_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ077_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ078_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ078_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ079_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ079_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ080_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ080_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ081_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ081_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ082_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ082_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ083_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ083_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ084_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ084_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ085_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ085_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ086_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ086_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ087_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ087_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ088_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ088_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ089_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ089_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ090_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ090_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ091_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ091_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ092_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ092_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ093_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ093_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ094_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ094_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ095_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ095_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ096_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ096_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ097_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ097_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ098_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ098_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ099_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ099_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ100_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ100_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ101_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ101_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ102_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ102_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ103_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ103_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ104_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ104_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ105_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ105_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ106_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ106_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ107_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ107_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ108_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ108_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ109_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ109_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ110_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ110_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ111_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ111_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ112_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ112_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ113_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ113_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ114_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ114_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ115_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ115_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ116_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ116_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ117_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ117_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ118_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ118_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ119_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ119_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ120_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ120_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ121_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ121_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ122_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ122_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ123_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ123_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ124_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ124_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ125_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ125_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ126_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ126_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ127_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ127_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ128_Handler</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ128_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ128_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ129_Handler</STRONG> (Thumb, 854 bytes, Stack size 40 bytes, hc32f46x_interrupts.o(i.IRQ129_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ129_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma1Btc3_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ130_Handler</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ130_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ130_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ131_Handler</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, hc32f46x_interrupts.o(i.IRQ131_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ131_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>IRQ132_Handler</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ132_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ132_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>IRQ136_Handler</STRONG> (Thumb, 590 bytes, Stack size 24 bytes, hc32f46x_interrupts.o(i.IRQ136_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ136_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>IRQ137_Handler</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, hc32f46x_interrupts.o(i.IRQ137_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ137_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>IRQ138_Handler</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ138_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ138_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>IRQ139_Handler</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ139_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ139_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>IRQ140_Handler</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ140_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ140_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>IRQ141_Handler</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ141_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ141_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>IRQ142_Handler</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, hc32f46x_interrupts.o(i.IRQ142_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ142_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>IRQ143_Handler</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ143_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ143_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[55d]"></a>PORT_DebugPortSetting</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_DebugPortSetting))
<BR><BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_gpio
</UL>

<P><STRONG><a name="[1a1]"></a>PORT_GetBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_GetBit))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>

<P><STRONG><a name="[1a0]"></a>PORT_GetBitMapp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, marlinui.o(i.PORT_GetBitMapp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_GetBitMapp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::report_states()
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update_buttons()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::update()
</UL>

<P><STRONG><a name="[232]"></a>PORT_Init</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, hc32f46x_gpio.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(unsigned char, WiringPinMode)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_SetPinMode(unsigned char, en_pin_mode)
</UL>

<P><STRONG><a name="[1a3]"></a>PORT_ResetBits</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tick()
</UL>

<P><STRONG><a name="[1a2]"></a>PORT_ResetBitsMapp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, marlincore.o(i.PORT_ResetBitsMapp))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_all_steppers()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_e_steppers()
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_SWSPI_SND_8BIT(unsigned char)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::send_byte(unsigned char)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::start()
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::stop()
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::nAck()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::init()
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::ack()
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loud_kill(const char*, heater_id_t)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>

<P><STRONG><a name="[1a5]"></a>PORT_SetBits</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tick()
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[1a4]"></a>PORT_SetBitsMapp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, marlincore.o(i.PORT_SetBitsMapp))
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all_steppers()
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_e_steppers()
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_SWSPI_SND_8BIT(unsigned char)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::send_byte(unsigned char)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::start()
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::stop()
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::nAck()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::init()
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::ack()
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loud_kill(const char*, heater_id_t)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>

<P><STRONG><a name="[19e]"></a>PORT_SetFunc</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, hc32f46x_gpio.o(i.PORT_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PORT_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_UartInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFuncMapp
</UL>

<P><STRONG><a name="[1a6]"></a>PORT_SetFuncMapp</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hardwareserial.o(i.PORT_SetFuncMapp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PORT_SetFuncMapp &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, unsigned char)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::Sdioc_Class(M4_SDIOC_TypeDef*)
</UL>

<P><STRONG><a name="[48d]"></a>PWC_Fcg0PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hc32f46x_pwc.o(i.PWC_Fcg0PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWC_Fcg0PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_TriggerConfig(adc_dev*, unsigned)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
</UL>

<P><STRONG><a name="[4ae]"></a>PWC_Fcg1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_utility_c]::SetUartBaudrate(unsigned)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitHost(const stc_sd_handle*)
</UL>

<P><STRONG><a name="[55f]"></a>PWC_Fcg2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
</UL>

<P><STRONG><a name="[488]"></a>PWC_Fcg3PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_initconfig(adc_dev*)
</UL>

<P><STRONG><a name="[14]"></a>PendSV_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[553]"></a>RMU_ClrResetFlag</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, hc32f46x_rmu.o(i.RMU_ClrResetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[230]"></a>RMU_GetResetCause</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, hc32f46x_rmu.o(i.RMU_GetResetCause))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RMU_GetResetCause
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResetCause()
</UL>

<P><STRONG><a name="[4ad]"></a>SDCARD_GetCardCSD</STRONG> (Thumb, 228 bytes, Stack size 20 bytes, sd_card.o(i.SDCARD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDCARD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1af]"></a>SDCARD_GetDeviceMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sd_card.o(i.SDCARD_GetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>

<P><STRONG><a name="[1a7]"></a>SDCARD_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sd_card.o(i.SDCARD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SDCARD_Init &rArr; [local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*) &rArr; SDMMC_Cmd6_SwitchFunc &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitHost(const stc_sd_handle*)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::init()
</UL>

<P><STRONG><a name="[1ae]"></a>SDCARD_ReadBlocks</STRONG> (Thumb, 462 bytes, Stack size 64 bytes, sd_card.o(i.SDCARD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SDCARD_ReadBlocks &rArr; [local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short) &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ReadBuffer
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetNormalIrqFlag
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ConfigData
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearNormalIrqFlag
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd18_ReadMultipleBlock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd17_ReadSingleBlock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_GetDeviceMode
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::read(unsigned, unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[1b9]"></a>SDCARD_WriteBlocks</STRONG> (Thumb, 486 bytes, Stack size 64 bytes, sd_card.o(i.SDCARD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_WriteBuffer
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetNormalIrqFlag
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ConfigData
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearNormalIrqFlag
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd25_WriteMultipleBlock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd24_WriteSingleBlock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_GetDeviceMode
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::write(unsigned, unsigned short, const unsigned char*)
</UL>

<P><STRONG><a name="[1b8]"></a>SDIOC_ClearNormalIrqFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_ClearNormalIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1b1]"></a>SDIOC_ConfigData</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, hc32f46x_sdioc.o(i.SDIOC_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1b6]"></a>SDIOC_GetNormalIrqFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_GetNormalIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[4b3]"></a>SDIOC_GetResponse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[1b5]"></a>SDIOC_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1bf]"></a>SDIOC_Init</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, hc32f46x_sdioc.o(i.SDIOC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDIOC_Init &rArr; [local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_sdioc_c]::SdiocGetClkDiv(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitHost(const stc_sd_handle*)
</UL>

<P><STRONG><a name="[160]"></a>SDIOC_IrqHandler</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, hc32f46x_sdioc.o(i.SDIOC_IrqHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIOC_IrqHandler &rArr; [local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)
</UL>

<P><STRONG><a name="[1b7]"></a>SDIOC_ReadBuffer</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, hc32f46x_sdioc.o(i.SDIOC_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIOC_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1c9]"></a>SDIOC_SendCommand</STRONG> (Thumb, 232 bytes, Stack size 12 bytes, hc32f46x_sdioc.o(i.SDIOC_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIOC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd9_SendCSD
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd8_SendIfCond
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd7_SelectDeselectCard
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd6_SwitchFunc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd3_SendRelativeAddr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd2_AllSendCID
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd25_WriteMultipleBlock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd24_WriteSingleBlock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd18_ReadMultipleBlock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd17_ReadSingleBlock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd13_SendStatus
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd0_GoIdleState
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd6_SetBusWidth
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd41_SdSendOpCond
</UL>

<P><STRONG><a name="[4b0]"></a>SDIOC_SetBusWidth</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_SetBusWidth))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1c2]"></a>SDIOC_SetClk</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hc32f46x_sdioc.o(i.SDIOC_SetClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_SetClk &rArr; [local to hc32f46x_sdioc_c]::SdiocGetClkDiv(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_sdioc_c]::SdiocGetClkDiv(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[4af]"></a>SDIOC_SetSpeedMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_SetSpeedMode))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1bd]"></a>SDIOC_WriteBuffer</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, hc32f46x_sdioc.o(i.SDIOC_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIOC_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[1c3]"></a>SDIO_ReadBlock_DMA</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sdio_f1.o(i.SDIO_ReadBlock_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = SDIO_ReadBlock_DMA &rArr; Sdioc_Class::read(unsigned, unsigned short, unsigned char*) &rArr; SDCARD_ReadBlocks &rArr; [local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short) &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::read(unsigned, unsigned short, unsigned char*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock(unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[1c5]"></a>SDIO_WriteBlockDMA</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sdio_f1.o(i.SDIO_WriteBlockDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SDIO_WriteBlockDMA &rArr; Sdioc_Class::write(unsigned, unsigned short, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::write(unsigned, unsigned short, const unsigned char*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[1c7]"></a>SDMMC_Acmd41_SdSendOpCond</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Acmd41_SdSendOpCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_Acmd41_SdSendOpCond &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1cb]"></a>SDMMC_Acmd6_SetBusWidth</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Acmd6_SetBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Acmd6_SetBusWidth &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1cd]"></a>SDMMC_Cmd0_GoIdleState</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sdmmc_cmd.o(i.SDMMC_Cmd0_GoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_Cmd0_GoIdleState &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1cf]"></a>SDMMC_Cmd13_SendStatus</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd13_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned)
</UL>

<P><STRONG><a name="[1b0]"></a>SDMMC_Cmd16_SetBlockLength</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd16_SetBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd16_SetBlockLength &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1b3]"></a>SDMMC_Cmd17_ReadSingleBlock</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd17_ReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd17_ReadSingleBlock &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>

<P><STRONG><a name="[1b4]"></a>SDMMC_Cmd18_ReadMultipleBlock</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd18_ReadMultipleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd18_ReadMultipleBlock &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>

<P><STRONG><a name="[1bb]"></a>SDMMC_Cmd24_WriteSingleBlock</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd24_WriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd24_WriteSingleBlock &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[1bc]"></a>SDMMC_Cmd25_WriteMultipleBlock</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd25_WriteMultipleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd25_WriteMultipleBlock &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[1d0]"></a>SDMMC_Cmd2_AllSendCID</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd2_AllSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_Cmd2_AllSendCID &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1d2]"></a>SDMMC_Cmd3_SendRelativeAddr</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd3_SendRelativeAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd3_SendRelativeAddr &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1d4]"></a>SDMMC_Cmd55_AppCmd</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd55_AppCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd55_AppCmd &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1d5]"></a>SDMMC_Cmd6_SwitchFunc</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd6_SwitchFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd6_SwitchFunc &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1d6]"></a>SDMMC_Cmd7_SelectDeselectCard</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd7_SelectDeselectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd7_SelectDeselectCard &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1d7]"></a>SDMMC_Cmd8_SendIfCond</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd8_SendIfCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_Cmd8_SendIfCond &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1d9]"></a>SDMMC_Cmd9_SendCSD</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd9_SendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_Cmd9_SendCSD &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>SysTickIrq_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_tim0.o(i.SysTickIrq_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[15]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIrq_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[198]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, system_hc32f460petb.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a7]"></a>SystemInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_hc32f460petb.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(.text)
</UL>
<P><STRONG><a name="[1da]"></a>TIMER0_BaseInit</STRONG> (Thumb, 1480 bytes, Stack size 32 bytes, hc32f46x_timer0.o(i.TIMER0_BaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER0_BaseInit &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
</UL>

<P><STRONG><a name="[1dc]"></a>TIMER0_ClearFlag</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER0_ClearFlag &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempTC_Handler()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepTC_Handler()
</UL>

<P><STRONG><a name="[1dd]"></a>TIMER0_Cmd</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable_irq
</UL>

<P><STRONG><a name="[563]"></a>TIMER0_GetCntReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_timer0.o(i.TIMER0_GetCntReg))
<BR><BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_count
</UL>

<P><STRONG><a name="[1de]"></a>TIMER0_IntCmd</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_IntCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER0_IntCmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
</UL>

<P><STRONG><a name="[1df]"></a>TIMER0_WriteCmpReg</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_WriteCmpReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER0_WriteCmpReg &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_preset_compare
</UL>

<P><STRONG><a name="[2c9]"></a>USART_ClearStatus</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_ClearStatus))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4ErrIrqCallback()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3ErrIrqCallback()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2ErrIrqCallback()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1ErrIrqCallback()
</UL>

<P><STRONG><a name="[2a4]"></a>USART_FuncCmd</STRONG> (Thumb, 490 bytes, Stack size 12 bytes, hc32f46x_usart.o(i.USART_FuncCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_tx
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4TxCmpltIrqCallback()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3TxCmpltIrqCallback()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2TxCmpltIrqCallback()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1TxCmpltIrqCallback()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4TxIrqCallback()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3TxIrqCallback()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2TxIrqCallback()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1TxIrqCallback()
</UL>

<P><STRONG><a name="[2a3]"></a>USART_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4ErrIrqCallback()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3ErrIrqCallback()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2ErrIrqCallback()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1ErrIrqCallback()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4TxIrqCallback()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3TxIrqCallback()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2TxIrqCallback()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1TxIrqCallback()
</UL>

<P><STRONG><a name="[29d]"></a>USART_RecData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_RecData))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4RxIrqCallback()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3RxIrqCallback()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2RxIrqCallback()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1RxIrqCallback()
</UL>

<P><STRONG><a name="[2a2]"></a>USART_SendData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4TxIrqCallback()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3TxIrqCallback()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2TxIrqCallback()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1TxIrqCallback()
</UL>

<P><STRONG><a name="[1e0]"></a>USART_SetBaudrate</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hc32f46x_usart.o(i.USART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART_SetBaudrate &rArr; [local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetClkSyncBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetUartBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_set_baud_rate
</UL>

<P><STRONG><a name="[4cc]"></a>USART_UART_Init</STRONG> (Thumb, 612 bytes, Stack size 24 bytes, hc32f46x_usart.o(i.USART_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_utility_c]::SetUartBaudrate(unsigned)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[11]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[554]"></a>WDT_Init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, hc32f46x_wdt.o(i.WDT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[552]"></a>WDT_RefreshCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_wdt.o(i.WDT_RefreshCounter))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_feed
</UL>

<P><STRONG><a name="[22e]"></a>HAL_reboot()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal.o(i._Z10HAL_rebootv))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashFirmware(short)
</UL>

<P><STRONG><a name="[1e4]"></a>ftostr51rj(float)</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, numtostr.o(i._Z10ftostr51rjf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr51rj(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float51::strfunc(float)
</UL>

<P><STRONG><a name="[1e6]"></a>ftostr52sp(float)</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, numtostr.o(i._Z10ftostr52spf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr52sp(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[10d]"></a>lcd_move_x()</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, menu_motion.o(i._Z10lcd_move_xv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lcd_move_x() &rArr; [local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._ZZ9menu_movevENUlvE_4_FUNEv)
</UL>
<P><STRONG><a name="[10a]"></a>lcd_move_y()</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, menu_motion.o(i._Z10lcd_move_yv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lcd_move_y() &rArr; [local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._ZZ9menu_movevENUlvE1_4_FUNEv)
</UL>
<P><STRONG><a name="[10b]"></a>lcd_move_z()</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, menu_motion.o(i._Z10lcd_move_zv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lcd_move_z() &rArr; [local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._ZZ9menu_movevENUlvE3_4_FUNEv)
</UL>
<P><STRONG><a name="[20d]"></a>lcd_moveto(unsigned char, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcdprint_u8g.o(i._Z10lcd_movetohh))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to marlinui_DOGM_cpp]::mark_as_selected(unsigned char, bool)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_P(unsigned char, unsigned char, const char*)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned char, unsigned char, unsigned)
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str(unsigned char, unsigned char, const char*)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep(AxisEnum, const char*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool)::[lambda() (instance 1)]::operator ()() const
</UL>

<P><STRONG><a name="[f4]"></a>menu_media()</STRONG> (Thumb, 680 bytes, Stack size 40 bytes, menu_media.o(i._Z10menu_mediav))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = menu_media() &rArr; CardReader::cd(const char*) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdbase::draw(bool, unsigned char, const char*, CardReader&, bool)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::save_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByIndex(unsigned short)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::get_num_Files()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_sd_updir()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[1f3]"></a>openFailed(const char*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cardreader.o(i._Z10openFailedPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = openFailed(const char*) &rArr; serial_echopair_PGM(const char*, const char*) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openJobRecoveryFile(bool)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[1f6]"></a>report_M92(bool, signed char)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m92.o(i._Z10report_M92ba))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = report_M92(bool, signed char) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
</UL>

<P><STRONG><a name="[1fa]"></a>safe_delay(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, utility.o(i._Z10safe_delayj))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::show_custom_bootscreen()
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::resync()
</UL>

<P><STRONG><a name="[1fd]"></a>M206_report()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, m206_m428.o(i._Z11M206_reportv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = M206_report() &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
</UL>

<P><STRONG><a name="[1f8]"></a>SERIAL_CHAR(char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, marlincore.o(i._Z11SERIAL_CHARc))
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(float, float, float, const char*, const char*)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintln_onoff(bool)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::AutoReportTemp::report()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::ok_to_send()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, serial_index_t)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to endstops_cpp]::print_es_state(bool, const char*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to settings_cpp]::config_heading(bool, const char*, bool)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
</UL>

<P><STRONG><a name="[1fe]"></a>eeprom_init()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eeprom_if_iic.o(i._Z11eeprom_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = eeprom_init() &rArr; BL24CXX::init() &rArr; IIC::init() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::access_start()
</UL>

<P><STRONG><a name="[200]"></a>ftostr42_52(float)</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, numtostr.o(i._Z11ftostr42_52f))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ftostr42_52(float) &rArr; ftostr52(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr52(float)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float42_52::strfunc(float)
</UL>

<P><STRONG><a name="[202]"></a>ftostr53_63(float)</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, numtostr.o(i._Z11ftostr53_63f))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ftostr53_63(float) &rArr; ftostr63(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr63(float)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[480]"></a>i16tostr3rj(short)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, numtostr.o(i._Z11i16tostr3rjs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i16tostr3rj(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float3::strfunc(float)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_int3::strfunc(float)
</UL>

<P><STRONG><a name="[f2]"></a>menu_motion()</STRONG> (Thumb, 1446 bytes, Stack size 40 bytes, menu_motion.o(i._Z11menu_motionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = menu_motion() &rArr; MarlinUI::auto_Desizing() &rArr; MarlinUI::tempload() &rArr; GCodeQueue::enqueue_now_P(const char*) &rArr; GCodeQueue::enqueue_one_now(const char*) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printer_busy()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_gcode::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::auto_Desizing()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::auto_Feeding()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[208]"></a>tool_change(unsigned char, bool)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tool_change.o(i._Z11tool_changehb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tool_change(unsigned char, bool) &rArr; Print::print(unsigned char, int) &rArr; Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::T(signed char)
</UL>

<P><STRONG><a name="[20a]"></a>utf8_strlen(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fontutils.o(i._Z11utf8_strlenPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = utf8_strlen(const char*) &rArr; [local to fontutils_cpp]::utf8_strlen_cb(const char*, unsigned char(*)(unsigned char*))
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to fontutils_cpp]::utf8_strlen_cb(const char*, unsigned char(*)(unsigned char*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_message(bool)
</UL>

<P><STRONG><a name="[448]"></a>HAL_adc_init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._Z12HAL_adc_initv))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
</UL>

<P><STRONG><a name="[305]"></a>HAL_idletask()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._Z12HAL_idletaskv))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
</UL>

<P><STRONG><a name="[20c]"></a>_wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool)</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, marlinui.o(i._Z12_wrap_stringRhS_PKcPFhPhEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar_max(unsigned, unsigned short)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_moveto(unsigned char, unsigned char)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool)::[lambda() (instance 1)]::operator ()() const
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_string_P(unsigned char&, unsigned char&, const char*, bool)
</UL>

<P><STRONG><a name="[211]"></a>announceOpen(unsigned char, const char*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cardreader.o(i._Z12announceOpenhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = announceOpen(unsigned char, const char*) &rArr; serial_echopair_PGM(const char*, const char*) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
</UL>

<P><STRONG><a name="[212]"></a>ftostr41sign(float)</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, numtostr.o(i._Z12ftostr41signf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr41sign(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float41sign::strfunc(float)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
</UL>

<P><STRONG><a name="[213]"></a>ftostr43sign(float, char)</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, numtostr.o(i._Z12ftostr43signfc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr43sign(float, char) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float43::strfunc(float)
</UL>

<P><STRONG><a name="[214]"></a>ftostr52sign(float)</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, numtostr.o(i._Z12ftostr52signf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr52sign(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float52sign::strfunc(float)
</UL>

<P><STRONG><a name="[215]"></a>ftostr53sign(float)</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, numtostr.o(i._Z12ftostr53signf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr53sign(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep(AxisEnum, const char*)
</UL>

<P><STRONG><a name="[bc]"></a>lcd_cooldown()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, menu_temperature.o(i._Z12lcd_cooldownv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_cooldown() &rArr; Temperature::disable_all_heaters() &rArr; Temperature::start_watching_bed()
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_temperature.o(i._Z16menu_temperaturev)
</UL>
<P><STRONG><a name="[ad]"></a>lcd_sd_updir()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, menu_media.o(i._Z12lcd_sd_updirv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_sd_updir() &rArr; CardReader::cdup() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cdup()
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_media.o(i._Z10menu_mediav)
</UL>
<P><STRONG><a name="[429]"></a>lfn_checksum(const unsigned char*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sdbasefile.o(i._Z12lfn_checksumPKh))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
</UL>

<P><STRONG><a name="[4bd]"></a>pf_bsearch_r(void*, unsigned, int(*)(void*, unsigned, void*), void*, unsigned*)</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, fontutils.o(i._Z12pf_bsearch_rPvjPFiS_jS_ES_Pj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pf_bsearch_r(void*, unsigned, int(*)(void*, unsigned, void*), void*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_find(_font_group_t*, unsigned)
</UL>

<P><STRONG><a name="[207]"></a>printer_busy()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, menu.o(i._Z12printer_busyv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = printer_busy()
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsActive()
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_motion()
</UL>

<P><STRONG><a name="[21b]"></a>u8g_GetGlyph(_u8g_t*, unsigned char)</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, u8g_font.o(i._Z12u8g_GetGlyphP6_u8g_th))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = u8g_GetGlyph(_u8g_t*, unsigned char) &rArr; [local to u8g_font_c]::u8g_CopyGlyphDataToCache(_u8g_t*, void*) &rArr; [local to u8g_font_c]::u8g_font_GetFormat(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontStartEncoding
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontEndEncoding
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding97Pos(const void*)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding65Pos(const void*)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_GetFontGlyphStructureSize(const unsigned char*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_CopyGlyphDataToCache(_u8g_t*, void*)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_FillEmptyGlyphCache(_u8g_t*)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_GetFormat(const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_calc_str_pixel_width(_u8g_t*, const char*, char(*)(const void*))
</UL>

<P><STRONG><a name="[31d]"></a>ui16tostr5rj(unsigned short)</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, numtostr.o(i._Z12ui16tostr5rjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui16tostr5rj(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr5rj(float)
</UL>

<P><STRONG><a name="[224]"></a>_lcd_autotune(heater_id_t)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, menu_advanced.o(i._Z13_lcd_autotune11heater_id_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _lcd_autotune(heater_id_t) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()::[lambda() (instance 11)]::_FUN()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()::[lambda() (instance 5)]::_FUN()
</UL>

<P><STRONG><a name="[227]"></a>_lcd_babystep(AxisEnum, const char*)</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, menu_tune.o(i._Z13_lcd_babystep8AxisEnumPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _lcd_babystep(AxisEnum, const char*) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max_P(const char*, unsigned short)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar_max(unsigned, unsigned short)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max(const char*, unsigned short)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_moveto(unsigned char, unsigned char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_steps(AxisEnum, short)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_font(MarlinFont)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr53sign(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep_z()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep_y()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep_x()
</UL>

<P><STRONG><a name="[22d]"></a>flashFirmware(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal.o(i._Z13flashFirmwares))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_reboot()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M997()
</UL>

<P><STRONG><a name="[22f]"></a>getResetCause()</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, startup.o(i._Z13getResetCausev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getResetCause() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_GetResetCause
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[231]"></a>gpio_set_mode(unsigned char, WiringPinMode)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, wirish_digital.o(i._Z13gpio_set_modeh13WiringPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init()
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::init()
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::CardReader()
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::send_byte(unsigned char)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::start()
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::stop()
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::nAck()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::init()
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::ack()
</UL>

<P><STRONG><a name="[233]"></a>lcd_put_u8str(unsigned char, unsigned char, const char*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, status_screen_dogm.o(i._Z13lcd_put_u8strhhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lcd_put_u8str(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max(const char*, unsigned short) &rArr; uxg_DrawUtf8Str(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max(const char*, unsigned short)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_moveto(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[234]"></a>lcd_put_wchar(unsigned char, unsigned char, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, marlinui_dogm.o(i._Z13lcd_put_wcharhhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lcd_put_wchar(unsigned char, unsigned char, unsigned) &rArr; lcd_put_wchar(unsigned) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_moveto(unsigned char, unsigned char)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[235]"></a>lcd_put_wchar(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, marlinui_dogm.o(i._Z13lcd_put_wcharj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lcd_put_wchar(unsigned) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar_max(unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned char, unsigned char, unsigned)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdbase::draw(bool, unsigned char, const char*, CardReader&, bool)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_message(bool)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[c5]"></a>menu_language()</STRONG> (Thumb, 802 bytes, Stack size 40 bytes, menu_language.o(i._Z13menu_languagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = menu_language() &rArr; menu_language()::[lambda() (instance 1)]::_FUN() &rArr; [local to menu_language_cpp]::set_lcd_language(unsigned char) &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 11)]::_FUN()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 9)]::_FUN()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 7)]::_FUN()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 5)]::_FUN()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 3)]::_FUN()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 17)]::_FUN()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 15)]::_FUN()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 13)]::_FUN()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(i._Z18menu_configurationv)
</UL>
<P><STRONG><a name="[b9]"></a>on_fan_update()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu_temperature.o(i._Z13on_fan_updatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = on_fan_update() &rArr; Temperature::set_fan_speed(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu_temperature.o(i._Z16menu_temperaturev)
<LI> menu_tune.o(i._Z9menu_tunev)
</UL>
<P><STRONG><a name="[25f]"></a>pcttostrpctrj(unsigned char)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, numtostr.o(i._Z13pcttostrpctrjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pcttostrpctrj(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui8tostr4pctrj(unsigned char)
</UL>

<P><STRONG><a name="[b2]"></a>read_byte_ram(unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fontutils.o(i._Z13read_byte_ramPh))
<BR>[Address Reference Count : 4]<UL><LI> u8g_fontutf8.o(i._Z15uxg_DrawUtf8StrP6_u8g_tjjPKct)
<LI> u8g_fontutf8.o(i._Z24uxg_GetUtf8StrPixelWidthP6_u8g_tPKc)
<LI> fontutils.o(i._Z11utf8_strlenPKc)
<LI> marlinui.o(i._ZN8MarlinUI25draw_select_screen_promptEPKcS1_S1_)
</UL>
<P><STRONG><a name="[b3]"></a>read_byte_rom(unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fontutils.o(i._Z13read_byte_romPh))
<BR>[Address Reference Count : 5]<UL><LI> u8g_fontutf8.o(i._Z25uxg_GetUtf8StrPixelWidthPP6_u8g_tPKc)
<LI> u8g_fontutf8.o(i._Z16uxg_DrawUtf8StrPP6_u8g_tjjPKct)
<LI> fontutils.o(i._Z13utf8_strlen_PPKc)
<LI> lcdprint.o(i._Z19lcd_put_u8str_ind_PPKcaS0_h)
<LI> marlinui.o(i._Z13wrap_string_PRhS_PKcb)
</UL>
<P><STRONG><a name="[1e9]"></a>scroll_screen(unsigned char, bool)</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, menu.o(i._Z13scroll_screenhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = scroll_screen(unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_job_recovery()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_thermistors()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_printer()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_board()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_filament()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_motion()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
</UL>

<P><STRONG><a name="[240]"></a>u8g_GetModeLL(_u8g_t*, _u8g_dev_t*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_ll_api.o(i._Z13u8g_GetModeLLP6_u8g_tP10_u8g_dev_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_GetModeLL(_u8g_t*, _u8g_dev_t*) &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
</UL>

<P><STRONG><a name="[242]"></a>utf8_strlen_P(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fontutils.o(i._Z13utf8_strlen_PPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = utf8_strlen_P(const char*) &rArr; [local to fontutils_cpp]::utf8_strlen_cb(const char*, unsigned char(*)(unsigned char*))
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to fontutils_cpp]::utf8_strlen_cb(const char*, unsigned char(*)(unsigned char*))
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_boxed_string(unsigned char, unsigned char, const char*, bool)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*)
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
</UL>

<P><STRONG><a name="[243]"></a>uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, u8g_fontutf8.o(i._Z13uxg_DrawWcharP6_u8g_tjjjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStrP
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_drawwchar(_font_group_t*, const void*, unsigned, void*, int(*)(void*, const void*, const char*))
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar_max(unsigned, unsigned short)
</UL>

<P><STRONG><a name="[247]"></a>watchdog_init()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, watchdog.o(i._Z13watchdog_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = watchdog_init() &rArr; iwdg_init &rArr; Ddl_Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[249]"></a>wrap_string_P(unsigned char&, unsigned char&, const char*, bool)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, marlinui.o(i._Z13wrap_string_PRhS_PKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wrap_string_P(unsigned char&, unsigned char&, const char*, bool) &rArr; _wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[24a]"></a>SDIO_ReadBlock(unsigned, unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sdio.o(i._Z14SDIO_ReadBlockjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = SDIO_ReadBlock(unsigned, unsigned char*) &rArr; SDIO_ReadBlock_DMA &rArr; Sdioc_Class::read(unsigned, unsigned short, unsigned char*) &rArr; SDCARD_ReadBlocks &rArr; [local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short) &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiskIODriver_SDIO::readBlock(unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[33f]"></a>createFilename(char*, const directoryEntry&)</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, cardreader.o(i._Z14createFilenamePcRK14directoryEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = createFilename(char*, const directoryEntry&)
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByIndex(SdFile, unsigned char)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[24b]"></a>do_homing_move(AxisEnum, float, float, bool)</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, motion.o(i._Z14do_homing_move8AxisEnumffb))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = do_homing_move(AxisEnum, float, float, bool) &rArr; Endstops::validate_homing_move() &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::validate_homing_move()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(float, float, float, float)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_axis_position_mm(AxisEnum)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(float, float, float, float, float, unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
</UL>

<P><STRONG><a name="[251]"></a>do_z_clearance(float, bool)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, motion.o(i._Z14do_z_clearancefb))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = do_z_clearance(float, bool) &rArr; do_blocking_move_to_z(float, float) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, float, float) &rArr; do_blocking_move_to(float, float, float, float) &rArr; line_to_current_position(float) &rArr; Planner::buffer_line(float, float, float, float, float, unsigned char, float) &rArr; Planner::buffer_segment(float, float, float, float, float, unsigned char, float) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float) &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_z(float, float)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to motion_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[ff]"></a>lcd_babystep_z()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_tune.o(i._Z14lcd_babystep_zv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_babystep_z() &rArr; _lcd_babystep_go(void(*)()) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep_go(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tune.o(i._Z9menu_tunev)
</UL>
<P><STRONG><a name="[bb]"></a>menu_preheat_m()</STRONG> (Thumb, 662 bytes, Stack size 48 bytes, menu_temperature.o(i._Z14menu_preheat_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = menu_preheat_m() &rArr; MenuItem_button::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::get_preheat_label(unsigned char)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_preheat_end_m()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()::[lambda() (instance 3)]::_FUN()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_temperature.o(i._Z16menu_temperaturev)
</UL>
<P><STRONG><a name="[258]"></a>serial_ternary(bool, const char*, const char*, const char*, const char*)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, serial.o(i._Z14serial_ternarybPKcS0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serial_ternary(bool, const char*, const char*, const char*, const char*) &rArr; serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[1f5]"></a>serialprintPGM(const char*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, serial.o(i._Z14serialprintPGMPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(float, float, float, const char*, const char*)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, long)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned char)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_onoff(bool)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::host_keepalive()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_ternary(bool, const char*, const char*, const char*, const char*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M504()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend(serial_index_t)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::report_states()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M118()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M115()
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M115_cpp]::cap_line(const char*, bool)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M145()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M20()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M105()
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::unknown_command_warning()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::ok_to_send()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one(const char*)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::abort_load()
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to endstops_cpp]::print_es_state(bool, const char*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to settings_cpp]::config_heading(bool, const char*, bool)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_homing_bump_feedrate(AxisEnum)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::EEPROM_START(int)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(short, unsigned char)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
</UL>

<P><STRONG><a name="[119]"></a>stepTC_Handler()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board_tim0.o(i._Z14stepTC_Handlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = stepTC_Handler() &rArr; HAL_STEP_TIMER_ISR() &rArr; Stepper::isr() &rArr; Stepper::block_phase_isr() &rArr; Endstops::update() &rArr; Planner::endstop_triggered(AxisEnum) &rArr; Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ClearFlag
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_STEP_TIMER_ISR()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_tim0.o(i.setup_time2B)
</UL>
<P><STRONG><a name="[118]"></a>tempTC_Handler()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board_tim0.o(i._Z14tempTC_Handlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tempTC_Handler() &rArr; HAL_TEMP_TIMER_ISR() &rArr; Temperature::isr() &rArr; Temperature::readings_ready() &rArr; Temperature::min_temp_error(heater_id_t) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ClearFlag
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TEMP_TIMER_ISR()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_tim0.o(i.setup_time2A)
</UL>
<P><STRONG><a name="[25b]"></a>u8g_draw_hline(_u8g_t*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, u8g_rect.o(i._Z14u8g_draw_hlineP6_u8g_thhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = u8g_draw_hline(_u8g_t*, unsigned char, unsigned char, unsigned char) &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHLine
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawFrame
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_box
</UL>

<P><STRONG><a name="[25d]"></a>u8g_draw_vline(_u8g_t*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, u8g_rect.o(i._Z14u8g_draw_vlineP6_u8g_thhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = u8g_draw_vline(_u8g_t*, unsigned char, unsigned char, unsigned char) &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawFrame
</UL>

<P><STRONG><a name="[25e]"></a>ui8tostr4pctrj(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, numtostr.o(i._Z14ui8tostr4pctrjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui8tostr4pctrj(unsigned char) &rArr; pcttostrpctrj(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcttostrpctrj(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_percent::strfunc(float)
</UL>

<P><STRONG><a name="[260]"></a>HAL_timer_start(unsigned char, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timers.o(i._Z15HAL_timer_starthj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_timer_start(unsigned char, unsigned) &rArr; setup_time2B &rArr; TIMER0_BaseInit &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
</UL>

<P><STRONG><a name="[263]"></a>SDIO_WriteBlock(unsigned, const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdio.o(i._Z15SDIO_WriteBlockjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; Sdioc_Class::write(unsigned, unsigned short, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlockDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiskIODriver_SDIO::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[10e]"></a>_lcd_babystep_x()</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, menu_tune.o(i._Z15_lcd_babystep_xv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _lcd_babystep_x() &rArr; _lcd_babystep(AxisEnum, const char*) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep(AxisEnum, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tune.o(i._ZZ9menu_tunevENUlvE3_4_FUNEv)
</UL>
<P><STRONG><a name="[10f]"></a>_lcd_babystep_y()</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, menu_tune.o(i._Z15_lcd_babystep_yv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _lcd_babystep_y() &rArr; _lcd_babystep(AxisEnum, const char*) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep(AxisEnum, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tune.o(i._ZZ9menu_tunevENUlvE5_4_FUNEv)
</UL>
<P><STRONG><a name="[b5]"></a>_lcd_babystep_z()</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, menu_tune.o(i._Z15_lcd_babystep_zv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _lcd_babystep_z() &rArr; _lcd_babystep(AxisEnum, const char*) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep(AxisEnum, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tune.o(i._Z14lcd_babystep_zv)
</UL>
<P><STRONG><a name="[525]"></a>i16tostr4signrj(short)</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, numtostr.o(i._Z15i16tostr4signrjs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i16tostr4signrj(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[264]"></a>lcd_put_u8str_P(unsigned char, unsigned char, const char*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, marlinui_dogm.o(i._Z15lcd_put_u8str_PhhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max_P(const char*, unsigned short)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_moveto(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_boxed_string(unsigned char, unsigned char, const char*, bool)
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
</UL>

<P><STRONG><a name="[ea]"></a>menu_info_board()</STRONG> (Thumb, 616 bytes, Stack size 112 bytes, menu_info.o(i._Z15menu_info_boardv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = menu_info_board() &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_info.o(i._Z9menu_infov)
</UL>
<P><STRONG><a name="[266]"></a>set_home_offset(AxisEnum, float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motion.o(i._Z15set_home_offset8AxisEnumf))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_workspace_offset(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
</UL>

<P><STRONG><a name="[268]"></a>uxg_DrawUtf8Str(_u8g_t*, unsigned, unsigned, const char*, unsigned short)</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, u8g_fontutf8.o(i._Z15uxg_DrawUtf8StrP6_u8g_tjjPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = uxg_DrawUtf8Str(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStrP
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_drawstring(_font_group_t*, const void*, const char*, unsigned char(*)(unsigned char*), void*, int(*)(void*, const void*, const char*))
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max(const char*, unsigned short)
</UL>

<P><STRONG><a name="[254]"></a>_lcd_babystep_go(void(*)())</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menu_tune.o(i._Z16_lcd_babystep_goPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lcd_babystep_go(void(*)()) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()::[lambda() (instance 7)]::_FUN()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()::[lambda() (instance 5)]::_FUN()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_babystep_z()
</UL>

<P><STRONG><a name="[2af]"></a>axes_should_home(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, motion.o(i._Z16axes_should_homeh))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_steps(AxisEnum, short)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[b6]"></a>do_preheat_end_m()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_temperature.o(i._Z16do_preheat_end_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = do_preheat_end_m() &rArr; Temperature::lcd_preheat(unsigned char, signed char, signed char) &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_temperature.o(i._Z14menu_preheat_mv)
</UL>
<P><STRONG><a name="[26b]"></a>eeprom_read_byte(unsigned char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eeprom_if_iic.o(i._Z16eeprom_read_bytePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = eeprom_read_byte(unsigned char*) &rArr; BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::readOneByte(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>

<P><STRONG><a name="[f3]"></a>menu_temperature()</STRONG> (Thumb, 1378 bytes, Stack size 80 bytes, menu_temperature.o(i._Z16menu_temperaturev))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = menu_temperature() &rArr; TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::scale(float)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::get_preheat_label(unsigned char)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::hotend_max_target(unsigned char)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::save_previous_screen()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cooldown()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_temperature_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_temperature_cpp]::_MAX&lang;float, int&rang;(T1, T2)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[21a]"></a>printingIsActive()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, marlincore.o(i._Z16printingIsActivev))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printer_busy()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::media_changed(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[277]"></a>printingIsPaused()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, marlincore.o(i._Z16printingIsPausedv))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
</UL>

<P><STRONG><a name="[276]"></a>startOrResumeJob()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, marlincore.o(i._Z16startOrResumeJobv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = startOrResumeJob() &rArr; Stopwatch::start() &rArr; Stopwatch::duration()
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsPaused()
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M75()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
</UL>

<P><STRONG><a name="[572]"></a>u8g_pb16h1_Clear(_u8g_pb_t*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, u8g_pb16h1.o(i._Z16u8g_pb16h1_ClearP9_u8g_pb_t))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16h1_base_fn
</UL>

<P><STRONG><a name="[279]"></a>uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short)</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, u8g_fontutf8.o(i._Z16uxg_DrawUtf8StrPP6_u8g_tjjPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStrP
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_drawstring(_font_group_t*, const void*, const char*, unsigned char(*)(unsigned char*), void*, int(*)(void*, const void*, const char*))
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max_P(const char*, unsigned short)
</UL>

<P><STRONG><a name="[4c2]"></a>uxg_SetUtf8Fonts(const _uxg_fontinfo_t*, int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, u8g_fontutf8.o(i._Z16uxg_SetUtf8FontsPK15_uxg_fontinfo_ti))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_lcd()
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
</UL>

<P><STRONG><a name="[27a]"></a>_goto_manual_move(float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, menu_motion.o(i._Z17_goto_manual_movef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _goto_manual_move(float) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 1)]::_FUN()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 11)]::_FUN()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 9)]::_FUN()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 7)]::_FUN()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 5)]::_FUN()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 3)]::_FUN()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 13)]::_FUN()
</UL>

<P><STRONG><a name="[27b]"></a>delayMicroseconds(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wirish_time.o(i._Z17delayMicrosecondsj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delayMicroseconds(unsigned) &rArr; Ddl_Delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Delay
</UL>

<P><STRONG><a name="[27d]"></a>draw_boxed_string(unsigned char, unsigned char, const char*, bool)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, marlinui_dogm.o(i._Z17draw_boxed_stringhhPKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = draw_boxed_string(unsigned char, unsigned char, const char*, bool) &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_P(unsigned char, unsigned char, const char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetColorIndex
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBox
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_strlen_P(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[280]"></a>eeprom_write_byte(unsigned char*, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eeprom_if_iic.o(i._Z17eeprom_write_bytePhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = eeprom_write_byte(unsigned char*, unsigned char) &rArr; BL24CXX::writeOneByte(unsigned short, unsigned char) &rArr; IIC::send_byte(unsigned char) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::writeOneByte(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>

<P><STRONG><a name="[282]"></a>enable_e_steppers()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, marlincore.o(i._Z17enable_e_steppersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enable_e_steppers()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
</UL>

<P><STRONG><a name="[20e]"></a>get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, fontutils.o(i._Z17get_utf8_value_cbPhPFhS_EPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to fontutils_cpp]::utf8_is_start_byte_of_char(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_drawstring(_font_group_t*, const void*, const char*, unsigned char(*)(unsigned char*), void*, int(*)(void*, const void*, const char*))
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool)
</UL>

<P><STRONG><a name="[22c]"></a>lcd_put_u8str_max(const char*, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcdprint_u8g.o(i._Z17lcd_put_u8str_maxPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lcd_put_u8str_max(const char*, unsigned short) &rArr; uxg_DrawUtf8Str(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_DrawUtf8Str(_u8g_t*, unsigned, unsigned, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdbase::draw(bool, unsigned char, const char*, CardReader&, bool)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str(unsigned char, unsigned char, const char*)
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_message(bool)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep(AxisEnum, const char*)
</UL>

<P><STRONG><a name="[210]"></a>lcd_put_wchar_max(unsigned, unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcdprint_u8g.o(i._Z17lcd_put_wchar_maxjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetFontBBXWidth
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep(AxisEnum, const char*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool)
</UL>

<P><STRONG><a name="[286]"></a>manage_inactivity(bool)</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, marlincore.o(i._Z17manage_inactivityb))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::check_axes_activity()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_available_commands()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>

<P><STRONG><a name="[e9]"></a>menu_info_printer()</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, menu_info.o(i._Z17menu_info_printerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = menu_info_printer() &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_info.o(i._Z9menu_infov)
</UL>
<P><STRONG><a name="[100]"></a>menu_job_recovery()</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, menu_job_recovery.o(i._Z17menu_job_recoveryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = menu_job_recovery() &rArr; lcd_power_loss_recovery_cancel() &rArr; CardReader::autofile_begin() &rArr; CardReader::autofile_check() &rArr; CardReader::fileExists(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_loss_recovery_cancel()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_job_recovery_cpp]::lcd_power_loss_recovery_resume()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m1000.o(i._ZN10GcodeSuite5M1000Ev)
</UL>
<P><STRONG><a name="[28c]"></a>process_line_done(unsigned char&, char(&)[96], int&)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(i._Z17process_line_doneRhRA96_cRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[28d]"></a>quickstop_stepper()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motion.o(i._Z17quickstop_stepperv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = quickstop_stepper() &rArr; sync_plan_position() &rArr; Planner::set_position_mm(float, float, float, float) &rArr; Planner::set_machine_position_mm(float, float, float, float) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::quick_stop()
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_from_steppers_for_axis(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M410()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::abort_load()
</UL>

<P><STRONG><a name="[1f7]"></a>serial_echo_start()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(i._Z17serial_echo_startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_echo_start() &rArr; serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::host_keepalive()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M304()
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M504()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M118()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M113()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M20()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::unknown_command_warning()
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one(const char*)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to settings_cpp]::config_heading(bool, const char*, bool)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_homing_bump_feedrate(AxisEnum)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::EEPROM_START(int)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
</UL>

<P><STRONG><a name="[291]"></a>serialprint_onoff(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial.o(i._Z17serialprint_onoffb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serialprint_onoff(bool) &rArr; serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintln_onoff(bool)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
</UL>

<P><STRONG><a name="[11a]"></a>u8g_font_get_char(const void*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_font.o(i._Z17u8g_font_get_charPKv))
<BR>[Address Reference Count : 1]<UL><LI> u8g_font.o(i.u8g_GetStrPixelWidth)
</UL>
<P><STRONG><a name="[259]"></a>HAL_STEP_TIMER_ISR()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stepper.o(i._Z18HAL_STEP_TIMER_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_STEP_TIMER_ISR() &rArr; Stepper::isr() &rArr; Stepper::block_phase_isr() &rArr; Endstops::update() &rArr; Planner::endstop_triggered(AxisEnum) &rArr; Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepTC_Handler()
</UL>

<P><STRONG><a name="[25a]"></a>HAL_TEMP_TIMER_ISR()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, temperature.o(i._Z18HAL_TEMP_TIMER_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = HAL_TEMP_TIMER_ISR() &rArr; Temperature::isr() &rArr; Temperature::readings_ready() &rArr; Temperature::min_temp_error(heater_id_t) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempTC_Handler()
</UL>

<P><STRONG><a name="[294]"></a>disable_e_steppers()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, marlincore.o(i._Z18disable_e_steppersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disable_e_steppers()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
</UL>

<P><STRONG><a name="[d1]"></a>menu_advanced_jerk()</STRONG> (Thumb, 952 bytes, Stack size 96 bytes, menu_advanced.o(i._Z18menu_advanced_jerkv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = menu_advanced_jerk() &rArr; TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[f5]"></a>menu_configuration()</STRONG> (Thumb, 1424 bytes, Stack size 48 bytes, menu_configuration.o(i._Z18menu_configurationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = menu_configuration() &rArr; MarlinUI::load_settings() &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::changed()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_bool::draw(bool, unsigned char, const char*, bool*, ...)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::get_preheat_label(unsigned char)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::store_settings()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_settings()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::load_settings()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printer_busy()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[289]"></a>serial_error_start()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(i._Z18serial_error_startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_error_start() &rArr; serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M145()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, serial_index_t)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(short, unsigned char)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>

<P><STRONG><a name="[290]"></a>sync_plan_position()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, motion.o(i._Z18sync_plan_positionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sync_plan_position() &rArr; Planner::set_position_mm(float, float, float, float) &rArr; Planner::set_machine_position_mm(float, float, float, float) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_position_mm(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
</UL>

<P><STRONG><a name="[11f]"></a>Usart1RxIrqCallback()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usart.o(i._Z19Usart1RxIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Usart1RxIrqCallback()
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_insert(ring_buffer*, unsigned char)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_full(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[127]"></a>Usart1TxIrqCallback()</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usart.o(i._Z19Usart1TxIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Usart1TxIrqCallback() &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_empty(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[11e]"></a>Usart2RxIrqCallback()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usart.o(i._Z19Usart2RxIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Usart2RxIrqCallback()
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_insert(ring_buffer*, unsigned char)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_full(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[126]"></a>Usart2TxIrqCallback()</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usart.o(i._Z19Usart2TxIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Usart2TxIrqCallback() &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_empty(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[11d]"></a>Usart3RxIrqCallback()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usart.o(i._Z19Usart3RxIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Usart3RxIrqCallback()
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_insert(ring_buffer*, unsigned char)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_full(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[125]"></a>Usart3TxIrqCallback()</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usart.o(i._Z19Usart3TxIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Usart3TxIrqCallback() &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_empty(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[11c]"></a>Usart4RxIrqCallback()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usart.o(i._Z19Usart4RxIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Usart4RxIrqCallback()
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_insert(ring_buffer*, unsigned char)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_full(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[124]"></a>Usart4TxIrqCallback()</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usart.o(i._Z19Usart4TxIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Usart4TxIrqCallback() &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_empty(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[2a5]"></a>_menu_move_distance(AxisEnum, void(*)(), signed char)</STRONG> (Thumb, 1824 bytes, Stack size 64 bytes, menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _menu_move_distance(AxisEnum, void(*)(), signed char) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max(const char*, unsigned short)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_moveto(unsigned char, unsigned char)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::using_inch_units()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()::[lambda() (instance 5)]::_FUN()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()::[lambda() (instance 3)]::_FUN()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_goto_menu_move_distance_e()::[lambda() (instance 1)]::_FUN()
</UL>

<P><STRONG><a name="[2a9]"></a>apply_motion_limits(XYZval&lang;float&rang;&)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, motion.o(i._Z19apply_motion_limitsR6XYZvalIfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = apply_motion_limits(XYZval&lang;float&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to motion_cpp]::NOMORE&lang;float, float&rang;(T1&, T2)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to motion_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
</UL>

<P><STRONG><a name="[52f]"></a>copy_and_scalePID_d(short)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, menu_advanced.o(i._Z19copy_and_scalePID_ds))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()::[lambda() (instance 9)]::_FUN()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()::[lambda() (instance 3)]::_FUN()
</UL>

<P><STRONG><a name="[530]"></a>copy_and_scalePID_i(short)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, menu_advanced.o(i._Z19copy_and_scalePID_is))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()::[lambda() (instance 7)]::_FUN()
</UL>

<P><STRONG><a name="[2ab]"></a>do_blocking_move_to(float, float, float, float)</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, motion.o(i._Z19do_blocking_move_toffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = do_blocking_move_to(float, float, float, float) &rArr; line_to_current_position(float) &rArr; Planner::buffer_line(float, float, float, float, float, unsigned char, float) &rArr; Planner::buffer_segment(float, float, float, float, float, unsigned char, float) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float) &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_to_current_position(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy(float, float, float)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, float, float)
</UL>

<P><STRONG><a name="[2ad]"></a>enable_all_steppers()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, marlincore.o(i._Z19enable_all_steppersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enable_all_steppers()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
</UL>

<P><STRONG><a name="[2ae]"></a>homing_needed_error(unsigned char)</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, motion.o(i._Z19homing_needed_errorh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = homing_needed_error(unsigned char) &rArr; Print::println(const char*) &rArr; Print::println() &rArr; Print::print(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axes_should_home(unsigned char)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G27()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
</UL>

<P><STRONG><a name="[2b2]"></a>lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char)</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, lcdprint.o(i._Z19lcd_put_u8str_ind_PPKcaS0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max_P(const char*, unsigned short)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
</UL>

<P><STRONG><a name="[22b]"></a>lcd_put_u8str_max_P(const char*, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcdprint_u8g.o(i._Z19lcd_put_u8str_max_PPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_P(unsigned char, unsigned char, const char*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep(AxisEnum, const char*)
</UL>

<P><STRONG><a name="[36b]"></a>process_stream_char(char, unsigned char&, char(&)[96], int&)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, queue.o(i._Z19process_stream_charcRhRA96_cRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = process_stream_char(char, unsigned char&, char(&)[96], int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[1f4]"></a>serial_echopair_PGM(const char*, const char*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, serial.o(i._Z19serial_echopair_PGMPKcS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serial_echopair_PGM(const char*, const char*) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::unknown_command_warning()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one(const char*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
</UL>

<P><STRONG><a name="[1f9]"></a>serial_echopair_PGM(const char*, float)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, serial.o(i._Z19serial_echopair_PGMPKcf))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(float, float, float, const char*, const char*)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M304()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M204()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M206_report()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_logical_position(const XYZEval&lang;float&rang;&)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)
</UL>

<P><STRONG><a name="[2b5]"></a>serial_echopair_PGM(const char*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, serial.o(i._Z19serial_echopair_PGMPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = serial_echopair_PGM(const char*, unsigned char) &rArr; Print::print(unsigned char, int) &rArr; Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M113()
</UL>

<P><STRONG><a name="[2b6]"></a>serial_echopair_PGM(const char*, int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, serial.o(i._Z19serial_echopair_PGMPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_a_position(const XYZval&lang;int&rang;&)
</UL>

<P><STRONG><a name="[2b8]"></a>serial_echopair_PGM(const char*, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, serial.o(i._Z19serial_echopair_PGMPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = serial_echopair_PGM(const char*, unsigned) &rArr; Print::print(unsigned, int) &rArr; Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
</UL>

<P><STRONG><a name="[2ba]"></a>serial_echopair_PGM(const char*, long)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, serial.o(i._Z19serial_echopair_PGMPKcl))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = serial_echopair_PGM(const char*, long) &rArr; Print::print(long, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, serial_index_t)
</UL>

<P><STRONG><a name="[2bc]"></a>serialprintln_onoff(bool)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, serial.o(i._Z19serialprintln_onoffb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serialprintln_onoff(bool) &rArr; serialprint_onoff(bool) &rArr; serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_onoff(bool)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
</UL>

<P><STRONG><a name="[2bd]"></a>set_axis_is_at_home(AxisEnum)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, motion.o(i._Z19set_axis_is_at_home8AxisEnum))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_workspace_offset(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
</UL>

<P><STRONG><a name="[2be]"></a>u8g_UpdateRefHeight(_u8g_t*)</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, u8g_font.o(i._Z19u8g_UpdateRefHeightP6_u8g_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_UpdateRefHeight(_u8g_t*) &rArr; u8g_font_GetCapitalAHeight(const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetCapitalAHeight(const void*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetLowerGDescent(const void*)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXDescent(const void*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXAscent(const void*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontDescent(const void*)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontAscent(const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
</UL>

<P><STRONG><a name="[2c5]"></a>u8g_pb16h1_SetPixel(_u8g_pb_t*, const _u8g_dev_arg_pixel_t*)</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, u8g_pb16h1.o(i._Z19u8g_pb16h1_SetPixelP9_u8g_pb_tPK20_u8g_dev_arg_pixel_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = u8g_pb16h1_SetPixel(_u8g_pb_t*, const _u8g_dev_arg_pixel_t*) &rArr; u8g_pb16h1_set_pixel(_u8g_pb_t*, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16h1_set_pixel(_u8g_pb_t*, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16h1_base_fn
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16h1_Set8PixelOpt2(_u8g_pb_t*, _u8g_dev_arg_pixel_t*)
</UL>

<P><STRONG><a name="[559]"></a>HAL_get_reset_source()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal.o(i._Z20HAL_get_reset_sourcev))
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[2c7]"></a>HAL_watchdog_refresh()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, watchdog.o(i._Z20HAL_watchdog_refreshv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_watchdog_refresh() &rArr; iwdg_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_TIMED_PULSE(unsigned char)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loud_kill(const char*, heater_id_t)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>

<P><STRONG><a name="[123]"></a>Usart1ErrIrqCallback()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usart.o(i._Z20Usart1ErrIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart1ErrIrqCallback()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[122]"></a>Usart2ErrIrqCallback()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usart.o(i._Z20Usart2ErrIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart2ErrIrqCallback()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[121]"></a>Usart3ErrIrqCallback()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usart.o(i._Z20Usart3ErrIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart3ErrIrqCallback()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[120]"></a>Usart4ErrIrqCallback()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usart.o(i._Z20Usart4ErrIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart4ErrIrqCallback()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[55b]"></a>calibrate_delay_loop()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, delay.o(i._Z20calibrate_delay_loopv))
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[2ca]"></a>disable_all_steppers()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, marlincore.o(i._Z20disable_all_steppersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disable_all_steppers()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::finish_and_disable()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::abort_load()
</UL>

<P><STRONG><a name="[2cb]"></a>sync_plan_position_e()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, motion.o(i._Z20sync_plan_position_ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sync_plan_position_e() &rArr; Planner::set_e_position_mm(float) &rArr; Planner::buffer_sync_block() &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
</UL>

<P><STRONG><a name="[2c6]"></a>u8g_pb16h1_set_pixel(_u8g_pb_t*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, u8g_pb16h1.o(i._Z20u8g_pb16h1_set_pixelP9_u8g_pb_thhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = u8g_pb16h1_set_pixel(_u8g_pb_t*, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16h1_SetPixel(_u8g_pb_t*, const _u8g_dev_arg_pixel_t*)
</UL>

<P><STRONG><a name="[2cd]"></a>HAL_timer_set_compare(unsigned char, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timers.o(i._Z21HAL_timer_set_compareht))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_timer_set_compare(unsigned char, unsigned short) &rArr; timer_set_compare &rArr; timer_preset_compare &rArr; TIMER0_WriteCmpReg &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
</UL>

<P><STRONG><a name="[2cf]"></a>ST7920_SWSPI_SND_8BIT(unsigned char)</STRONG> (Thumb, 716 bytes, Stack size 24 bytes, ultralcd_st7920_u8glib_rrd_avr.o(i._Z21ST7920_SWSPI_SND_8BITh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ST7920_SWSPI_SND_8BIT(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
</UL>

<P><STRONG><a name="[253]"></a>do_blocking_move_to_z(float, float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motion.o(i._Z21do_blocking_move_to_zff))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = do_blocking_move_to_z(float, float) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, float, float) &rArr; do_blocking_move_to(float, float, float, float) &rArr; line_to_current_position(float) &rArr; Planner::buffer_line(float, float, float, float, float, unsigned char, float) &rArr; Planner::buffer_segment(float, float, float, float, float, unsigned char, float) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float) &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_z_clearance(float, bool)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
</UL>

<P><STRONG><a name="[eb]"></a>menu_info_thermistors()</STRONG> (Thumb, 1144 bytes, Stack size 136 bytes, menu_info.o(i._Z21menu_info_thermistorsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = menu_info_thermistors() &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_info.o(i._Z9menu_infov)
</UL>
<P><STRONG><a name="[472]"></a>reset_stepper_drivers()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, indirection.o(i._Z21reset_stepper_driversv))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[55a]"></a>HAL_clear_reset_source()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._Z22HAL_clear_reset_sourcev))
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[2d1]"></a>do_blocking_move_to_xy(float, float, float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motion.o(i._Z22do_blocking_move_to_xyfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = do_blocking_move_to_xy(float, float, float) &rArr; do_blocking_move_to(float, float, float, float) &rArr; line_to_current_position(float) &rArr; Planner::buffer_line(float, float, float, float, float, unsigned char, float) &rArr; Planner::buffer_segment(float, float, float, float, float, unsigned char, float) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float) &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
</UL>

<P><STRONG><a name="[d4]"></a>menu_advanced_filament()</STRONG> (Thumb, 642 bytes, Stack size 64 bytes, menu_advanced.o(i._Z22menu_advanced_filamentv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = menu_advanced_filament() &rArr; TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_bool::draw(bool, unsigned char, const char*, bool*, ...)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::scale(float)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_bool::action(const char*, bool*, void(*)())
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[bf]"></a>menu_advanced_settings()</STRONG> (Thumb, 1754 bytes, Stack size 64 bytes, menu_advanced.o(i._Z22menu_advanced_settingsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = menu_advanced_settings() &rArr; MenuItem_submenu::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::save_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printer_busy()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(i._Z18menu_configurationv)
</UL>
<P><STRONG><a name="[cf]"></a>menu_advanced_velocity()</STRONG> (Thumb, 1370 bytes, Stack size 112 bytes, menu_advanced.o(i._Z22menu_advanced_velocityv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = menu_advanced_velocity() &rArr; TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[2c3]"></a>u8g_font_GetFontAscent(const void*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i._Z22u8g_font_GetFontAscentPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontAscent(const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_get_byte(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight(_u8g_t*)
</UL>

<P><STRONG><a name="[2dc]"></a>wait_for_user_response(unsigned, bool)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, marlincore.o(i._Z22wait_for_user_responsejb))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wait_for_user_response(unsigned, bool) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
</UL>

<P><STRONG><a name="[2de]"></a>report_current_position()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motion.o(i._Z23report_current_positionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = report_current_position() &rArr; report_logical_position(const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_logical_position(const XYZEval&lang;float&rang;&)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_positions()
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[2df]"></a>report_logical_position(const XYZEval&lang;float&rang;&)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, motion.o(i._Z23report_logical_positionRK7XYZEvalIfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = report_logical_position(const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_projected()
</UL>

<P><STRONG><a name="[2c4]"></a>u8g_font_GetFontDescent(const void*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i._Z23u8g_font_GetFontDescentPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontDescent(const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_get_byte(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight(_u8g_t*)
</UL>

<P><STRONG><a name="[2c1]"></a>u8g_font_GetFontXAscent(const void*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i._Z23u8g_font_GetFontXAscentPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontXAscent(const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_get_byte(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight(_u8g_t*)
</UL>

<P><STRONG><a name="[267]"></a>update_workspace_offset(AxisEnum)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, motion.o(i._Z23update_workspace_offset8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_home_offset(AxisEnum, float)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_axis_is_at_home(AxisEnum)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[2e1]"></a>HAL_adc_start_conversion(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal.o(i._Z24HAL_adc_start_conversionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_adc_start_conversion(unsigned char) &rArr; adc_read &rArr; HAL_watchdog_refresh() &rArr; iwdg_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>

<P><STRONG><a name="[12b]"></a>Usart1TxCmpltIrqCallback()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i._Z24Usart1TxCmpltIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Usart1TxCmpltIrqCallback() &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[12a]"></a>Usart2TxCmpltIrqCallback()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i._Z24Usart2TxCmpltIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Usart2TxCmpltIrqCallback() &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[129]"></a>Usart3TxCmpltIrqCallback()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i._Z24Usart3TxCmpltIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Usart3TxCmpltIrqCallback() &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[128]"></a>Usart4TxCmpltIrqCallback()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i._Z24Usart4TxCmpltIrqCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Usart4TxCmpltIrqCallback() &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[2d0]"></a>do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, float, float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motion.o(i._Z24do_blocking_move_to_xy_zRK5XYvalIfEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, float, float) &rArr; do_blocking_move_to(float, float, float, float) &rArr; line_to_current_position(float) &rArr; Planner::buffer_line(float, float, float, float, float, unsigned char, float) &rArr; Planner::buffer_segment(float, float, float, float, float, unsigned char, float) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float) &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_z(float, float)
</UL>

<P><STRONG><a name="[2e3]"></a>get_homing_bump_feedrate(AxisEnum)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, motion.o(i._Z24get_homing_bump_feedrate8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_homing_bump_feedrate(AxisEnum) &rArr; serial_echo_start() &rArr; serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
</UL>

<P><STRONG><a name="[2ac]"></a>line_to_current_position(float)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motion.o(i._Z24line_to_current_positionf))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = line_to_current_position(float) &rArr; Planner::buffer_line(float, float, float, float, float, unsigned char, float) &rArr; Planner::buffer_segment(float, float, float, float, float, unsigned char, float) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float) &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(float, float, float, float, float, unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(float, float, float, float)
</UL>

<P><STRONG><a name="[2c2]"></a>u8g_font_GetFontXDescent(const void*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i._Z24u8g_font_GetFontXDescentPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontXDescent(const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_get_byte(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight(_u8g_t*)
</UL>

<P><STRONG><a name="[2e5]"></a>u8g_pb16h1_Set8PixelOpt2(_u8g_pb_t*, _u8g_dev_arg_pixel_t*)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, u8g_pb16h1.o(i._Z24u8g_pb16h1_Set8PixelOpt2P9_u8g_pb_tP20_u8g_dev_arg_pixel_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8g_pb16h1_Set8PixelOpt2(_u8g_pb_t*, _u8g_dev_arg_pixel_t*) &rArr; u8g_pb16h1_SetPixel(_u8g_pb_t*, const _u8g_dev_arg_pixel_t*) &rArr; u8g_pb16h1_set_pixel(_u8g_pb_t*, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16h1_SetPixel(_u8g_pb_t*, const _u8g_dev_arg_pixel_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16h1_base_fn
</UL>

<P><STRONG><a name="[456]"></a>update_software_endstops(AxisEnum)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, motion.o(i._Z24update_software_endstops8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[2e6]"></a>uxg_GetUtf8StrPixelWidth(_u8g_t*, const char*)</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, u8g_fontutf8.o(i._Z24uxg_GetUtf8StrPixelWidthP6_u8g_tPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = uxg_GetUtf8StrPixelWidth(_u8g_t*, const char*) &rArr; [local to u8g_fontutf8_cpp]::fontgroup_drawstring(_font_group_t*, const void*, const char*, unsigned char(*)(unsigned char*), void*, int(*)(void*, const void*, const char*)) &rArr; [local to u8g_fontutf8_cpp]::fontgroup_drawwchar(_font_group_t*, const void*, unsigned, void*, int(*)(void*, const void*, const char*)) &rArr; [local to u8g_fontutf8_cpp]::fontgroup_find(_font_group_t*, unsigned) &rArr; pf_bsearch_r(void*, unsigned, int(*)(void*, unsigned, void*), void*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_drawstring(_font_group_t*, const void*, const char*, unsigned char(*)(unsigned char*), void*, int(*)(void*, const void*, const char*))
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>

<P><STRONG><a name="[d3]"></a>menu_advanced_temperature()</STRONG> (Thumb, 2680 bytes, Stack size 104 bytes, menu_advanced.o(i._Z25menu_advanced_temperaturev))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = menu_advanced_temperature() &rArr; TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::scale(float)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_bool::action(const char*, bool*, void(*)())
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::hotend_max_target(unsigned char)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[221]"></a>u8g_font_GetEncoding65Pos(const void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i._Z25u8g_font_GetEncoding65PosPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetEncoding65Pos(const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_get_word(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph(_u8g_t*, unsigned char)
</UL>

<P><STRONG><a name="[220]"></a>u8g_font_GetEncoding97Pos(const void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i._Z25u8g_font_GetEncoding97PosPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetEncoding97Pos(const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_get_word(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph(_u8g_t*, unsigned char)
</UL>

<P><STRONG><a name="[2c0]"></a>u8g_font_GetLowerGDescent(const void*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i._Z25u8g_font_GetLowerGDescentPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetLowerGDescent(const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_get_byte(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight(_u8g_t*)
</UL>

<P><STRONG><a name="[2ee]"></a>uxg_GetUtf8StrPixelWidthP(_u8g_t*, const char*)</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, u8g_fontutf8.o(i._Z25uxg_GetUtf8StrPixelWidthPP6_u8g_tPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = uxg_GetUtf8StrPixelWidthP(_u8g_t*, const char*) &rArr; [local to u8g_fontutf8_cpp]::fontgroup_drawstring(_font_group_t*, const void*, const char*, unsigned char(*)(unsigned char*), void*, int(*)(void*, const void*, const char*)) &rArr; [local to u8g_fontutf8_cpp]::fontgroup_drawwchar(_font_group_t*, const void*, unsigned, void*, int(*)(void*, const void*, const char*)) &rArr; [local to u8g_fontutf8_cpp]::fontgroup_find(_font_group_t*, unsigned) &rArr; pf_bsearch_r(void*, unsigned, int(*)(void*, unsigned, void*), void*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_drawstring(_font_group_t*, const void*, const char*, unsigned char(*)(unsigned char*), void*, int(*)(void*, const void*, const char*))
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>

<P><STRONG><a name="[109]"></a>_goto_menu_move_distance_e()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu_motion.o(i._Z26_goto_menu_move_distance_ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _goto_menu_move_distance_e() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()::[lambda() (instance 7)]::_FUN()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._ZZ27_menu_move_distance_e_maybevENKUlvE_clEv)
</UL>
<P><STRONG><a name="[d0]"></a>menu_advanced_acceleration()</STRONG> (Thumb, 1556 bytes, Stack size 112 bytes, menu_advanced.o(i._Z26menu_advanced_accelerationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = menu_advanced_acceleration() &rArr; TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::action(const char*, unsigned*, unsigned, unsigned, void(*)(), bool)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::draw(bool, unsigned char, const char*, unsigned*, ...)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[d2]"></a>menu_advanced_steps_per_mm()</STRONG> (Thumb, 908 bytes, Stack size 88 bytes, menu_advanced.o(i._Z26menu_advanced_steps_per_mmv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = menu_advanced_steps_per_mm() &rArr; TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[110]"></a>sdcard_start_selected_file()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu_media.o(i._Z26sdcard_start_selected_filev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdcard_start_selected_file() &rArr; MarlinUI::reset_status(bool) &rArr; MarlinUI::set_status_P(const char*, signed char) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_media.o(i._ZZN15MenuItem_sdfile6actionEPKcR10CardReaderENKUlvE_clEv)
</UL>
<P><STRONG><a name="[2bf]"></a>u8g_font_GetCapitalAHeight(const void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i._Z26u8g_font_GetCapitalAHeightPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetCapitalAHeight(const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_get_byte(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight(_u8g_t*)
</UL>

<P><STRONG><a name="[2f6]"></a>HAL_timer_interrupt_enabled(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timers.o(i._Z27HAL_timer_interrupt_enabledh))
<BR><BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
</UL>

<P><STRONG><a name="[2f8]"></a>get_cartesian_from_steppers()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, motion.o(i._Z27get_cartesian_from_steppersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_cartesian_from_steppers() &rArr; Planner::get_axis_position_mm(AxisEnum)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_axis_position_mm(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_from_steppers_for_axis(AxisEnum)
</UL>

<P><STRONG><a name="[2f9]"></a>prepare_line_to_destination()</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, motion.o(i._Z27prepare_line_to_destinationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = prepare_line_to_destination() &rArr; Planner::buffer_line(float, float, float, float, float, unsigned char, float) &rArr; Planner::buffer_segment(float, float, float, float, float, unsigned char, float) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float) &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(float, float, float, float, float, unsigned char, float)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_motion_limits(XYZval&lang;float&rang;&)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G0_G1()
</UL>

<P><STRONG><a name="[3e0]"></a>restore_feedrate_and_scaling()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motion.o(i._Z28restore_feedrate_and_scalingv))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[a]"></a>u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, ultralcd_st7920_u8glib_rrd_avr.o(i._Z28u8g_dev_rrd_st7920_128x64_fnP6_u8g_tP10_u8g_dev_thPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*) &rArr; u8g_dev_pb16h1_base_fn &rArr; u8g_pb16h1_Set8PixelOpt2(_u8g_pb_t*, _u8g_dev_arg_pixel_t*) &rArr; u8g_pb16h1_SetPixel(_u8g_pb_t*, const _u8g_dev_arg_pixel_t*) &rArr; u8g_pb16h1_set_pixel(_u8g_pb_t*, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16h1_base_fn
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_SWSPI_SND_8BIT(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ultralcd_st7920_u8glib_rrd_avr.o(.data)
</UL>
<P><STRONG><a name="[2fd]"></a>remember_feedrate_and_scaling()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motion.o(i._Z29remember_feedrate_and_scalingv))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remember_feedrate_scaling_off()
</UL>

<P><STRONG><a name="[2fc]"></a>remember_feedrate_scaling_off()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, motion.o(i._Z29remember_feedrate_scaling_offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = remember_feedrate_scaling_off()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remember_feedrate_and_scaling()
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[2fe]"></a>u8g_font_calc_str_pixel_width(_u8g_t*, const char*, char(*)(const void*))</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, u8g_font.o(i._Z29u8g_font_calc_str_pixel_widthP6_u8g_tPKcPFcPKvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = u8g_font_calc_str_pixel_width(_u8g_t*, const char*, char(*)(const void*)) &rArr; u8g_GetGlyph(_u8g_t*, unsigned char) &rArr; [local to u8g_font_c]::u8g_CopyGlyphDataToCache(_u8g_t*, void*) &rArr; [local to u8g_font_c]::u8g_font_GetFormat(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph(_u8g_t*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetStrPixelWidth
</UL>

<P><STRONG><a name="[be]"></a>lcd_power_loss_recovery_cancel()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, menu_job_recovery.o(i._Z30lcd_power_loss_recovery_cancelv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lcd_power_loss_recovery_cancel() &rArr; CardReader::autofile_begin() &rArr; CardReader::autofile_check() &rArr; CardReader::fileExists(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_begin()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_job_recovery()
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1000()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_job_recovery.o(i._Z17menu_job_recoveryv)
</UL>
<P><STRONG><a name="[301]"></a>report_current_position_projected()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motion.o(i._Z33report_current_position_projectedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = report_current_position_projected() &rArr; report_logical_position(const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_logical_position(const XYZEval&lang;float&rang;&)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_a_position(const XYZval&lang;int&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M114()
</UL>

<P><STRONG><a name="[28f]"></a>set_current_from_steppers_for_axis(AxisEnum)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, motion.o(i._Z34set_current_from_steppers_for_axis8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_current_from_steppers_for_axis(AxisEnum) &rArr; get_cartesian_from_steppers() &rArr; Planner::get_axis_position_mm(AxisEnum)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_axis_position_mm(AxisEnum)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cartesian_from_steppers()
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
</UL>

<P><STRONG><a name="[c1]"></a>_menu_configuration_preheat_settings()</STRONG> (Thumb, 1158 bytes, Stack size 72 bytes, menu_configuration.o(i._Z36_menu_configuration_preheat_settingsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = _menu_configuration_preheat_settings() &rArr; MarlinUI::store_settings() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::scale(float)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::get_preheat_label(unsigned char)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::store_settings()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_configuration_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_configuration_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(i._Z18menu_configurationv)
</UL>
<P><STRONG><a name="[2dd]"></a>idle()</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, marlincore.o(i._Z4idlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tick()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::AutoReportTemp::report()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::host_keepalive()
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_idletask()
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_now(const char*)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_user_response(unsigned, bool)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::finish_and_disable()
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::dwell(unsigned)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[28a]"></a>kill(const char*, const char*, bool)</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, marlincore.o(i._Z4killPKcS0_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::kill_screen(const char*, const char*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M112()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::validate_homing_move()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loud_kill(const char*, heater_id_t)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(short, unsigned char)
</UL>

<P><STRONG><a name="[475]"></a>crc16(unsigned short*, const void*, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, crc16.o(i._Z5crc16PtPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16(unsigned short*, const void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>

<P><STRONG><a name="[1fb]"></a>delay(unsigned long)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wirish_time.o(i._Z5delaym))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay(unsigned long)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yield
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::writeOneByte(unsigned short, unsigned char)
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::quick_feedback(bool)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loud_kill(const char*, heater_id_t)
</UL>

<P><STRONG><a name="[30c]"></a>minkill(bool)</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, marlincore.o(i._Z7minkillb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = minkill(bool) &rArr; Temperature::disable_all_heaters() &rArr; Temperature::start_watching_bed()
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1ms
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all_steppers()
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
</UL>

<P><STRONG><a name="[30f]"></a>pinMode(unsigned char, WiringPinMode)</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, wirish_digital_f1.o(i._Z7pinModeh13WiringPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pinMode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
</UL>

<P><STRONG><a name="[155]"></a>premain()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._Z7premainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = premain() &rArr; init &rArr; [local to startup_cpp]::setup_SysClk() &rArr; CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array.00101)
</UL>
<P><STRONG><a name="[558]"></a>HAL_init()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal.o(i._Z8HAL_initv))
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[201]"></a>ftostr52(float)</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, numtostr.o(i._Z8ftostr52f))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr52(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr42_52(float)
</UL>

<P><STRONG><a name="[203]"></a>ftostr63(float)</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, numtostr.o(i._Z8ftostr63f))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr63(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr53_63(float)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum)
</UL>

<P><STRONG><a name="[311]"></a>homeaxis(AxisEnum)</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, motion.o(i._Z8homeaxis8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = homeaxis(AxisEnum) &rArr; do_homing_move(AxisEnum, float, float, bool) &rArr; Endstops::validate_homing_move() &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_homing_bump_feedrate(AxisEnum)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_axis_is_at_home(AxisEnum)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[312]"></a>plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)</STRONG> (Thumb, 798 bytes, Stack size 104 bytes, g2_g3.o(i._Z8plan_arcRK7XYZEvalIfERK5XYvalIfEbh))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(float, float, float, float, float, unsigned char, float)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_motion_limits(XYZval&lang;float&rang;&)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to G2_G3_cpp]::ABS&lang;float&rang;(T1)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
</UL>

<P><STRONG><a name="[31a]"></a>SDIO_Init()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdio.o(i._Z9SDIO_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SDIO_Init() &rArr; steup_sdio &rArr; Sdioc_Class::init() &rArr; SDCARD_Init &rArr; [local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*) &rArr; SDMMC_Cmd6_SwitchFunc &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steup_sdio
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiskIODriver_SDIO::init(unsigned char, signed char)
</UL>

<P><STRONG><a name="[31c]"></a>ftostr5rj(float)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, numtostr.o(i._Z9ftostr5rjf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr5rj(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui16tostr5rj(unsigned short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float5_25::strfunc(float)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_long5_25::strfunc(float)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float5::strfunc(float)
</UL>

<P><STRONG><a name="[31e]"></a>loud_kill(const char*, heater_id_t)</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, temperature.o(i._Z9loud_killPKc11heater_id_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>

<P><STRONG><a name="[f6]"></a>menu_info()</STRONG> (Thumb, 644 bytes, Stack size 40 bytes, menu_info.o(i._Z9menu_infov))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = menu_info() &rArr; MenuItem_submenu::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[106]"></a>menu_main()</STRONG> (Thumb, 2162 bytes, Stack size 48 bytes, menu_main.o(i._Z9menu_mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = menu_main() &rArr; MarlinUI::pause_print() &rArr; GcodeSuite::process_subcommands_now(char*) &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M501() &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsPaused()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsActive()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_gcode::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::resume_print()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_print()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::abort_print()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::abort_load()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> marlinui.o(i._ZN8MarlinUI13status_screenEv)
</UL>
<P><STRONG><a name="[af]"></a>menu_move()</STRONG> (Thumb, 776 bytes, Stack size 40 bytes, menu_motion.o(i._Z9menu_movev))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = menu_move() &rArr; MenuItem_submenu::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z11menu_motionv)
</UL>
<P><STRONG><a name="[ef]"></a>menu_tune()</STRONG> (Thumb, 1738 bytes, Stack size 80 bytes, menu_tune.o(i._Z9menu_tunev))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = menu_tune() &rArr; TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::scale(float)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_tune_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_tune_cpp]::_MAX&lang;float, int&rang;(T1, T2)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[321]"></a>print_xyz(const XYZval&lang;float&rang;&, const char*, const char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m211.o(i._Z9print_xyzRK6XYZvalIfEPKcS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = print_xyz(const XYZval&lang;float&rang;&, const char*, const char*) &rArr; print_xyz(float, float, float, const char*, const char*) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(float, float, float, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
</UL>

<P><STRONG><a name="[322]"></a>print_xyz(float, float, float, const char*, const char*)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial.o(i._Z9print_xyzfffPKcS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = print_xyz(float, float, float, const char*, const char*) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(const XYZval&lang;float&rang;&, const char*, const char*)
</UL>

<P><STRONG><a name="[323]"></a>CardReader::countItems(SdFile)</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, cardreader.o(i._ZN10CardReader10countItemsE6SdFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CardReader::countItems(SdFile) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::is_dir_or_gcode(const directoryEntry&)
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countFilesInWorkDir()
</UL>

<P><STRONG><a name="[326]"></a>CardReader::diveToFile(bool, SdFile*&, const char*, bool)</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, cardreader.o(i._ZN10CardReader10diveToFileEbRP6SdFilePKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
</UL>

<P><STRONG><a name="[32c]"></a>CardReader::fileExists(const char*)</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, cardreader.o(i._ZN10CardReader10fileExistsEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = CardReader::fileExists(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::check()
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1000()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
</UL>

<P><STRONG><a name="[32e]"></a>CardReader::isFileOpen()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader10isFileOpenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CardReader::isFileOpen()
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_get_progress()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::resume_print()
</UL>

<P><STRONG><a name="[330]"></a>CardReader::removeFile(const char*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cardreader.o(i._ZN10CardReader10removeFileEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CardReader::removeFile(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeJobRecoveryFile()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M30()
</UL>

<P><STRONG><a name="[332]"></a>CardReader::openLogFile(const char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader11openLogFileEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CardReader::openLogFile(const char*) &rArr; CardReader::openFileWrite(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M928()
</UL>

<P><STRONG><a name="[334]"></a>CardReader::endFilePrint()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader12endFilePrintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CardReader::endFilePrint() &rArr; SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::release()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
</UL>

<P><STRONG><a name="[306]"></a>CardReader::manage_media()</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, cardreader.o(i._ZN10CardReader12manage_mediaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = CardReader::manage_media() &rArr; PrintJobRecovery::check() &rArr; CardReader::autofile_begin() &rArr; CardReader::autofile_check() &rArr; CardReader::fileExists(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::check()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::release()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::detected()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::media_changed(unsigned char, unsigned char)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>

<P><STRONG><a name="[33a]"></a>CardReader::openFileRead(const char*, unsigned char)</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, cardreader.o(i._ZN10CardReader12openFileReadEPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CardReader::openFileRead(const char*, unsigned char) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::getAbsFilename(char*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M23()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
</UL>

<P><STRONG><a name="[33d]"></a>CardReader::printListing(SdFile, const char*)</STRONG> (Thumb, 238 bytes, Stack size 136 bytes, cardreader.o(i._ZN10CardReader12printListingE6SdFilePKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + In Cycle
<LI>Call Chain = CardReader::printListing(SdFile, const char*) &rArr;  CardReader::printListing(SdFile, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to cardreader_cpp]::DIR_IS_SUBDIR(const directoryEntry*)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHOLN&lang;unsigned&rang;(T1)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;char*&rang;(T1)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::is_dir_or_gcode(const directoryEntry&)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFilename(char*, const directoryEntry&)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[344]"></a>CardReader::selectByName(SdFile, const char*)</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, cardreader.o(i._ZN10CardReader12selectByNameE6SdFilePKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CardReader::selectByName(SdFile, const char*) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::is_dir_or_gcode(const directoryEntry&)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFilename(char*, const directoryEntry&)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
</UL>

<P><STRONG><a name="[1e8]"></a>CardReader::get_num_Files()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader13get_num_FilesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CardReader::get_num_Files() &rArr; CardReader::countFilesInWorkDir() &rArr; CardReader::countItems(SdFile) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countFilesInWorkDir()
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
</UL>

<P><STRONG><a name="[333]"></a>CardReader::openFileWrite(const char*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cardreader.o(i._ZN10CardReader13openFileWriteEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CardReader::openFileWrite(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M28()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openLogFile(const char*)
</UL>

<P><STRONG><a name="[346]"></a>CardReader::printFilename()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cardreader.o(i._ZN10CardReader13printFilenameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CardReader::printFilename() &rArr; SdBaseFile::getDosName(char*) &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;char*&rang;(T1)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
</UL>

<P><STRONG><a name="[348]"></a>CardReader::report_status()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader13report_statusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CardReader::report_status() &rArr; void SERIAL_ECHOLN&lang;unsigned&rang;(T1) &rArr; Print::println(unsigned, int) &rArr; Print::print(unsigned, int) &rArr; Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHOLN&lang;unsigned&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
</UL>

<P><STRONG><a name="[349]"></a>CardReader::selectByIndex(SdFile, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, cardreader.o(i._ZN10CardReader13selectByIndexE6SdFileh))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CardReader::selectByIndex(SdFile, unsigned char) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::is_dir_or_gcode(const directoryEntry&)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFilename(char*, const directoryEntry&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByIndex(unsigned short)
</UL>

<P><STRONG><a name="[34a]"></a>CardReader::write_command(char*)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cardreader.o(i._ZN10CardReader13write_commandEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CardReader::write_command(char*) &rArr; SdFile::write(const char*) &rArr; SdBaseFile::write(const void*, unsigned short) &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const char*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
</UL>

<P><STRONG><a name="[300]"></a>CardReader::autofile_begin()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader14autofile_beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = CardReader::autofile_begin() &rArr; CardReader::autofile_check() &rArr; CardReader::fileExists(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::check()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_loss_recovery_cancel()
</UL>

<P><STRONG><a name="[34c]"></a>CardReader::autofile_check()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cardreader.o(i._ZN10CardReader14autofile_checkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = CardReader::autofile_check() &rArr; CardReader::fileExists(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cdroot()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_begin()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
</UL>

<P><STRONG><a name="[33b]"></a>CardReader::getAbsFilename(char*)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, cardreader.o(i._ZN10CardReader14getAbsFilenameEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CardReader::getAbsFilename(char*) &rArr; CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const &rArr; SdBaseFile::getDosName(char*) &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::prepare()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
</UL>

<P><STRONG><a name="[34f]"></a>CardReader::startFileprint()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader14startFileprintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CardReader::startFileprint()
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
</UL>

<P><STRONG><a name="[350]"></a>CardReader::fileHasFinished()</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader15fileHasFinishedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = CardReader::fileHasFinished() &rArr; CardReader::openFileRead(const char*, unsigned char) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::startFileprint()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
</UL>

<P><STRONG><a name="[324]"></a>CardReader::is_dir_or_gcode(const directoryEntry&)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader15is_dir_or_gcodeERK14directoryEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CardReader::is_dir_or_gcode(const directoryEntry&)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to cardreader_cpp]::DIR_IS_SUBDIR(const directoryEntry*)
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByIndex(SdFile, unsigned char)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countItems(SdFile)
</UL>

<P><STRONG><a name="[51b]"></a>CardReader::longest_filename()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, marlinui.o(i._ZN10CardReader16longest_filenameEv))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::scrolled_filename(CardReader&, unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[2f5]"></a>CardReader::openAndPrintFile(const char*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cardreader.o(i._ZN10CardReader16openAndPrintFileEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CardReader::openAndPrintFile(const char*) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_start_selected_file()
</UL>

<P><STRONG><a name="[33c]"></a>CardReader::selectFileByName(const char*)</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, cardreader.o(i._ZN10CardReader16selectFileByNameEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CardReader::selectFileByName(const char*) &rArr; CardReader::selectByName(SdFile, const char*) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
</UL>

<P><STRONG><a name="[1ee]"></a>CardReader::selectFileByIndex(unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, cardreader.o(i._ZN10CardReader17selectFileByIndexEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CardReader::selectFileByIndex(unsigned short) &rArr; CardReader::selectByIndex(SdFile, unsigned char) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByIndex(SdFile, unsigned char)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
</UL>

<P><STRONG><a name="[345]"></a>CardReader::countFilesInWorkDir()</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, cardreader.o(i._ZN10CardReader19countFilesInWorkDirEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CardReader::countFilesInWorkDir() &rArr; CardReader::countItems(SdFile) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countItems(SdFile)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::get_num_Files()
</UL>

<P><STRONG><a name="[353]"></a>CardReader::openJobRecoveryFile(bool)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader19openJobRecoveryFileEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CardReader::openJobRecoveryFile(bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::write()
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::load()
</UL>

<P><STRONG><a name="[354]"></a>CardReader::jobRecoverFileExists()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader20jobRecoverFileExistsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CardReader::jobRecoverFileExists() &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeJobRecoveryFile()
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::load()
</UL>

<P><STRONG><a name="[355]"></a>CardReader::removeJobRecoveryFile()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader21removeJobRecoveryFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CardReader::removeJobRecoveryFile() &rArr; CardReader::removeFile(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::jobRecoverFileExists()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::init()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
</UL>

<P><STRONG><a name="[1ef]"></a>CardReader::cd(const char*)</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, cardreader.o(i._ZN10CardReader2cdEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = CardReader::cd(const char*) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
</UL>

<P><STRONG><a name="[357]"></a>CardReader::ls()</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, cardreader.o(i._ZN10CardReader2lsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = CardReader::ls() &rArr; CardReader::printListing(SdFile, const char*) &rArr;  CardReader::printListing(SdFile, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M20()
</UL>

<P><STRONG><a name="[369]"></a>CardReader::eof()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i._ZN10CardReader3eofEv))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
</UL>

<P><STRONG><a name="[219]"></a>CardReader::cdup()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader4cdupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CardReader::cdup() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_sd_updir()
</UL>

<P><STRONG><a name="[336]"></a>CardReader::mount()</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, cardreader.o(i._ZN10CardReader5mountEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CardReader::mount() &rArr; SdBaseFile::openRoot(SdVolume*) &rArr; SdVolume::chainSize(unsigned, unsigned*) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::init(DiskIODriver*, unsigned char)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openRoot(SdVolume*)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cdroot()
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M21()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
</UL>

<P><STRONG><a name="[34d]"></a>CardReader::cdroot()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader6cdrootEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CardReader::cdroot() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
</UL>

<P><STRONG><a name="[337]"></a>CardReader::release()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader7releaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CardReader::release() &rArr; CardReader::endFilePrint() &rArr; SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M22()
</UL>

<P><STRONG><a name="[35a]"></a>CardReader::closefile(bool)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader9closefileEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CardReader::closefile(bool) &rArr; SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M30()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M524()
</UL>

<P><STRONG><a name="[32d]"></a>CardReader::isMounted()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader9isMountedEv))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openJobRecoveryFile(bool)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::startFileprint()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::get_num_Files()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
</UL>

<P><STRONG><a name="[35c]"></a>CardReader::CardReader()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReaderC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CardReader::CardReader() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_MarlinCore_cpp_card
</UL>

<P><STRONG><a name="[5a1]"></a>CardReader::CardReader__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReaderC1Ev), UNUSED)

<P><STRONG><a name="[35d]"></a>GCodeQueue::RingBuffer::ok_to_send()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i._ZN10GCodeQueue10RingBuffer10ok_to_sendEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GCodeQueue::RingBuffer::ok_to_send() &rArr; serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[35f]"></a>GCodeQueue::RingBuffer::advance_pos(unsigned char&, int)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue10RingBuffer11advance_posERhi))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::commit_command(bool)
</UL>

<P><STRONG><a name="[35e]"></a>GCodeQueue::RingBuffer::commit_command(bool)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, queue.o(i._ZN10GCodeQueue10RingBuffer14commit_commandEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GCodeQueue::RingBuffer::commit_command(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::advance_pos(unsigned char&, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::enqueue(const char*, bool)
</UL>

<P><STRONG><a name="[360]"></a>GCodeQueue::RingBuffer::enqueue(const char*, bool)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, queue.o(i._ZN10GCodeQueue10RingBuffer7enqueueEPKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GCodeQueue::RingBuffer::enqueue(const char*, bool) &rArr; GCodeQueue::RingBuffer::commit_command(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::commit_command(bool)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one(const char*)
</UL>

<P><STRONG><a name="[361]"></a>GCodeQueue::enqueue_one(const char*)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, queue.o(i._ZN10GCodeQueue11enqueue_oneEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GCodeQueue::enqueue_one(const char*) &rArr; serial_echopair_PGM(const char*, const char*) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::enqueue(const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_now(const char*)
</UL>

<P><STRONG><a name="[362]"></a>GCodeQueue::enqueue_now_P(const char*)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(i._ZN10GCodeQueue13enqueue_now_PEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = GCodeQueue::enqueue_now_P(const char*) &rArr; GCodeQueue::enqueue_one_now(const char*) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_now(const char*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::tempload()
</UL>

<P><STRONG><a name="[365]"></a>GCodeQueue::enqueue_one_P(const char*)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, queue.o(i._ZN10GCodeQueue13enqueue_one_PEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GCodeQueue::enqueue_one_P(const char*) &rArr; GCodeQueue::RingBuffer::enqueue(const char*, bool) &rArr; GCodeQueue::RingBuffer::commit_command(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::enqueue(const char*, bool)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[364]"></a>GCodeQueue::enqueue_one_now(const char*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(i._ZN10GCodeQueue15enqueue_one_nowEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = GCodeQueue::enqueue_one_now(const char*) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_now_P(const char*)
</UL>

<P><STRONG><a name="[366]"></a>GCodeQueue::gcode_line_error(const char*, serial_index_t)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, queue.o(i._ZN10GCodeQueue16gcode_line_errorEPKc14serial_index_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GCodeQueue::gcode_line_error(const char*, serial_index_t) &rArr; serial_echopair_PGM(const char*, long) &rArr; Print::print(long, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, long)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend(serial_index_t)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[368]"></a>GCodeQueue::get_sdcard_commands()</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, queue.o(i._ZN10GCodeQueue19get_sdcard_commandsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = GCodeQueue::get_sdcard_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::full(unsigned char) const
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::eof()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stream_char(char, unsigned char&, char(&)[96], int&)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_line_done(unsigned char&, char(&)[96], int&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::commit_command(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_available_commands()
</UL>

<P><STRONG><a name="[36d]"></a>GCodeQueue::get_serial_commands()</STRONG> (Thumb, 580 bytes, Stack size 48 bytes, queue.o(i._ZN10GCodeQueue19get_serial_commandsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::full(unsigned char) const
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stream_char(char, unsigned char&, char(&)[96], int&)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_line_done(unsigned char&, char(&)[96], int&)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::available()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::flush()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::read()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, serial_index_t)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::enqueue(const char*, bool)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_available_commands()
</UL>

<P><STRONG><a name="[287]"></a>GCodeQueue::get_available_commands()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, queue.o(i._ZN10GCodeQueue22get_available_commandsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::full(unsigned char) const
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
</UL>

<P><STRONG><a name="[367]"></a>GCodeQueue::flush_and_request_resend(serial_index_t)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, queue.o(i._ZN10GCodeQueue24flush_and_request_resendE14serial_index_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GCodeQueue::flush_and_request_resend(serial_index_t) &rArr; Print::println(long, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(long, int)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::flush()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M999()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, serial_index_t)
</UL>

<P><STRONG><a name="[371]"></a>GCodeQueue::process_injected_command()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, queue.o(i._ZN10GCodeQueue24process_injected_commandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = GCodeQueue::process_injected_command() &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M501() &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
</UL>

<P><STRONG><a name="[374]"></a>GCodeQueue::process_injected_command_P()</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, queue.o(i._ZN10GCodeQueue26process_injected_command_PEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = GCodeQueue::process_injected_command_P() &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M501() &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
</UL>

<P><STRONG><a name="[375]"></a>GCodeQueue::advance()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i._ZN10GCodeQueue7advanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = GCodeQueue::advance() &rArr; GCodeQueue::process_injected_command_P() &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M501() &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::ok_to_send()
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::occupied() const
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::advance_pos(unsigned char&, int)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[307]"></a>GcodeSuite::host_keepalive()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, gcode.o(i._ZN10GcodeSuite14host_keepaliveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GcodeSuite::host_keepalive() &rArr; serial_echo_start() &rArr; serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>

<P><STRONG><a name="[3d3]"></a>GcodeSuite::axis_is_relative(AxisEnum)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gcode.o(i._ZN10GcodeSuite16axis_is_relativeE8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
</UL>

<P><STRONG><a name="[37e]"></a>GcodeSuite::set_relative_mode(bool)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gcode.o(i._ZN10GcodeSuite17set_relative_modeEb))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[378]"></a>GcodeSuite::T(signed char)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, t.o(i._ZN10GcodeSuite1TEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GcodeSuite::T(signed char) &rArr; tool_change(unsigned char, bool) &rArr; Print::print(unsigned char, int) &rArr; Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[377]"></a>GcodeSuite::process_next_command()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gcode.o(i._ZN10GcodeSuite20process_next_commandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = GcodeSuite::process_next_command() &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M501() &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
</UL>

<P><STRONG><a name="[373]"></a>GcodeSuite::process_parsed_command(bool)</STRONG> (Thumb, 1168 bytes, Stack size 16 bytes, gcode.o(i._ZN10GcodeSuite22process_parsed_commandEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M501() &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M304()
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M204()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M400()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M121()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M120()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M410()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M112()
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M108()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M85()
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M504()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M503()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M502()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M501()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M500()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::T(signed char)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M999()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M997()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1000()
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G27()
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M119()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M118()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M115()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M114()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M113()
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M110()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M414()
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M300()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M145()
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M117()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G0_G1()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M30()
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M29()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M28()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M26()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M25()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M23()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M22()
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M21()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M20()
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M77()
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M76()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M75()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M928()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M524()
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M155()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M107()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M105()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::set_relative_mode(bool)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::msgDone()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::unknown_command_warning()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::ok_to_send()
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M83()
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M82()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command()
</UL>

<P><STRONG><a name="[3ce]"></a>GcodeSuite::process_subcommands_now(char*)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gcode.o(i._ZN10GcodeSuite23process_subcommands_nowEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = GcodeSuite::process_subcommands_now(char*) &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M501() &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_print()
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::CompletedMaticHate()
</UL>

<P><STRONG><a name="[3cf]"></a>GcodeSuite::process_subcommands_now_P(const char*)</STRONG> (Thumb, 114 bytes, Stack size 232 bytes, gcode.o(i._ZN10GcodeSuite25process_subcommands_now_PEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + In Cycle
<LI>Call Chain = GcodeSuite::process_subcommands_now_P(const char*) &rArr;  GcodeSuite::process_parsed_command(bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
</UL>

<P><STRONG><a name="[3d0]"></a>GcodeSuite::get_destination_from_command()</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, gcode.o(i._ZN10GcodeSuite28get_destination_from_commandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GcodeSuite::get_destination_from_command() &rArr; PrintJobRecovery::save(bool, float) &rArr; PrintJobRecovery::write() &rArr; CardReader::openJobRecoveryFile(bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::axis_is_relative(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G0_G1()
</UL>

<P><STRONG><a name="[37b]"></a>GcodeSuite::G4()</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, g4.o(i._ZN10GcodeSuite2G4Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = GcodeSuite::G4() &rArr; GcodeSuite::dwell(unsigned) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::has_status()
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::dwell(unsigned)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3d9]"></a>GcodeSuite::get_target_extruder_from_command()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gcode.o(i._ZN10GcodeSuite32get_target_extruder_from_commandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GcodeSuite::get_target_extruder_from_command() &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;unsigned short&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M105()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
</UL>

<P><STRONG><a name="[37c]"></a>GcodeSuite::G27()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, g27.o(i._ZN10GcodeSuite3G27Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GcodeSuite::G27() &rArr; Nozzle::park(unsigned char, const XYZval&lang;float&rang;&) &rArr; do_blocking_move_to_xy(float, float, float) &rArr; do_blocking_move_to(float, float, float, float) &rArr; line_to_current_position(float) &rArr; Planner::buffer_line(float, float, float, float, float, unsigned char, float) &rArr; Planner::buffer_segment(float, float, float, float, float, unsigned char, float) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float) &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[37d]"></a>GcodeSuite::G28()</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, g28.o(i._ZN10GcodeSuite3G28Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = GcodeSuite::G28() &rArr; Endstops::enable(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axes_should_home(unsigned char)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable(bool)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::not_homing()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remember_feedrate_scaling_off()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_feedrate_and_scaling()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_z_clearance(float, bool)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[37f]"></a>GcodeSuite::G92()</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, g92.o(i._ZN10GcodeSuite3G92Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GcodeSuite::G92() &rArr; report_current_position() &rArr; report_logical_position(const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_workspace_offset(AxisEnum)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position_e()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[382]"></a>GcodeSuite::M17()</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, m17_m18_m84.o(i._ZN10GcodeSuite3M17Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GcodeSuite::M17() &rArr; MarlinUI::set_status_P(const char*, signed char) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_all_steppers()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_e_steppers()
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[383]"></a>GcodeSuite::M20()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m20.o(i._ZN10GcodeSuite3M20Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = GcodeSuite::M20() &rArr; CardReader::ls() &rArr; CardReader::printListing(SdFile, const char*) &rArr;  CardReader::printListing(SdFile, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[384]"></a>GcodeSuite::M21()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m21_m22.o(i._ZN10GcodeSuite3M21Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GcodeSuite::M21() &rArr; CardReader::mount() &rArr; SdBaseFile::openRoot(SdVolume*) &rArr; SdVolume::chainSize(unsigned, unsigned*) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[385]"></a>GcodeSuite::M22()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m21_m22.o(i._ZN10GcodeSuite3M22Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GcodeSuite::M22() &rArr; CardReader::release() &rArr; CardReader::endFilePrint() &rArr; SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::release()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[386]"></a>GcodeSuite::M23()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, m23.o(i._ZN10GcodeSuite3M23Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GcodeSuite::M23() &rArr; CardReader::openFileRead(const char*, unsigned char) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[387]"></a>GcodeSuite::M24()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, m24_m25.o(i._ZN10GcodeSuite3M24Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GcodeSuite::M24() &rArr; PrintJobRecovery::prepare() &rArr; CardReader::getAbsFilename(char*) &rArr; CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const &rArr; SdBaseFile::getDosName(char*) &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::prepare()
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::resume(unsigned)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::startFileprint()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[388]"></a>GcodeSuite::M25()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, m24_m25.o(i._ZN10GcodeSuite3M25Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = GcodeSuite::M25() &rArr; PrintJobRecovery::save(bool, float) &rArr; PrintJobRecovery::write() &rArr; CardReader::openJobRecoveryFile(bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::pause()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[389]"></a>GcodeSuite::M26()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, m26.o(i._ZN10GcodeSuite3M26Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GcodeSuite::M26() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[38a]"></a>GcodeSuite::M27()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m27.o(i._ZN10GcodeSuite3M27Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GcodeSuite::M27() &rArr; CardReader::report_status() &rArr; void SERIAL_ECHOLN&lang;unsigned&rang;(T1) &rArr; Print::println(unsigned, int) &rArr; Print::print(unsigned, int) &rArr; Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[38b]"></a>GcodeSuite::M28()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m28_m29.o(i._ZN10GcodeSuite3M28Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GcodeSuite::M28() &rArr; CardReader::openFileWrite(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[38c]"></a>GcodeSuite::M29()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m28_m29.o(i._ZN10GcodeSuite3M29Ev))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[38d]"></a>GcodeSuite::M30()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m30.o(i._ZN10GcodeSuite3M30Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GcodeSuite::M30() &rArr; CardReader::removeFile(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[390]"></a>GcodeSuite::M31()</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, m31.o(i._ZN10GcodeSuite3M31Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GcodeSuite::M31() &rArr; duration_t::toString(char*) const &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toString(char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[38e]"></a>GcodeSuite::M32()</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, m32.o(i._ZN10GcodeSuite3M32Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GcodeSuite::M32() &rArr; CardReader::openFileRead(const char*, unsigned char) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::startFileprint()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[391]"></a>GcodeSuite::M75()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m75-m78.o(i._ZN10GcodeSuite3M75Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GcodeSuite::M75() &rArr; startOrResumeJob() &rArr; Stopwatch::start() &rArr; Stopwatch::duration()
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[392]"></a>GcodeSuite::M76()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m75-m78.o(i._ZN10GcodeSuite3M76Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GcodeSuite::M76() &rArr; Stopwatch::pause()
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::pause()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[393]"></a>GcodeSuite::M77()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m75-m78.o(i._ZN10GcodeSuite3M77Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GcodeSuite::M77() &rArr; Stopwatch::stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3a2]"></a>GcodeSuite::M81()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m80_m81.o(i._ZN10GcodeSuite3M81Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = GcodeSuite::M81() &rArr; Planner::finish_and_disable() &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::finish_and_disable()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3a3]"></a>GcodeSuite::M82()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m82_m83.o(i._ZN10GcodeSuite3M82Ev))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3a4]"></a>GcodeSuite::M83()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m82_m83.o(i._ZN10GcodeSuite3M83Ev))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3a6]"></a>GcodeSuite::M85()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, m85.o(i._ZN10GcodeSuite3M85Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GcodeSuite::M85() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3a7]"></a>GcodeSuite::M92()</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, m92.o(i._ZN10GcodeSuite3M92Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = GcodeSuite::M92() &rArr; report_M92(bool, signed char) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_per_axis_units(AxisEnum)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[394]"></a>GcodeSuite::M104()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, m104_m109.o(i._ZN10GcodeSuite4M104Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GcodeSuite::M104() &rArr; Planner::autotemp_M104_M109() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[396]"></a>GcodeSuite::M105()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m105.o(i._ZN10GcodeSuite4M105Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GcodeSuite::M105() &rArr; Temperature::print_heater_states(unsigned char) &rArr; [local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[397]"></a>GcodeSuite::M106()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, m106_m107.o(i._ZN10GcodeSuite4M106Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GcodeSuite::M106() &rArr; GCodeParser::byteval(char, unsigned char) &rArr; GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[398]"></a>GcodeSuite::M107()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m106_m107.o(i._ZN10GcodeSuite4M107Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GcodeSuite::M107() &rArr; GCodeParser::byteval(char, unsigned char) &rArr; GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[39b]"></a>GcodeSuite::M108()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m108_m112_m410.o(i._ZN10GcodeSuite4M108Ev))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[395]"></a>GcodeSuite::M109()</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, m104_m109.o(i._ZN10GcodeSuite4M109Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = GcodeSuite::M109() &rArr; Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_heating_message(unsigned char)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[399]"></a>GcodeSuite::M110()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, m110.o(i._ZN10GcodeSuite4M110Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GcodeSuite::M110() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[39a]"></a>GcodeSuite::M111()</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, m111.o(i._ZN10GcodeSuite4M111Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GcodeSuite::M111() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[39c]"></a>GcodeSuite::M112()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m108_m112_m410.o(i._ZN10GcodeSuite4M112Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = GcodeSuite::M112() &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[39e]"></a>GcodeSuite::M113()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, m113.o(i._ZN10GcodeSuite4M113Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GcodeSuite::M113() &rArr; serial_echopair_PGM(const char*, unsigned char) &rArr; Print::print(unsigned char, int) &rArr; Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned char)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3a8]"></a>GcodeSuite::M114()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m114.o(i._ZN10GcodeSuite4M114Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GcodeSuite::M114() &rArr; report_current_position_projected() &rArr; report_logical_position(const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_projected()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3a9]"></a>GcodeSuite::M115()</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, m115.o(i._ZN10GcodeSuite4M115Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GcodeSuite::M115() &rArr; [local to M115_cpp]::cap_line(const char*, bool) &rArr; serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M115_cpp]::cap_line(const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3aa]"></a>GcodeSuite::M117()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, m117.o(i._ZN10GcodeSuite4M117Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GcodeSuite::M117() &rArr; MarlinUI::reset_status(bool) &rArr; MarlinUI::set_status_P(const char*, signed char) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3ab]"></a>GcodeSuite::M118()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, m118.o(i._ZN10GcodeSuite4M118Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GcodeSuite::M118() &rArr; Print::println(const char*) &rArr; Print::println() &rArr; Print::print(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3ac]"></a>GcodeSuite::M119()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m119.o(i._ZN10GcodeSuite4M119Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GcodeSuite::M119() &rArr; Endstops::report_states() &rArr; [local to endstops_cpp]::print_es_state(bool, const char*) &rArr; serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::report_states()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3ad]"></a>GcodeSuite::M120()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m120_m121.o(i._ZN10GcodeSuite4M120Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = GcodeSuite::M120() &rArr; Endstops::enable_globally(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3ae]"></a>GcodeSuite::M121()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m120_m121.o(i._ZN10GcodeSuite4M121Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = GcodeSuite::M121() &rArr; Endstops::enable_globally(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[39f]"></a>GcodeSuite::M140()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, m140_m190.o(i._ZN10GcodeSuite4M140Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GcodeSuite::M140() &rArr; GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetBed(short)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3af]"></a>GcodeSuite::M145()</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, m145.o(i._ZN10GcodeSuite4M145Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GcodeSuite::M145() &rArr; GCodeParser::value_int() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_int()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3a1]"></a>GcodeSuite::M155()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, m155.o(i._ZN10GcodeSuite4M155Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GcodeSuite::M155() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3a0]"></a>GcodeSuite::M190()</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, m140_m190.o(i._ZN10GcodeSuite4M190Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = GcodeSuite::M190() &rArr; Temperature::wait_for_bed(bool) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetBed(short)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3b0]"></a>GcodeSuite::M200()</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, m200-m205.o(i._ZN10GcodeSuite4M200Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GcodeSuite::M200() &rArr; GCodeParser::value_linear_units() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_volumetric_multipliers()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3b1]"></a>GcodeSuite::M201()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, m200-m205.o(i._ZN10GcodeSuite4M201Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GcodeSuite::M201() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_max_acceleration(unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3b2]"></a>GcodeSuite::M203()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, m200-m205.o(i._ZN10GcodeSuite4M203Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GcodeSuite::M203() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_max_feedrate(unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3b3]"></a>GcodeSuite::M204()</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, m200-m205.o(i._ZN10GcodeSuite4M204Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GcodeSuite::M204() &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3b4]"></a>GcodeSuite::M205()</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, m200-m205.o(i._ZN10GcodeSuite4M205Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GcodeSuite::M205() &rArr; GCodeParser::value_linear_units() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_max_jerk(AxisEnum, float)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3b5]"></a>GcodeSuite::M206()</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, m206_m428.o(i._ZN10GcodeSuite4M206Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GcodeSuite::M206() &rArr; report_current_position() &rArr; report_logical_position(const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_home_offset(AxisEnum, float)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M206_report()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3b6]"></a>GcodeSuite::M211()</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, m211.o(i._ZN10GcodeSuite4M211Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GcodeSuite::M211() &rArr; print_xyz(const XYZval&lang;float&rang;&, const char*, const char*) &rArr; print_xyz(float, float, float, const char*, const char*) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_onoff(bool)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(const XYZval&lang;float&rang;&, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3b7]"></a>GcodeSuite::M220()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, m220.o(i._ZN10GcodeSuite4M220Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GcodeSuite::M220() &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3b8]"></a>GcodeSuite::M221()</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, m221.o(i._ZN10GcodeSuite4M221Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GcodeSuite::M221() &rArr; GcodeSuite::get_target_extruder_from_command() &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3b9]"></a>GcodeSuite::M290()</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, m290.o(i._ZN10GcodeSuite4M290Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GcodeSuite::M290() &rArr; GCodeParser::value_axis_units(AxisEnum) &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_mm(AxisEnum, float)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3ba]"></a>GcodeSuite::M300()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, m300.o(i._ZN10GcodeSuite4M300Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = GcodeSuite::M300() &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::ushortval(char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3bb]"></a>GcodeSuite::M301()</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, m301.o(i._ZN10GcodeSuite4M301Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GcodeSuite::M301() &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3bd]"></a>GcodeSuite::M302()</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, m302.o(i._ZN10GcodeSuite4M302Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GcodeSuite::M302() &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3be]"></a>GcodeSuite::M303()</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, m303.o(i._ZN10GcodeSuite4M303Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = GcodeSuite::M303() &rArr; Temperature::PID_autotune(short, heater_id_t, signed char, bool) &rArr; MarlinUI::update() &rArr; MarlinUI::quick_feedback(bool) &rArr; MarlinUI::buzz(long, unsigned short) &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::intval(char, short)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3bc]"></a>GcodeSuite::M304()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, m304.o(i._ZN10GcodeSuite4M304Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GcodeSuite::M304() &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3bf]"></a>GcodeSuite::M400()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m400.o(i._ZN10GcodeSuite4M400Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GcodeSuite::M400() &rArr; Planner::synchronize() &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[39d]"></a>GcodeSuite::M410()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m108_m112_m410.o(i._ZN10GcodeSuite4M410Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GcodeSuite::M410() &rArr; quickstop_stepper() &rArr; sync_plan_position() &rArr; Planner::set_position_mm(float, float, float, float) &rArr; Planner::set_machine_position_mm(float, float, float, float) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3ca]"></a>GcodeSuite::M413()</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, m413.o(i._ZN10GcodeSuite4M413Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GcodeSuite::M413() &rArr; PrintJobRecovery::enable(bool) &rArr; PrintJobRecovery::changed() &rArr; PrintJobRecovery::purge() &rArr; CardReader::removeJobRecoveryFile() &rArr; CardReader::removeFile(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintln_onoff(bool)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::enable(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3c0]"></a>GcodeSuite::M414()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m414.o(i._ZN10GcodeSuite4M414Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GcodeSuite::M414() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3c1]"></a>GcodeSuite::M428()</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, m206_m428.o(i._ZN10GcodeSuite4M428Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = GcodeSuite::M428() &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_alert_status_P(const char*)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_home_offset(AxisEnum, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3c2]"></a>GcodeSuite::M500()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m500-m504.o(i._ZN10GcodeSuite4M500Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = GcodeSuite::M500() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3c3]"></a>GcodeSuite::M501()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m500-m504.o(i._ZN10GcodeSuite4M501Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = GcodeSuite::M501() &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3c4]"></a>GcodeSuite::M502()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m500-m504.o(i._ZN10GcodeSuite4M502Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = GcodeSuite::M502() &rArr; MarlinSettings::reset() &rArr; Endstops::enable_globally(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3c5]"></a>GcodeSuite::M503()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, m500-m504.o(i._ZN10GcodeSuite4M503Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GcodeSuite::M503() &rArr; MarlinSettings::report(bool) &rArr; report_M92(bool, signed char) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3c6]"></a>GcodeSuite::M504()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m500-m504.o(i._ZN10GcodeSuite4M504Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = GcodeSuite::M504() &rArr; MarlinSettings::validate() &rArr; MarlinSettings::_load() &rArr; MarlinSettings::postprocess() &rArr; report_current_position() &rArr; report_logical_position(const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::validate()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3c7]"></a>GcodeSuite::M524()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m524.o(i._ZN10GcodeSuite4M524Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GcodeSuite::M524() &rArr; CardReader::closefile(bool) &rArr; SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[38f]"></a>GcodeSuite::M928()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m928.o(i._ZN10GcodeSuite4M928Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GcodeSuite::M928() &rArr; CardReader::openLogFile(const char*) &rArr; CardReader::openFileWrite(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openLogFile(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3c8]"></a>GcodeSuite::M997()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m997.o(i._ZN10GcodeSuite4M997Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GcodeSuite::M997() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashFirmware(short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3c9]"></a>GcodeSuite::M999()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, m999.o(i._ZN10GcodeSuite4M999Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GcodeSuite::M999() &rArr; GCodeQueue::flush_and_request_resend(serial_index_t) &rArr; Print::println(long, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend(serial_index_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[379]"></a>GcodeSuite::G0_G1()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, g0_g1.o(i._ZN10GcodeSuite5G0_G1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = GcodeSuite::G0_G1() &rArr; GcodeSuite::get_destination_from_command() &rArr; PrintJobRecovery::save(bool, float) &rArr; PrintJobRecovery::write() &rArr; CardReader::openJobRecoveryFile(bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[37a]"></a>GcodeSuite::G2_G3(bool)</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, g2_g3.o(i._ZN10GcodeSuite5G2_G3Eb))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = GcodeSuite::G2_G3(bool) &rArr; plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[381]"></a>GcodeSuite::M0_M1()</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, m0_m1.o(i._ZN10GcodeSuite5M0_M1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = GcodeSuite::M0_M1() &rArr; wait_for_user_response(unsigned, bool) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_user_response(unsigned, bool)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3cb]"></a>GcodeSuite::M1000()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, m1000.o(i._ZN10GcodeSuite5M1000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = GcodeSuite::M1000() &rArr; PrintJobRecovery::resume() &rArr;  GcodeSuite::process_subcommands_now(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_loss_recovery_cancel()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3cc]"></a>GcodeSuite::M1001()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, m1001.o(i._ZN10GcodeSuite5M1001Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = GcodeSuite::M1001() &rArr; GcodeSuite::process_subcommands_now_P(const char*) &rArr;  GcodeSuite::process_parsed_command(bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3d8]"></a>GcodeSuite::dwell(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gcode.o(i._ZN10GcodeSuite5dwellEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = GcodeSuite::dwell(unsigned) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
</UL>

<P><STRONG><a name="[3a5]"></a>GcodeSuite::M18_M84()</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, m17_m18_m84.o(i._ZN10GcodeSuite7M18_M84Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = GcodeSuite::M18_M84() &rArr; Planner::finish_and_disable() &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_e_steppers()
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::finish_and_disable()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[40a]"></a>ManualMove::soon(AxisEnum)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, marlinui.o(i._ZN10ManualMove4soonE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ManualMove::soon(AxisEnum)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
</UL>

<P><STRONG><a name="[40b]"></a>ManualMove::task()</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, marlinui.o(i._ZN10ManualMove4taskEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ManualMove::task() &rArr; Planner::buffer_line(float, float, float, float, float, unsigned char, float) &rArr; Planner::buffer_segment(float, float, float, float, float, unsigned char, float) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float) &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(float, float, float, float, float, unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
</UL>

<P><STRONG><a name="[40c]"></a>SdBaseFile::addCluster()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sdbasefile.o(i._ZN10SdBaseFile10addClusterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
</UL>

<P><STRONG><a name="[347]"></a>SdBaseFile::getDosName(char*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile10getDosNameEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SdBaseFile::getDosName(char*) &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isRoot() const
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::dirName(const directoryEntry&, char*)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const
</UL>

<P><STRONG><a name="[41f]"></a>SdBaseFile::make83Name(const char*, unsigned char*, const char**)</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, sdbasefile.o(i._ZN10SdBaseFile10make83NameEPKcPhPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SdBaseFile::make83Name(const char*, unsigned char*, const char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[411]"></a>SdBaseFile::readDirCache()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile12readDirCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read()
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isDir() const
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[413]"></a>SdBaseFile::addDirCluster()</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sdbasefile.o(i._ZN10SdBaseFile13addDirClusterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addCluster()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::clusterStartBlock(unsigned) const
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[40f]"></a>SdBaseFile::cacheDirEntry(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sdbasefile.o(i._ZN10SdBaseFile13cacheDirEntryEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[418]"></a>SdBaseFile::openCachedEntry(unsigned char, unsigned char)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, sdbasefile.o(i._ZN10SdBaseFile15openCachedEntryEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SdBaseFile::openCachedEntry(unsigned char, unsigned char) &rArr; SdBaseFile::truncate(unsigned) &rArr; SdVolume::freeChain(unsigned) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SdBaseFile_cpp]::DIR_IS_SUBDIR(const directoryEntry*)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SdBaseFile_cpp]::DIR_IS_FILE(const directoryEntry*)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekEnd(int)
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::chainSize(unsigned, unsigned*)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[32a]"></a>SdBaseFile::open(SdBaseFile*, const char*, unsigned char)</STRONG> (Thumb, 204 bytes, Stack size 120 bytes, sdbasefile.o(i._ZN10SdBaseFile4openEPS_PKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::make83Name(const char*, unsigned char*, const char**)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openRoot(SdVolume*)
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isRoot() const
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::~SdBaseFile()
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::SdBaseFile()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::jobRecoverFileExists()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openJobRecoveryFile(bool)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[420]"></a>SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, sdbasefile.o(i._ZN10SdBaseFile4openEPS_PKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDirCache()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[423]"></a>SdBaseFile::read(void*, unsigned short)</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, sdbasefile.o(i._ZN10SdBaseFile4readEPvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::clusterStartBlock(unsigned) const
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::load()
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
</UL>

<P><STRONG><a name="[36a]"></a>SdBaseFile::read()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sdbasefile.o(i._ZN10SdBaseFile4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDirCache()
</UL>

<P><STRONG><a name="[35b]"></a>SdBaseFile::sync()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile4syncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isDir() const
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[329]"></a>SdBaseFile::close()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdbasefile.o(i._ZN10SdBaseFile5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::jobRecoverFileExists()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::write()
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::load()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::~SdBaseFile()
</UL>

<P><STRONG><a name="[425]"></a>SdBaseFile::write(const void*, unsigned short)</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, sdbasefile.o(i._ZN10SdBaseFile5writeEPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SdBaseFile::write(const void*, unsigned short) &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addCluster()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::isEOC(unsigned) const
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::clusterStartBlock(unsigned) const
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isFile() const
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekEnd(int)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const char*)
</UL>

<P><STRONG><a name="[331]"></a>SdBaseFile::remove(SdBaseFile*, const char*)</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, sdbasefile.o(i._ZN10SdBaseFile6removeEPS_PKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SdBaseFile::remove(SdBaseFile*, const char*) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::~SdBaseFile()
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::SdBaseFile()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
</UL>

<P><STRONG><a name="[428]"></a>SdBaseFile::remove()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sdbasefile.o(i._ZN10SdBaseFile6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SdBaseFile::remove() &rArr; SdBaseFile::truncate(unsigned) &rArr; SdVolume::freeChain(unsigned) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
</UL>

<P><STRONG><a name="[352]"></a>SdBaseFile::rewind()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cardreader.o(i._ZN10SdBaseFile6rewindEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SdBaseFile::rewind() &rArr; SdBaseFile::seekSet(unsigned) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByIndex(unsigned short)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countFilesInWorkDir()
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[410]"></a>SdBaseFile::dirName(const directoryEntry&, char*)</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, sdbasefile.o(i._ZN10SdBaseFile7dirNameERK14directoryEntryPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SdBaseFile::dirName(const directoryEntry&, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
</UL>

<P><STRONG><a name="[325]"></a>SdBaseFile::readDir(directoryEntry*, char*)</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, sdbasefile.o(i._ZN10SdBaseFile7readDirEP14directoryEntryPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_checksum(const unsigned char*)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isDir() const
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByIndex(SdFile, unsigned char)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countItems(SdFile)
</UL>

<P><STRONG><a name="[41d]"></a>SdBaseFile::seekEnd(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile7seekEndEi))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[351]"></a>SdBaseFile::seekSet(unsigned)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile7seekSetEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SdBaseFile::seekSet(unsigned) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::write()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M26()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
</UL>

<P><STRONG><a name="[359]"></a>SdBaseFile::openRoot(SdVolume*)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile8openRootEP8SdVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SdBaseFile::openRoot(SdVolume*) &rArr; SdVolume::chainSize(unsigned, unsigned*) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::chainSize(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[41c]"></a>SdBaseFile::truncate(unsigned)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sdbasefile.o(i._ZN10SdBaseFile8truncateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SdBaseFile::truncate(unsigned) &rArr; SdVolume::freeChain(unsigned) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::isEOC(unsigned) const
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isFile() const
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::freeChain(unsigned)
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove()
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[41e]"></a>SdBaseFile::SdBaseFile()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFileC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[5a2]"></a>SdBaseFile::SdBaseFile__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFileC1Ev), UNUSED)

<P><STRONG><a name="[421]"></a>SdBaseFile::~SdBaseFile()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sdbasefile.o(i._ZN10SdBaseFileD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SdBaseFile::~SdBaseFile() &rArr; SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[5a3]"></a>SdBaseFile::~SdBaseFile__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, sdbasefile.o(i._ZN10SdBaseFileD1Ev), UNUSED)

<P><STRONG><a name="[3eb]"></a>GCodeParser::value_byte()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m104_m109.o(i._ZN11GCodeParser10value_byteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
</UL>

<P><STRONG><a name="[3da]"></a>GCodeParser::value_long()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, g28.o(i._ZN11GCodeParser10value_longEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M503()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M999()
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M113()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M414()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M155()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::intval(char, short)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
</UL>

<P><STRONG><a name="[3d2]"></a>GCodeParser::value_float()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m200-m205.o(i._ZN11GCodeParser11value_floatEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M304()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
</UL>

<P><STRONG><a name="[42c]"></a>GCodeParser::value_celsius()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, planner.o(i._ZN11GCodeParser13value_celsiusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GCodeParser::value_celsius() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
</UL>

<P><STRONG><a name="[2a6]"></a>GCodeParser::using_inch_units()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, status_screen_dogm.o(i._ZN11GCodeParser16using_inch_unitsEv))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
</UL>

<P><STRONG><a name="[3e1]"></a>GCodeParser::value_axis_units(AxisEnum)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, g92.o(i._ZN11GCodeParser16value_axis_unitsE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GCodeParser::value_axis_units(AxisEnum) &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
</UL>

<P><STRONG><a name="[3d5]"></a>GCodeParser::value_linear_units()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m200-m205.o(i._ZN11GCodeParser18value_linear_unitsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GCodeParser::value_linear_units() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M204()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
</UL>

<P><STRONG><a name="[3e9]"></a>GCodeParser::value_per_axis_units(AxisEnum)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m92.o(i._ZN11GCodeParser20value_per_axis_unitsE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GCodeParser::value_per_axis_units(AxisEnum) &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
</UL>

<P><STRONG><a name="[380]"></a>GCodeParser::unknown_command_warning()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, parser.o(i._ZN11GCodeParser23unknown_command_warningEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GCodeParser::unknown_command_warning() &rArr; serial_echopair_PGM(const char*, const char*) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3dc]"></a>GCodeParser::seen(char)</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, g28.o(i._ZN11GCodeParser4seenEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GCodeParser::seen(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M304()
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M85()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M503()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M999()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M997()
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1000()
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G27()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M113()
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M110()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M414()
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::ushortval(char, unsigned short)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M26()
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M155()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
</UL>

<P><STRONG><a name="[372]"></a>GCodeParser::parse(char*)</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, parser.o(i._ZN11GCodeParser5parseEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GCodeParser::parse(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::reset()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command()
</UL>

<P><STRONG><a name="[42d]"></a>GCodeParser::reset()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, parser.o(i._ZN11GCodeParser5resetEv))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
</UL>

<P><STRONG><a name="[400]"></a>GCodeParser::intval(char, short)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m303.o(i._ZN11GCodeParser6intvalEcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GCodeParser::intval(char, short) &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
</UL>

<P><STRONG><a name="[3f0]"></a>GCodeParser::byteval(char, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, m106_m107.o(i._ZN11GCodeParser7bytevalEch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GCodeParser::byteval(char, unsigned char) &rArr; GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M107()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
</UL>

<P><STRONG><a name="[3d1]"></a>GCodeParser::seenval(char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, g28.o(i._ZN11GCodeParser7seenvalEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GCodeParser::seenval(char) &rArr; GCodeParser::seen(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M204()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M145()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::intval(char, short)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
</UL>

<P><STRONG><a name="[3fe]"></a>GCodeParser::ushortval(char, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m300.o(i._ZN11GCodeParser9ushortvalEct))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GCodeParser::ushortval(char, unsigned short) &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M300()
</UL>

<P><STRONG><a name="[3f7]"></a>GCodeParser::value_int()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, m145.o(i._ZN11GCodeParser9value_intEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GCodeParser::value_int() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M145()
</UL>

<P><STRONG><a name="[42e]"></a>Sdioc_Class::init()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sdio_hal.o(i._ZN11Sdioc_Class4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Sdioc_Class::init() &rArr; SDCARD_Init &rArr; [local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*) &rArr; SDMMC_Cmd6_SwitchFunc &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steup_sdio
</UL>

<P><STRONG><a name="[1c4]"></a>Sdioc_Class::read(unsigned, unsigned short, unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sdio_hal.o(i._ZN11Sdioc_Class4readEjtPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Sdioc_Class::read(unsigned, unsigned short, unsigned char*) &rArr; SDCARD_ReadBlocks &rArr; [local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short) &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock_DMA
</UL>

<P><STRONG><a name="[1c6]"></a>Sdioc_Class::write(unsigned, unsigned short, const unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sdio_hal.o(i._ZN11Sdioc_Class5writeEjtPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Sdioc_Class::write(unsigned, unsigned short, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlockDMA
</UL>

<P><STRONG><a name="[42f]"></a>Sdioc_Class::Sdioc_Class(M4_SDIOC_TypeDef*)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sdio_hal.o(i._ZN11Sdioc_ClassC1EP16M4_SDIOC_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Sdioc_Class::Sdioc_Class(M4_SDIOC_TypeDef*) &rArr; PORT_SetFuncMapp &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFuncMapp
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steup_sdio
</UL>

<P><STRONG><a name="[5a4]"></a>Sdioc_Class::Sdioc_Class__sub_object(M4_SDIOC_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, sdio_hal.o(i._ZN11Sdioc_ClassC1EP16M4_SDIOC_TypeDef), UNUSED)

<P><STRONG><a name="[562]"></a>Sdioc_Class::~Sdioc_Class()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdio_hal.o(i._ZN11Sdioc_ClassD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steup_sdio
</UL>

<P><STRONG><a name="[5a5]"></a>Sdioc_Class::~Sdioc_Class__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sdio_hal.o(i._ZN11Sdioc_ClassD1Ev), UNUSED)

<P><STRONG><a name="[430]"></a>Temperature::_temp_error(heater_id_t, const char*, const char*)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, temperature.o(i._ZN11Temperature11_temp_errorE11heater_id_tPKcS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loud_kill(const char*, heater_id_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::min_temp_error(heater_id_t)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::max_temp_error(heater_id_t)
</UL>

<P><STRONG><a name="[26a]"></a>Temperature::lcd_preheat(unsigned char, signed char, signed char)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, menu_temperature.o(i._ZN11Temperature11lcd_preheatEhaa))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Temperature::lcd_preheat(unsigned char, signed char, signed char) &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::hotend_max_target(unsigned char)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_preheat_end_m()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()::[lambda() (instance 3)]::_FUN()
</UL>

<P><STRONG><a name="[401]"></a>Temperature::PID_autotune(short, heater_id_t, signed char, bool)</STRONG> (Thumb, 1598 bytes, Stack size 144 bytes, temperature.o(i._ZN11Temperature12PID_autotuneEs11heater_id_tab))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = Temperature::PID_autotune(short, heater_id_t, signed char, bool) &rArr; MarlinUI::update() &rArr; MarlinUI::quick_feedback(bool) &rArr; MarlinUI::buzz(long, unsigned short) &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, long)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_idletask()
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
</UL>

<P><STRONG><a name="[3f6]"></a>Temperature::setTargetBed(short)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m140_m190.o(i._ZN11Temperature12setTargetBedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Temperature::setTargetBed(short) &rArr; Temperature::start_watching_bed()
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
</UL>

<P><STRONG><a name="[3f8]"></a>Temperature::wait_for_bed(bool)</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, temperature.o(i._ZN11Temperature12wait_for_bedEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = Temperature::wait_for_bed(bool) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to temperature_cpp]::ABS&lang;float&rang;(T1)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;long&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
</UL>

<P><STRONG><a name="[1fc]"></a>Temperature::manage_heater()</STRONG> (Thumb, 568 bytes, Stack size 40 bytes, temperature.o(i._ZN11Temperature13manage_heaterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::get_pid_output_hotend(unsigned char)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::get_pid_output_bed()
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::max_temp_error(heater_id_t)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_line_done(unsigned char&, char(&)[96], int&)
</UL>

<P><STRONG><a name="[216]"></a>Temperature::set_fan_speed(unsigned char, unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, temperature.o(i._ZN11Temperature13set_fan_speedEht))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Temperature::set_fan_speed(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M107()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_fan_update()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cooldown()
</UL>

<P><STRONG><a name="[30a]"></a>Temperature::AutoReportTemp::report()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, temperature.o(i._ZN11Temperature14AutoReportTemp6reportEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Temperature::AutoReportTemp::report() &rArr; Temperature::print_heater_states(unsigned char) &rArr; [local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>

<P><STRONG><a name="[43e]"></a>Temperature::getHeaterPower(heater_id_t)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature14getHeaterPowerE11heater_id_t))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>

<P><STRONG><a name="[435]"></a>Temperature::max_temp_error(heater_id_t)</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature14max_temp_errorE11heater_id_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Temperature::max_temp_error(heater_id_t) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::readings_ready()
</UL>

<P><STRONG><a name="[439]"></a>Temperature::min_temp_error(heater_id_t)</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature14min_temp_errorE11heater_id_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Temperature::min_temp_error(heater_id_t) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::readings_ready()
</UL>

<P><STRONG><a name="[43a]"></a>Temperature::readings_ready()</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, temperature.o(i._ZN11Temperature14readings_readyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Temperature::readings_ready() &rArr; Temperature::min_temp_error(heater_id_t) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::update_raw_temperatures()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::min_temp_error(heater_id_t)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::max_temp_error(heater_id_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>

<P><STRONG><a name="[3ec]"></a>Temperature::setTargetHotend(short, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m104_m109.o(i._ZN11Temperature15setTargetHotendEsh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Temperature::setTargetHotend(short, unsigned char) &rArr; Temperature::start_watching_hotend(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
</UL>

<P><STRONG><a name="[3f2]"></a>Temperature::wait_for_hotend(unsigned char, bool)</STRONG> (Thumb, 356 bytes, Stack size 72 bytes, temperature.o(i._ZN11Temperature15wait_for_hotendEhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::CompletedMaticHate()
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to temperature_cpp]::ABS&lang;float&rang;(T1)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;long&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
</UL>

<P><STRONG><a name="[26e]"></a>Temperature::hotend_max_target(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu_advanced.o(i._ZN11Temperature17hotend_max_targetEh))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
</UL>

<P><STRONG><a name="[438]"></a>Temperature::get_pid_output_bed()</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, temperature.o(i._ZN11Temperature18get_pid_output_bedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Temperature::get_pid_output_bed()
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>

<P><STRONG><a name="[b8]"></a>Temperature::start_watching_bed()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, temperature.o(i._ZN11Temperature18start_watching_bedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Temperature::start_watching_bed()
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetBed(short)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu_temperature.o(i._Z16menu_temperaturev)
<LI> menu_tune.o(i._Z9menu_tunev)
</UL>
<P><STRONG><a name="[436]"></a>Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short)</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, temperature.o(i._ZN11Temperature18tr_state_machine_t3runEff11heater_id_tts))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>

<P><STRONG><a name="[116]"></a>Temperature::tr_state_machine_t::tr_state_machine_t()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature18tr_state_machine_tC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> temperature.o(i.__sti___15_temperature_cpp_ca4fe824)
</UL>
<P><STRONG><a name="[5a6]"></a>Temperature::tr_state_machine_t::tr_state_machine_t__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature18tr_state_machine_tC1Ev), UNUSED)

<P><STRONG><a name="[217]"></a>Temperature::disable_all_heaters()</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, temperature.o(i._ZN11Temperature19disable_all_heatersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Temperature::disable_all_heaters() &rArr; Temperature::start_watching_bed()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::abort_load()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cooldown()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loud_kill(const char*, heater_id_t)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>

<P><STRONG><a name="[3ef]"></a>Temperature::print_heater_states(unsigned char)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, temperature.o(i._ZN11Temperature19print_heater_statesEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Temperature::print_heater_states(unsigned char) &rArr; [local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::getHeaterPower(heater_id_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::AutoReportTemp::report()
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M105()
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
</UL>

<P><STRONG><a name="[3f1]"></a>Temperature::set_heating_message(unsigned char)</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature19set_heating_messageEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Temperature::set_heating_message(unsigned char) &rArr; MarlinUI::status_printf_P(unsigned char, const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_printf_P(unsigned char, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
</UL>

<P><STRONG><a name="[3ed]"></a>Temperature::auto_job_check_timer(bool, bool)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, temperature.o(i._ZN11Temperature20auto_job_check_timerEbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Temperature::auto_job_check_timer(bool, bool) &rArr; MarlinUI::reset_status(bool) &rArr; MarlinUI::set_status_P(const char*, signed char) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_over_threshold()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
</UL>

<P><STRONG><a name="[442]"></a>Temperature::analog_to_celsius_bed(short)</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, temperature.o(i._ZN11Temperature21analog_to_celsius_bedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Temperature::analog_to_celsius_bed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
</UL>

<P><STRONG><a name="[437]"></a>Temperature::get_pid_output_hotend(unsigned char)</STRONG> (Thumb, 254 bytes, Stack size 12 bytes, temperature.o(i._ZN11Temperature21get_pid_output_hotendEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Temperature::get_pid_output_hotend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>

<P><STRONG><a name="[431]"></a>Temperature::start_watching_hotend(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, temperature.o(i._ZN11Temperature21start_watching_hotendEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Temperature::start_watching_hotend(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_task()
</UL>

<P><STRONG><a name="[440]"></a>Temperature::auto_job_over_threshold()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature23auto_job_over_thresholdEv))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
</UL>

<P><STRONG><a name="[43b]"></a>Temperature::update_raw_temperatures()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature23update_raw_temperaturesEv))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::readings_ready()
</UL>

<P><STRONG><a name="[441]"></a>Temperature::analog_to_celsius_hotend(short, unsigned char)</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, temperature.o(i._ZN11Temperature24analog_to_celsius_hotendEsh))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Temperature::analog_to_celsius_hotend(short, unsigned char) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
</UL>

<P><STRONG><a name="[432]"></a>Temperature::updateTemperaturesFromRawValues()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, temperature.o(i._ZN11Temperature31updateTemperaturesFromRawValuesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Temperature::updateTemperaturesFromRawValues() &rArr; Temperature::analog_to_celsius_hotend(short, unsigned char) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(short, unsigned char)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_bed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
</UL>

<P><STRONG><a name="[293]"></a>Temperature::isr()</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, temperature.o(i._ZN11Temperature3isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Temperature::isr() &rArr; Temperature::readings_ready() &rArr; Temperature::min_temp_error(heater_id_t) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::step_axis(AxisEnum)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_adc_start_conversion(unsigned char)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update_buttons()
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::poll()
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftPWM::add(unsigned char, unsigned char)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::readings_ready()
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TEMP_TIMER_ISR()
</UL>

<P><STRONG><a name="[447]"></a>Temperature::init()</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, temperature.o(i._ZN11Temperature4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Temperature::init() &rArr; Temperature::analog_to_celsius_hotend(short, unsigned char) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_start(unsigned char, unsigned)
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_adc_init()
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(unsigned char, WiringPinMode)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(short, unsigned char)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_bed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[1ec]"></a>MenuItemBase::_draw(bool, unsigned char, const char*, char, char)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, marlinui_dogm.o(i._ZN12MenuItemBase5_drawEbhPKccc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to marlinui_DOGM_cpp]::mark_as_selected(unsigned char, bool)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned char, unsigned char, unsigned)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_filament()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_gcode::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_motion()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
</UL>

<P><STRONG><a name="[29a]"></a>MenuItem_bool::draw(bool, unsigned char, const char*, bool*, ...)</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, menu_configuration.o(i._ZN13MenuItem_bool4drawEbhPKcPbz))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MenuItem_bool::draw(bool, unsigned char, const char*, bool*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_filament()
</UL>

<P><STRONG><a name="[2d2]"></a>MenuItem_bool::action(const char*, bool*, void(*)())</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_advanced.o(i._ZN13MenuItem_bool6actionEPKcPbPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_filament()
</UL>

<P><STRONG><a name="[14e]"></a>HardwareSerial::read()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hardwareserial.o(i._ZN14HardwareSerial4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardwareSerial::read() &rArr; [local to HardwareSerial_cpp]::usart_data_available(usart_dev*) &rArr; [local to HardwareSerial_cpp]::rb_full_count(ring_buffer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HardwareSerial_cpp]::usart_data_available(usart_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, serial_index_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[44c]"></a>HardwareSerial::begin(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HardwareSerial::begin(unsigned) &rArr; HardwareSerial::begin(unsigned, unsigned char) &rArr; usart_set_baud_rate &rArr; USART_SetBaudrate &rArr; [local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[44d]"></a>HardwareSerial::begin(unsigned, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HardwareSerial::begin(unsigned, unsigned char) &rArr; usart_set_baud_rate &rArr; USART_SetBaudrate &rArr; [local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFuncMapp
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_set_baud_rate
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned)
</UL>

<P><STRONG><a name="[14f]"></a>HardwareSerial::flush()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial5flushEv))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend(serial_index_t)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[14a]"></a>HardwareSerial::write(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, hardwareserial.o(i._ZN14HardwareSerial5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HardwareSerial::write(unsigned char) &rArr; usart_tx &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[3fc]"></a>HardwareSerial::write(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m221.o(i._ZN14HardwareSerial5writeEi))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M115_cpp]::cap_line(const char*, bool)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)
</UL>

<P><STRONG><a name="[3cd]"></a>HardwareSerial::msgDone()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial7msgDoneEv))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[14d]"></a>HardwareSerial::available()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hardwareserial.o(i._ZN14HardwareSerial9availableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardwareSerial::available() &rArr; [local to HardwareSerial_cpp]::usart_data_available(usart_dev*) &rArr; [local to HardwareSerial_cpp]::rb_full_count(ring_buffer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HardwareSerial_cpp]::usart_data_available(usart_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[557]"></a>HardwareSerial::connected()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial9connectedEv))
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[546]"></a>HardwareSerial::HardwareSerial(usart_dev*, unsigned char, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hardwareserial.o(i._ZN14HardwareSerialC1EP9usart_devhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardwareSerial::HardwareSerial(usart_dev*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_board_gpio_c_PIN_MAP
</UL>

<P><STRONG><a name="[5a7]"></a>HardwareSerial::HardwareSerial__sub_object(usart_dev*, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, hardwareserial.o(i._ZN14HardwareSerialC1EP9usart_devhh), UNUSED)

<P><STRONG><a name="[464]"></a>MarlinSettings::size_error(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings10size_errorEt))
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[452]"></a>MarlinSettings::EEPROM_READ(unsigned char*, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, settings.o(i._ZN14MarlinSettings11EEPROM_READEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MarlinSettings::EEPROM_READ(unsigned char*, unsigned) &rArr; PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool) &rArr; eeprom_read_byte(unsigned char*) &rArr; BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[454]"></a>MarlinSettings::postprocess()</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, settings.o(i._ZN14MarlinSettings11postprocessEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = MarlinSettings::postprocess() &rArr; report_current_position() &rArr; report_logical_position(const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_workspace_offset(AxisEnum)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_volumetric_multipliers()
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_software_endstops(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[457]"></a>MarlinSettings::EEPROM_START(int)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, settings.o(i._ZN14MarlinSettings12EEPROM_STARTEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MarlinSettings::EEPROM_START(int) &rArr; PersistentStore::access_start() &rArr; eeprom_init() &rArr; BL24CXX::init() &rArr; IIC::init() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::access_start()
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[405]"></a>MarlinSettings::load()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, settings.o(i._ZN14MarlinSettings4loadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::validate()
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M501()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::load_settings()
</UL>

<P><STRONG><a name="[404]"></a>MarlinSettings::save()</STRONG> (Thumb, 1078 bytes, Stack size 216 bytes, settings.o(i._ZN14MarlinSettings4saveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::access_finish()
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;short&rang;(const T1&)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;unsigned char&rang;(const T1&)
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;float&rang;(const T1&)
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;bool&rang;(const T1&)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;signed char&rang;(const T1&)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;char[4]&rang;(const T1&)
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;XYZval&lang;float&rang;&rang;(const T1&)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;XYval&lang;float&rang;&rang;(const T1&)
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;PID_t&rang;(const T1&)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::EEPROM_START(int)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::size_error(unsigned short)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M500()
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::store_settings()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_eeprom()
</UL>

<P><STRONG><a name="[459]"></a>MarlinSettings::_load()</STRONG> (Thumb, 1296 bytes, Stack size 176 bytes, settings.o(i._ZN14MarlinSettings5_loadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = MarlinSettings::_load() &rArr; MarlinSettings::postprocess() &rArr; report_current_position() &rArr; report_logical_position(const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::access_finish()
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_stepper_drivers()
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to settings_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ_ALWAYS&lang;unsigned char&rang;(T1&)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;short&rang;(T1&)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;unsigned char&rang;(T1&)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;float&rang;(T1&)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;bool&rang;(T1&)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;signed char&rang;(T1&)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;XYZval&lang;float&rang;&rang;(T1&)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;XYval&lang;float&rang;&rang;(T1&)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;PID_t&rang;(T1&)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::isnan(float)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::EEPROM_START(int)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::EEPROM_READ(unsigned char*, unsigned)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::size_error(unsigned short)
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::validate()
</UL>

<P><STRONG><a name="[406]"></a>MarlinSettings::reset()</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, settings.o(i._ZN14MarlinSettings5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = MarlinSettings::reset() &rArr; Endstops::enable_globally(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::enable(bool)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_stepper_drivers()
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to settings_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M502()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_settings()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_eeprom()
</UL>

<P><STRONG><a name="[407]"></a>MarlinSettings::report(bool)</STRONG> (Thumb, 774 bytes, Stack size 32 bytes, settings.o(i._ZN14MarlinSettings6reportEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MarlinSettings::report(bool) &rArr; report_M92(bool, signed char) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned char)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to settings_cpp]::config_heading(bool, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M503()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_eeprom()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[408]"></a>MarlinSettings::validate()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, settings.o(i._ZN14MarlinSettings8validateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = MarlinSettings::validate() &rArr; MarlinSettings::_load() &rArr; MarlinSettings::postprocess() &rArr; report_current_position() &rArr; report_logical_position(const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M504()
</UL>

<P><STRONG><a name="[206]"></a>MenuItem_gcode::draw(bool, unsigned char, const char*, ...)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu_main.o(i._ZN14MenuItem_gcode4drawEbhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MenuItem_gcode::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_motion()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
</UL>

<P><STRONG><a name="[1ed]"></a>MenuItem_button::draw(bool, unsigned char, const char*, ...)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu_advanced.o(i._ZN15MenuItem_button4drawEbhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MenuItem_button::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_job_recovery()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_motion()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
</UL>

<P><STRONG><a name="[1f2]"></a>MenuItem_sdbase::draw(bool, unsigned char, const char*, CardReader&, bool)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, marlinui_dogm.o(i._ZN15MenuItem_sdbase4drawEbhPKcR10CardReaderb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MenuItem_sdbase::draw(bool, unsigned char, const char*, CardReader&, bool) &rArr; lcd_put_u8str_max(const char*, unsigned short) &rArr; uxg_DrawUtf8Str(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to marlinui_DOGM_cpp]::mark_as_selected(unsigned char, bool)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max(const char*, unsigned short)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::scrolled_filename(CardReader&, unsigned char, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
</UL>

<P><STRONG><a name="[265]"></a>MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, marlinui_dogm.o(i._ZN15MenuItem_static4drawEhPKchS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to marlinui_DOGM_cpp]::mark_as_selected(unsigned char, bool)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max(const char*, unsigned short)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_strlen_P(const char*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_strlen(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_job_recovery()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::synchronize(const char*)::[lambda() (instance 1)]::_FUN()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_thermistors()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_printer()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_board()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
</UL>

<P><STRONG><a name="[45c]"></a>PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, eeprom_bl24cxx.o(i._ZN15PersistentStore10write_dataERiPKhjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16(unsigned short*, const void*, unsigned short)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte(unsigned char*, unsigned char)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;short&rang;(const T1&)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;unsigned char&rang;(const T1&)
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;float&rang;(const T1&)
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;bool&rang;(const T1&)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;signed char&rang;(const T1&)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;char[4]&rang;(const T1&)
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;XYZval&lang;float&rang;&rang;(const T1&)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;XYval&lang;float&rang;&rang;(const T1&)
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;PID_t&rang;(const T1&)
</UL>

<P><STRONG><a name="[458]"></a>PersistentStore::access_start()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eeprom_bl24cxx.o(i._ZN15PersistentStore12access_startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PersistentStore::access_start() &rArr; eeprom_init() &rArr; BL24CXX::init() &rArr; IIC::init() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::EEPROM_START(int)
</UL>

<P><STRONG><a name="[465]"></a>PersistentStore::access_finish()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eeprom_bl24cxx.o(i._ZN15PersistentStore13access_finishEv))
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[453]"></a>PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, eeprom_bl24cxx.o(i._ZN15PersistentStore9read_dataERiPhjPtb))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool) &rArr; eeprom_read_byte(unsigned char*) &rArr; BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16(unsigned short*, const void*, unsigned short)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ_ALWAYS&lang;unsigned char&rang;(T1&)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;short&rang;(T1&)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;unsigned char&rang;(T1&)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;float&rang;(T1&)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;bool&rang;(T1&)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;signed char&rang;(T1&)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;XYZval&lang;float&rang;&rang;(T1&)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;XYval&lang;float&rang;&rang;(T1&)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;PID_t&rang;(T1&)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::EEPROM_READ(unsigned char*, unsigned)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[476]"></a>MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, menu.o(i._ZN16MenuEditItemBase11edit_screenEPFPKciEPFvPviE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::edit_screen()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::edit_screen()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::edit_screen()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::edit_screen()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::edit_screen()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::edit_screen()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::edit_screen()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::edit_screen()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::edit_screen()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::edit_screen()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::edit_screen()
</UL>

<P><STRONG><a name="[229]"></a>MenuEditItemBase::draw_edit_screen(const char*, const char*)</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, marlinui_dogm.o(i._ZN16MenuEditItemBase16draw_edit_screenEPKcS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max(const char*, unsigned short)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_moveto(unsigned char, unsigned char)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned char, unsigned char, unsigned)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_strlen_P(const char*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_strlen(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep(AxisEnum, const char*)
</UL>

<P><STRONG><a name="[274]"></a>MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)</STRONG> (Thumb, 68 bytes, Stack size 36 bytes, menu.o(i._ZN16MenuEditItemBase16goto_edit_screenEPKcPviitPFvvES4_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::save_previous_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::save_previous_screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::action(const char*, unsigned*, unsigned, unsigned, void(*)(), bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_filament()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
</UL>

<P><STRONG><a name="[2e8]"></a>MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, marlinui_dogm.o(i._ZN16MenuEditItemBase4drawEbhPKcS1_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to marlinui_DOGM_cpp]::mark_as_selected(unsigned char, bool)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max_P(const char*, unsigned short)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max(const char*, unsigned short)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_moveto(unsigned char, unsigned char)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_GetUtf8StrPixelWidthP(_u8g_t*, const char*)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_GetUtf8StrPixelWidth(_u8g_t*, const char*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_strlen_P(const char*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_strlen(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_bool::draw(bool, unsigned char, const char*, bool*, ...)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::draw(bool, unsigned char, const char*, unsigned*, ...)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
</UL>

<P><STRONG><a name="[477]"></a>MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, menu.o(i._ZN16MenuItem_confirm13select_screenEPKcS1_PFvvES3_S1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*) &rArr; wrap_string_P(unsigned char&, unsigned char&, const char*, bool) &rArr; _wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update_selection()
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()::[lambda() (instance 3)]::operator ()() const
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()::[lambda() (instance 1)]::operator ()() const
</UL>

<P><STRONG><a name="[479]"></a>MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, marlinui_dogm.o(i._ZN16MenuItem_confirm18draw_select_screenEPKcS1_bS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*) &rArr; wrap_string_P(unsigned char&, unsigned char&, const char*, bool) &rArr; _wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_boxed_string(unsigned char, unsigned char, const char*, bool)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_strlen_P(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[2d8]"></a>MenuItem_confirm::draw(bool, unsigned char, const char*, ...)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu_advanced.o(i._ZN16MenuItem_confirm4drawEbhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MenuItem_confirm::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
</UL>

<P><STRONG><a name="[205]"></a>MenuItem_submenu::draw(bool, unsigned char, const char*, ...)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu_advanced.o(i._ZN16MenuItem_submenu4drawEbhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MenuItem_submenu::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_motion()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
</UL>

<P><STRONG><a name="[204]"></a>MenuItem_submenu::action(const char*, void(*)())</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, menu_advanced.o(i._ZN16MenuItem_submenu6actionEPKcPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MenuItem_submenu::action(const char*, void(*)()) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::save_previous_screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_motion()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
</UL>

<P><STRONG><a name="[356]"></a>PrintJobRecovery::init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerloss.o(i._ZN16PrintJobRecovery4initEv))
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeJobRecoveryFile()
</UL>

<P><STRONG><a name="[47b]"></a>PrintJobRecovery::load()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, powerloss.o(i._ZN16PrintJobRecovery4loadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = PrintJobRecovery::load() &rArr; CardReader::jobRecoverFileExists() &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::jobRecoverFileExists()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openJobRecoveryFile(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::check()
</UL>

<P><STRONG><a name="[3d4]"></a>PrintJobRecovery::save(bool, float)</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, powerloss.o(i._ZN16PrintJobRecovery4saveEbf))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = PrintJobRecovery::save(bool, float) &rArr; PrintJobRecovery::write() &rArr; CardReader::openJobRecoveryFile(bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::write()
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::changed()
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M25()
</UL>

<P><STRONG><a name="[339]"></a>PrintJobRecovery::check()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, powerloss.o(i._ZN16PrintJobRecovery5checkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = PrintJobRecovery::check() &rArr; CardReader::autofile_begin() &rArr; CardReader::autofile_check() &rArr; CardReader::fileExists(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_begin()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::load()
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
</UL>

<P><STRONG><a name="[2ff]"></a>PrintJobRecovery::purge()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, powerloss.o(i._ZN16PrintJobRecovery5purgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = PrintJobRecovery::purge() &rArr; CardReader::removeJobRecoveryFile() &rArr; CardReader::removeFile(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeJobRecoveryFile()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::changed()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::check()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_loss_recovery_cancel()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::media_changed(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[47c]"></a>PrintJobRecovery::write()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, powerloss.o(i._ZN16PrintJobRecovery5writeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = PrintJobRecovery::write() &rArr; CardReader::openJobRecoveryFile(bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openJobRecoveryFile(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
</UL>

<P><STRONG><a name="[402]"></a>PrintJobRecovery::enable(bool)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerloss.o(i._ZN16PrintJobRecovery6enableEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = PrintJobRecovery::enable(bool) &rArr; PrintJobRecovery::changed() &rArr; PrintJobRecovery::purge() &rArr; CardReader::removeJobRecoveryFile() &rArr; CardReader::removeFile(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::changed()
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
</UL>

<P><STRONG><a name="[409]"></a>PrintJobRecovery::resume()</STRONG> (Thumb, 478 bytes, Stack size 160 bytes, powerloss.o(i._ZN16PrintJobRecovery6resumeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + In Cycle
<LI>Call Chain = PrintJobRecovery::resume() &rArr;  GcodeSuite::process_subcommands_now(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_workspace_offset(AxisEnum)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89sprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1000()
</UL>

<P><STRONG><a name="[c0]"></a>PrintJobRecovery::changed()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, powerloss.o(i._ZN16PrintJobRecovery7changedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = PrintJobRecovery::changed() &rArr; PrintJobRecovery::purge() &rArr; CardReader::removeJobRecoveryFile() &rArr; CardReader::removeFile(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::enable(bool)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(i._Z18menu_configurationv)
</UL>
<P><STRONG><a name="[3e3]"></a>PrintJobRecovery::prepare()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerloss.o(i._ZN16PrintJobRecovery7prepareEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PrintJobRecovery::prepare() &rArr; CardReader::getAbsFilename(char*) &rArr; CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const &rArr; SdBaseFile::getDosName(char*) &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::getAbsFilename(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
</UL>

<P><STRONG><a name="[152]"></a>DiskIODriver_SDIO::writeBlock(unsigned, const unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cardreader.o(i._ZN17DiskIODriver_SDIO10writeBlockEjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DiskIODriver_SDIO::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; Sdioc_Class::write(unsigned, unsigned short, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlock(unsigned, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(.constdata__ZTV17DiskIODriver_SDIO)
</UL>
<P><STRONG><a name="[150]"></a>DiskIODriver_SDIO::init(unsigned char, signed char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cardreader.o(i._ZN17DiskIODriver_SDIO4initEha))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DiskIODriver_SDIO::init(unsigned char, signed char) &rArr; SDIO_Init() &rArr; steup_sdio &rArr; Sdioc_Class::init() &rArr; SDCARD_Init &rArr; [local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*) &rArr; SDMMC_Cmd6_SwitchFunc &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(.constdata__ZTV17DiskIODriver_SDIO)
</UL>
<P><STRONG><a name="[151]"></a>DiskIODriver_SDIO::readBlock(unsigned, unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cardreader.o(i._ZN17DiskIODriver_SDIO9readBlockEjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = DiskIODriver_SDIO::readBlock(unsigned, unsigned char*) &rArr; SDIO_ReadBlock(unsigned, unsigned char*) &rArr; SDIO_ReadBlock_DMA &rArr; Sdioc_Class::read(unsigned, unsigned short, unsigned char*) &rArr; SDCARD_ReadBlocks &rArr; [local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short) &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock(unsigned, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(.constdata__ZTV17DiskIODriver_SDIO)
</UL>
<P><STRONG><a name="[47f]"></a>MenuEditItemInfo_int3::strfunc(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_advanced.o(i._ZN21MenuEditItemInfo_int37strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MenuEditItemInfo_int3::strfunc(float) &rArr; i16tostr3rj(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i16tostr3rj(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::to_string(int)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...)
</UL>

<P><STRONG><a name="[49a]"></a>MenuEditItemInfo_float3::strfunc(float)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, menu_advanced.o(i._ZN23MenuEditItemInfo_float37strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MenuEditItemInfo_float3::strfunc(float) &rArr; i16tostr3rj(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i16tostr3rj(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::to_string(int)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[49b]"></a>MenuEditItemInfo_float5::strfunc(float)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_advanced.o(i._ZN23MenuEditItemInfo_float57strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuEditItemInfo_float5::strfunc(float) &rArr; ftostr5rj(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr5rj(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::to_string(int)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[49c]"></a>MenuEditItemInfo_float43::strfunc(float)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, menu_advanced.o(i._ZN24MenuEditItemInfo_float437strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuEditItemInfo_float43::strfunc(float) &rArr; ftostr43sign(float, char) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr43sign(float, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::to_string(int)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[49d]"></a>MenuEditItemInfo_float51::strfunc(float)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_advanced.o(i._ZN24MenuEditItemInfo_float517strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuEditItemInfo_float51::strfunc(float) &rArr; ftostr51rj(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr51rj(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::to_string(int)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[49e]"></a>MenuEditItemInfo_percent::strfunc(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_configuration.o(i._ZN24MenuEditItemInfo_percent7strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MenuEditItemInfo_percent::strfunc(float) &rArr; ui8tostr4pctrj(unsigned char) &rArr; pcttostrpctrj(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui8tostr4pctrj(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::to_string(int)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
</UL>

<P><STRONG><a name="[49f]"></a>MenuEditItemInfo_long5_25::strfunc(float)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu_advanced.o(i._ZN25MenuEditItemInfo_long5_257strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuEditItemInfo_long5_25::strfunc(float) &rArr; ftostr5rj(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr5rj(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::to_string(int)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::draw(bool, unsigned char, const char*, unsigned*, ...)
</UL>

<P><STRONG><a name="[4a0]"></a>MenuEditItemInfo_float5_25::strfunc(float)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_advanced.o(i._ZN26MenuEditItemInfo_float5_257strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuEditItemInfo_float5_25::strfunc(float) &rArr; ftostr5rj(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr5rj(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::to_string(int)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[4a1]"></a>MenuEditItemInfo_float42_52::strfunc(float)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_advanced.o(i._ZN27MenuEditItemInfo_float42_527strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MenuEditItemInfo_float42_52::strfunc(float) &rArr; ftostr42_52(float) &rArr; ftostr52(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr42_52(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::to_string(int)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[4a2]"></a>MenuEditItemInfo_float41sign::strfunc(float)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_advanced.o(i._ZN28MenuEditItemInfo_float41sign7strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuEditItemInfo_float41sign::strfunc(float) &rArr; ftostr41sign(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr41sign(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::to_string(int)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[4a3]"></a>MenuEditItemInfo_float52sign::strfunc(float)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_advanced.o(i._ZN28MenuEditItemInfo_float52sign7strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuEditItemInfo_float52sign::strfunc(float) &rArr; ftostr52sign(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr52sign(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::to_string(int)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[4c3]"></a>IIC::ack()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bl24cxx.o(i._ZN3IIC3ackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IIC::ack() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
</UL>

<P><STRONG><a name="[4c4]"></a>IIC::init()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bl24cxx.o(i._ZN3IIC4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IIC::init() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::init()
</UL>

<P><STRONG><a name="[4c5]"></a>IIC::nAck()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bl24cxx.o(i._ZN3IIC4nAckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
</UL>

<P><STRONG><a name="[4c6]"></a>IIC::stop()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bl24cxx.o(i._ZN3IIC4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IIC::stop() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::writeOneByte(unsigned short, unsigned char)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::readOneByte(unsigned short)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
</UL>

<P><STRONG><a name="[4c7]"></a>IIC::start()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bl24cxx.o(i._ZN3IIC5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IIC::start() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::writeOneByte(unsigned short, unsigned char)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::readOneByte(unsigned short)
</UL>

<P><STRONG><a name="[4c8]"></a>IIC::wait_ack()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bl24cxx.o(i._ZN3IIC8wait_ackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IIC::wait_ack() &rArr; IIC::stop() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::stop()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::writeOneByte(unsigned short, unsigned char)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::readOneByte(unsigned short)
</UL>

<P><STRONG><a name="[4c9]"></a>IIC::read_byte(unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bl24cxx.o(i._ZN3IIC9read_byteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::nAck()
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::ack()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::readOneByte(unsigned short)
</UL>

<P><STRONG><a name="[4ca]"></a>IIC::send_byte(unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bl24cxx.o(i._ZN3IIC9send_byteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IIC::send_byte(unsigned char) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::writeOneByte(unsigned short, unsigned char)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::readOneByte(unsigned short)
</UL>

<P><STRONG><a name="[4cd]"></a>Print::printFloat(double, unsigned char)</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, print.o(i._ZN5Print10printFloatEdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
</UL>

<P><STRONG><a name="[4d1]"></a>Print::printNumber(unsigned long long, unsigned char)</STRONG> (Thumb, 144 bytes, Stack size 96 bytes, print.o(i._ZN5Print11printNumberEyh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, int)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
</UL>

<P><STRONG><a name="[2b3]"></a>Print::print(const char*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;char*&rang;(T1)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[284]"></a>Print::print(char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar_max(unsigned, unsigned short)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[2b4]"></a>Print::print(double, int)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, print.o(i._ZN5Print5printEdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_PRINT&lang;float, int&rang;(T1, T2)
</UL>

<P><STRONG><a name="[209]"></a>Print::print(unsigned char, int)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, print.o(i._ZN5Print5printEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Print::print(unsigned char, int) &rArr; Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned char)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(short, unsigned char)
</UL>

<P><STRONG><a name="[2b7]"></a>Print::print(int, int)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, print.o(i._ZN5Print5printEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;unsigned short&rang;(T1)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[2b9]"></a>Print::print(unsigned, int)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, print.o(i._ZN5Print5printEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Print::print(unsigned, int) &rArr; Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
</UL>

<P><STRONG><a name="[2bb]"></a>Print::print(long, int)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, print.o(i._ZN5Print5printEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Print::print(long, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, long)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;long&rang;(T1)
</UL>

<P><STRONG><a name="[4d0]"></a>Print::print(long long, int)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, print.o(i._ZN5Print5printExi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(long, int)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[4d2]"></a>Print::print(unsigned long long, int)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, print.o(i._ZN5Print5printEyi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
</UL>

<P><STRONG><a name="[14b]"></a>Print::write(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, print.o(i._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 4]<UL><LI> marlinui_dogm.o(.constdata__ZTV24U8GLIB_ST7920_128X64_RRD)
<LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
<LI> hardwareserial.o(.constdata__ZTV6Stream)
<LI> print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[14c]"></a>Print::write(const void*, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, print.o(i._ZN5Print5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> marlinui_dogm.o(.constdata__ZTV24U8GLIB_ST7920_128X64_RRD)
<LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
<LI> hardwareserial.o(.constdata__ZTV6Stream)
<LI> print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[2b0]"></a>Print::println(const char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Print::println(const char*) &rArr; Print::println() &rArr; Print::print(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M118()
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[4d4]"></a>Print::println(unsigned, int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, print.o(i._ZN5Print7printlnEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Print::println(unsigned, int) &rArr; Print::print(unsigned, int) &rArr; Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHOLN&lang;unsigned&rang;(T1)
</UL>

<P><STRONG><a name="[370]"></a>Print::println(long, int)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, print.o(i._ZN5Print7printlnEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Print::println(long, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend(serial_index_t)
</UL>

<P><STRONG><a name="[4d3]"></a>Print::println()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::println() &rArr; Print::print(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(long, int)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
</UL>

<P><STRONG><a name="[308]"></a>Buzzer::tick()</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, buzzer.o(i._ZN6Buzzer4tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Buzzer::tick()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue&lang;tone_t, (unsigned char)4&rang;::isEmpty()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::quick_feedback(bool)
</UL>

<P><STRONG><a name="[3ff]"></a>Buzzer::tone(unsigned short, unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, buzzer.o(i._ZN6Buzzer4toneEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Buzzer::tone(unsigned short, unsigned short) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tick()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue&lang;tone_t, (unsigned char)4&rang;::isFull()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M300()
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::completion_feedback(bool)
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::buzz(long, unsigned short)
</UL>

<P><STRONG><a name="[4d7]"></a>Nozzle::park_mode_0_height(float)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nozzle.o(i._ZN6Nozzle18park_mode_0_heightEf))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
</UL>

<P><STRONG><a name="[3dd]"></a>Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nozzle.o(i._ZN6Nozzle4parkEhRK6XYZvalIfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Nozzle::park(unsigned char, const XYZval&lang;float&rang;&) &rArr; do_blocking_move_to_xy(float, float, float) &rArr; do_blocking_move_to(float, float, float, float) &rArr; line_to_current_position(float) &rArr; Planner::buffer_line(float, float, float, float, float, unsigned char, float) &rArr; Planner::buffer_segment(float, float, float, float, float, unsigned char, float) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float) &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy(float, float, float)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_z(float, float)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park_mode_0_height(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G27()
</UL>

<P><STRONG><a name="[34b]"></a>SdFile::write(const char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sdfile.o(i._ZN6SdFile5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SdFile::write(const char*) &rArr; SdBaseFile::write(const void*, unsigned short) &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
</UL>

<P><STRONG><a name="[47d]"></a>SdFile::write(const void*, unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdfile.o(i._ZN6SdFile5writeEPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SdFile::write(const void*, unsigned short) &rArr; SdBaseFile::write(const void*, unsigned short) &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::write()
</UL>

<P><STRONG><a name="[114]"></a>SdFile::SdFile()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cardreader.o(i._ZN6SdFileC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_cardreader_cpp_M23_STR
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(i.__sti___14_cardreader_cpp_M23_STR)
</UL>
<P><STRONG><a name="[5a8]"></a>SdFile::SdFile__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cardreader.o(i._ZN6SdFileC1Ev), UNUSED)

<P><STRONG><a name="[ac]"></a>SdFile::~SdFile()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerloss.o(i._ZN6SdFileD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SdFile::~SdFile() &rArr; SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByIndex(unsigned short)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countFilesInWorkDir()
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> powerloss.o(i.__sti___13_powerloss_cpp_1e506b3c)
<LI> cardreader.o(i._ZN10CardReader10diveToFileEbRP6SdFilePKcb)
<LI> cardreader.o(i.__sti___14_cardreader_cpp_M23_STR)
<LI> cardreader.o(i.<Func48>)
</UL>
<P><STRONG><a name="[5a9]"></a>SdFile::~SdFile__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, powerloss.o(i._ZN6SdFileD1Ev), UNUSED)

<P><STRONG><a name="[4d8]"></a>U8GLIB::drawBitmapP(unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, status_screen_dogm.o(i._ZN6U8GLIB11drawBitmapPEhhhhPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = U8GLIB::drawBitmapP(unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*) &rArr; u8g_DrawBitmapP &rArr; u8g_DrawHBitmapP &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBitmapP
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[153]"></a>U8GLIB::write(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, marlinui_dogm.o(i._ZN6U8GLIB5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = U8GLIB::write(unsigned char) &rArr; u8g_DrawGlyph &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawGlyph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> marlinui_dogm.o(.constdata__ZTV24U8GLIB_ST7920_128X64_RRD)
</UL>
<P><STRONG><a name="[4db]"></a>U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, status_screen_dogm.o(i._ZN6U8GLIB7drawBoxEhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline(_u8g_t*, unsigned char, unsigned char, unsigned char) &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBox
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[4dc]"></a>U8GLIB::initSPI(_u8g_dev_t*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, u8glib.o(i._ZN6U8GLIB7initSPIEP10_u8g_dev_thhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = U8GLIB::initSPI(_u8g_dev_t*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_InitSPI &rArr; u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::prepare()
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_lcd()
</UL>

<P><STRONG><a name="[4dd]"></a>U8GLIB::prepare()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, u8glib.o(i._ZN6U8GLIB7prepareEv))
<BR><BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::initSPI(_u8g_dev_t*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4df]"></a>U8GLIB::drawFrame(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, status_screen_dogm.o(i._ZN6U8GLIB9drawFrameEhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = U8GLIB::drawFrame(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawFrame &rArr; u8g_draw_vline(_u8g_t*, unsigned char, unsigned char, unsigned char) &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[4b8]"></a>U8GLIB::drawHLine(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, marlinui_dogm.o(i._ZN6U8GLIB9drawHLineEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = U8GLIB::drawHLine(unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawHLine &rArr; u8g_draw_hline(_u8g_t*, unsigned char, unsigned char, unsigned char) &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to marlinui_DOGM_cpp]::mark_as_selected(unsigned char, bool)
</UL>

<P><STRONG><a name="[4e2]"></a>U8GLIB::firstPage()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, marlinui_dogm.o(i._ZN6U8GLIB9firstPageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = U8GLIB::firstPage() &rArr; u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPage
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::show_custom_bootscreen()
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
</UL>

<P><STRONG><a name="[26c]"></a>BL24CXX::readOneByte(unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bl24cxx.o(i._ZN7BL24CXX11readOneByteEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::send_byte(unsigned char)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::start()
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte(unsigned char*)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::_check()
</UL>

<P><STRONG><a name="[281]"></a>BL24CXX::writeOneByte(unsigned short, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bl24cxx.o(i._ZN7BL24CXX12writeOneByteEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BL24CXX::writeOneByte(unsigned short, unsigned char) &rArr; IIC::send_byte(unsigned char) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::send_byte(unsigned char)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::start()
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::check()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1ff]"></a>BL24CXX::init()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bl24cxx.o(i._ZN7BL24CXX4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BL24CXX::init() &rArr; IIC::init() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init()
</UL>

<P><STRONG><a name="[4e5]"></a>BL24CXX::check()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bl24cxx.o(i._ZN7BL24CXX5checkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BL24CXX::check() &rArr; BL24CXX::_check() &rArr; BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::writeOneByte(unsigned short, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::_check()
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[4e6]"></a>BL24CXX::_check()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bl24cxx.o(i._ZN7BL24CXX6_checkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BL24CXX::_check() &rArr; BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::readOneByte(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::check()
</UL>

<P><STRONG><a name="[28e]"></a>Planner::quick_stop()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner10quick_stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Planner::quick_stop() &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
</UL>

<P><STRONG><a name="[2e4]"></a>Planner::buffer_line(float, float, float, float, float, unsigned char, float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner11buffer_lineEfffffhf))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Planner::buffer_line(float, float, float, float, float, unsigned char, float) &rArr; Planner::buffer_segment(float, float, float, float, float, unsigned char, float) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float) &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(float, float, float, float, float, unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMove::task()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_to_current_position(float)
</UL>

<P><STRONG><a name="[4e8]"></a>Planner::recalculate()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner11recalculateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Planner::recalculate() &rArr; Planner::recalculate_trapezoids() &rArr; Planner::calculate_trapezoid_for_block(block_t*, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass()
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass()
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[24f]"></a>Planner::synchronize()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner11synchronizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = Planner::synchronize() &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M400()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::synchronize(const char*)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_axis_position(AxisEnum, const int&)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(float, float, float, float)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[4ea]"></a>Planner::forward_pass()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, planner.o(i._ZN7Planner12forward_passEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Planner::forward_pass() &rArr; Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::is_block_busy(const block_t*)
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate()
</UL>

<P><STRONG><a name="[4e9]"></a>Planner::reverse_pass()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, planner.o(i._ZN7Planner12reverse_passEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Planner::reverse_pass() &rArr; Planner::reverse_pass_kernel(block_t*, const block_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass_kernel(block_t*, const block_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate()
</UL>

<P><STRONG><a name="[3fb]"></a>Planner::set_max_jerk(AxisEnum, float)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner12set_max_jerkE8AxisEnumf))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
</UL>

<P><STRONG><a name="[4ef]"></a>Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float)</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, planner.o(i._ZN7Planner13_buffer_stepsERK7XYZEvalIiEfhf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float) &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate()
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(float, float, float, float, float, unsigned char, float)
</UL>

<P><STRONG><a name="[4f1]"></a>Planner::autotemp_task()</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, planner.o(i._ZN7Planner13autotemp_taskEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Planner::autotemp_task() &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::check_axes_activity()
</UL>

<P><STRONG><a name="[24e]"></a>Planner::buffer_segment(float, float, float, float, float, unsigned char, float)</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, planner.o(i._ZN7Planner14buffer_segmentEfffffhf))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Planner::buffer_segment(float, float, float, float, float, unsigned char, float) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float) &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(float, float, float, float, float, unsigned char, float)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[4f0]"></a>Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)</STRONG> (Thumb, 2094 bytes, Stack size 128 bytes, planner.o(i._ZN7Planner15_populate_blockEP7block_tbRK7XYZEvalIiEfhf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::max_allowable_speed_sqr(float, float, float)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOMORE&lang;unsigned, float&rang;(T1&, T2)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOMORE&lang;float, float&rang;(T1&, T2)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to planner_cpp]::_MIN&lang;float, float&rang;(T1, T2)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to planner_cpp]::_MAX&lang;float, float&rang;(T1, T2)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to planner_cpp]::ABS&lang;float&rang;(T1)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[29c]"></a>Planner::set_position_mm(float, float, float, float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner15set_position_mmEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Planner::set_position_mm(float, float, float, float) &rArr; Planner::set_machine_position_mm(float, float, float, float) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
</UL>

<P><STRONG><a name="[4fa]"></a>Planner::sync_fan_speeds(unsigned char(&)[1])</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner15sync_fan_speedsERA1_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Planner::sync_fan_speeds(unsigned char(&)[1])
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::check_axes_activity()
</UL>

<P><STRONG><a name="[3fa]"></a>Planner::set_max_feedrate(unsigned char, float)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner16set_max_feedrateEhf))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
</UL>

<P><STRONG><a name="[4fb]"></a>Planner::buffer_sync_block()</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, planner.o(i._ZN7Planner17buffer_sync_blockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = Planner::buffer_sync_block() &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(float, float, float, float)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(float)
</UL>

<P><STRONG><a name="[4fc]"></a>Planner::endstop_triggered(AxisEnum)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner17endstop_triggeredE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Planner::endstop_triggered(AxisEnum) &rArr; Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::endstop_triggered(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::update()
</UL>

<P><STRONG><a name="[50b]"></a>Planner::get_current_block()</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner17get_current_blockEv))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[2cc]"></a>Planner::set_e_position_mm(float)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner17set_e_position_mmEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Planner::set_e_position_mm(float) &rArr; Planner::buffer_sync_block() &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_axis_position(AxisEnum, const int&)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position_e()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
</UL>

<P><STRONG><a name="[3ee]"></a>Planner::autotemp_M104_M109()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, planner.o(i._ZN7Planner18autotemp_M104_M109Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Planner::autotemp_M104_M109() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_celsius()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
</UL>

<P><STRONG><a name="[3e8]"></a>Planner::finish_and_disable()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner18finish_and_disableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Planner::finish_and_disable() &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all_steppers()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
</UL>

<P><STRONG><a name="[28b]"></a>Planner::check_axes_activity()</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner19check_axes_activityEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Planner::check_axes_activity() &rArr; Planner::autotemp_task() &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::sync_fan_speeds(unsigned char(&)[1])
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_task()
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
</UL>

<P><STRONG><a name="[4ed]"></a>Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, planner.o(i._ZN7Planner19forward_pass_kernelEPK7block_tPS0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::max_allowable_speed_sqr(float, float, float)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::is_block_busy(const block_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass()
</UL>

<P><STRONG><a name="[3ea]"></a>Planner::refresh_positioning()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner19refresh_positioningEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Planner::refresh_positioning() &rArr; Planner::set_position_mm(float, float, float, float) &rArr; Planner::set_machine_position_mm(float, float, float, float) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_position_mm(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()::[lambda() (instance 7)]::_FUN()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()::[lambda() (instance 5)]::_FUN()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()::[lambda() (instance 3)]::_FUN()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[4ee]"></a>Planner::reverse_pass_kernel(block_t*, const block_t*)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, planner.o(i._ZN7Planner19reverse_pass_kernelEP7block_tPKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Planner::reverse_pass_kernel(block_t*, const block_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::max_allowable_speed_sqr(float, float, float)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::is_block_busy(const block_t*)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to planner_cpp]::_MIN&lang;float, float&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass()
</UL>

<P><STRONG><a name="[52b]"></a>Planner::block_buffer_runtime()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner20block_buffer_runtimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
</UL>

<P><STRONG><a name="[24c]"></a>Planner::get_axis_position_mm(AxisEnum)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner20get_axis_position_mmE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Planner::get_axis_position_mm(AxisEnum)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::position(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_from_steppers_for_axis(AxisEnum)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cartesian_from_steppers()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[3f9]"></a>Planner::set_max_acceleration(unsigned char, float)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner20set_max_accelerationEhf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Planner::set_max_acceleration(unsigned char, float) &rArr; Planner::reset_acceleration_rates()
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
</UL>

<P><STRONG><a name="[500]"></a>Planner::triggered_position_mm(AxisEnum)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner21triggered_position_mmE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Planner::triggered_position_mm(AxisEnum)
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::triggered_position(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
</UL>

<P><STRONG><a name="[4eb]"></a>Planner::recalculate_trapezoids()</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, planner.o(i._ZN7Planner22recalculate_trapezoidsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Planner::recalculate_trapezoids() &rArr; Planner::calculate_trapezoid_for_block(block_t*, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::is_block_busy(const block_t*)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, float, float)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate()
</UL>

<P><STRONG><a name="[4f8]"></a>Planner::max_allowable_speed_sqr(float, float, float)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner23max_allowable_speed_sqrEfff))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass_kernel(block_t*, const block_t*)
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[24d]"></a>Planner::set_machine_position_mm(float, float, float, float)</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, planner.o(i._ZN7Planner23set_machine_position_mmEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Planner::set_machine_position_mm(float, float, float, float) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_position_mm(float, float, float, float)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[455]"></a>Planner::reset_acceleration_rates()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner24reset_acceleration_ratesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Planner::reset_acceleration_rates()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_max_acceleration(unsigned char, float)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()::[lambda() (instance 7)]::_FUN()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()::[lambda() (instance 5)]::_FUN()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()::[lambda() (instance 3)]::_FUN()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[502]"></a>Planner::calculate_trapezoid_for_block(block_t*, float, float)</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, planner.o(i._ZN7Planner29calculate_trapezoid_for_blockEP7block_tff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Planner::calculate_trapezoid_for_block(block_t*, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::estimate_acceleration_distance(float, float, float)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
</UL>

<P><STRONG><a name="[504]"></a>Planner::estimate_acceleration_distance(float, float, float)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner30estimate_acceleration_distanceEfff))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, float, float)
</UL>

<P><STRONG><a name="[cd]"></a>Planner::calculate_volumetric_multipliers()</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, planner.o(i._ZN7Planner32calculate_volumetric_multipliersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Planner::calculate_volumetric_multipliers()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_filamentv)
</UL>
<P><STRONG><a name="[545]"></a>Planner::init()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_planner_cpp_planner
</UL>

<P><STRONG><a name="[443]"></a>SoftPWM::add(unsigned char, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, temperature.o(i._ZN7SoftPWM3addEhh))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>

<P><STRONG><a name="[505]"></a>Stepper::do_babystep(AxisEnum, bool)</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, stepper.o(i._ZN7Stepper11do_babystepE8AxisEnumb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Stepper::do_babystep(AxisEnum, bool) &rArr; Ddl_Delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::step_axis(AxisEnum)
</UL>

<P><STRONG><a name="[503]"></a>Stepper::set_position(const int&, const int&, const int&, const int&)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stepper.o(i._ZN7Stepper12set_positionERKiS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Stepper::set_position(const int&, const int&, const int&, const int&) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::_set_position(const int&, const int&, const int&, const int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(float, float, float, float)
</UL>

<P><STRONG><a name="[506]"></a>Stepper::_set_position(const int&, const int&, const int&, const int&)</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stepper.o(i._ZN7Stepper13_set_positionERKiS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Stepper::_set_position(const int&, const int&, const int&, const int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[4ec]"></a>Stepper::is_block_busy(const block_t*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper13is_block_busyEPK7block_t))
<BR><BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass_kernel(block_t*, const block_t*)
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass()
</UL>

<P><STRONG><a name="[507]"></a>Stepper::set_directions()</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stepper.o(i._ZN7Stepper14set_directionsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Stepper::set_directions()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[508]"></a>Stepper::block_phase_isr()</STRONG> (Thumb, 2072 bytes, Stack size 56 bytes, stepper.o(i._ZN7Stepper15block_phase_isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Stepper::block_phase_isr() &rArr; Endstops::update() &rArr; Planner::endstop_triggered(AxisEnum) &rArr; Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::update()
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_current_block()
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::_set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MAX&lang;unsigned long, unsigned long&rang;(T1, T2)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MAX&lang;unsigned, unsigned long&rang;(T1, T2)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
</UL>

<P><STRONG><a name="[50d]"></a>Stepper::pulse_phase_isr()</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, stepper.o(i._ZN7Stepper15pulse_phase_isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Stepper::pulse_phase_isr() &rArr; Stepper::AWAIT_TIMED_PULSE(unsigned char) &rArr; timer_get_count
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_count
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_TIMED_PULSE(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
</UL>

<P><STRONG><a name="[2e0]"></a>Stepper::report_positions()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stepper.o(i._ZN7Stepper16report_positionsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Stepper::report_positions() &rArr; Stepper::report_a_position(const XYZval&lang;int&rang;&) &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_a_position(const XYZval&lang;int&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
</UL>

<P><STRONG><a name="[50e]"></a>Stepper::AWAIT_TIMED_PULSE(unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stepper.o(i._ZN7Stepper17AWAIT_TIMED_PULSEEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Stepper::AWAIT_TIMED_PULSE(unsigned char) &rArr; timer_get_count
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_count
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
</UL>

<P><STRONG><a name="[4fd]"></a>Stepper::endstop_triggered(AxisEnum)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stepper.o(i._ZN7Stepper17endstop_triggeredE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::endstop_triggered(AxisEnum)
</UL>

<P><STRONG><a name="[302]"></a>Stepper::report_a_position(const XYZval&lang;int&rang;&)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stepper.o(i._ZN7Stepper17report_a_positionERK6XYZvalIiE))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Stepper::report_a_position(const XYZval&lang;int&rang;&) &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_projected()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_positions()
</UL>

<P><STRONG><a name="[4fe]"></a>Stepper::set_axis_position(AxisEnum, const int&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stepper.o(i._ZN7Stepper17set_axis_positionE8AxisEnumRKi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Stepper::set_axis_position(AxisEnum, const int&) &rArr; Planner::synchronize() &rArr;  idle() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(float)
</UL>

<P><STRONG><a name="[501]"></a>Stepper::triggered_position(AxisEnum)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper18triggered_positionE8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::triggered_position_mm(AxisEnum)
</UL>

<P><STRONG><a name="[292]"></a>Stepper::isr()</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stepper.o(i._ZN7Stepper3isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Stepper::isr() &rArr; Stepper::block_phase_isr() &rArr; Endstops::update() &rArr; Planner::endstop_triggered(AxisEnum) &rArr; Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_set_compare(unsigned char, unsigned short)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_count
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_STEP_TIMER_ISR()
</UL>

<P><STRONG><a name="[510]"></a>Stepper::init()</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, stepper.o(i._ZN7Stepper4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Stepper::init() &rArr; HAL_timer_start(unsigned char, unsigned) &rArr; setup_time2B &rArr; TIMER0_BaseInit &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_start(unsigned char, unsigned)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[4e7]"></a>Stepper::suspend()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, planner.o(i._ZN7Stepper7suspendEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable_irq
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_interrupt_enabled(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::endstop_triggered(AxisEnum)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::quick_stop()
</UL>

<P><STRONG><a name="[4ff]"></a>Stepper::position(AxisEnum)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper8positionE8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_axis_position_mm(AxisEnum)
</UL>

<P><STRONG><a name="[3fd]"></a>Babystep::add_mm(AxisEnum, float)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, babystep.o(i._ZN8Babystep6add_mmE8AxisEnumf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Babystep::add_mm(AxisEnum, float) &rArr; Babystep::add_steps(AxisEnum, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_steps(AxisEnum, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
</UL>

<P><STRONG><a name="[228]"></a>Babystep::add_steps(AxisEnum, short)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, babystep.o(i._ZN8Babystep9add_stepsE8AxisEnums))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Babystep::add_steps(AxisEnum, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axes_should_home(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_mm(AxisEnum, float)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep(AxisEnum, const char*)
</UL>

<P><STRONG><a name="[445]"></a>Babystep::step_axis(AxisEnum)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, babystep.o(i._ZN8Babystep9step_axisE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Babystep::step_axis(AxisEnum) &rArr; Stepper::do_babystep(AxisEnum, bool) &rArr; Ddl_Delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>

<P><STRONG><a name="[3df]"></a>Endstops::not_homing()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops10not_homingEv))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[512]"></a>Endstops::event_handler()</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, endstops.o(i._ZN8Endstops13event_handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Endstops::event_handler() &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_printf_P(unsigned char, const char*, ...)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::triggered_position_mm(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[3f4]"></a>Endstops::report_states()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, endstops.o(i._ZN8Endstops13report_statesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Endstops::report_states() &rArr; [local to endstops_cpp]::print_es_state(bool, const char*) &rArr; serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to endstops_cpp]::print_es_state(bool, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M119()
</UL>

<P><STRONG><a name="[3f5]"></a>Endstops::enable_globally(bool)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops15enable_globallyEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Endstops::enable_globally(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::resync()
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::init()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M121()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M120()
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
</UL>

<P><STRONG><a name="[250]"></a>Endstops::validate_homing_move()</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops20validate_homing_moveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Endstops::validate_homing_move() &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[514]"></a>Endstops::init()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, endstops.o(i._ZN8Endstops4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Endstops::init() &rArr; Endstops::enable_globally(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[446]"></a>Endstops::poll()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops4pollEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Endstops::poll() &rArr; Endstops::update() &rArr; Planner::endstop_triggered(AxisEnum) &rArr; Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>

<P><STRONG><a name="[3de]"></a>Endstops::enable(bool)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops6enableEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Endstops::enable(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::resync()
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[513]"></a>Endstops::resync()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops6resyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable(bool)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
</UL>

<P><STRONG><a name="[50c]"></a>Endstops::update()</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, endstops.o(i._ZN8Endstops6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Endstops::update() &rArr; Planner::endstop_triggered(AxisEnum) &rArr; Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::endstop_triggered(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::poll()
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[ec]"></a>MarlinUI::abort_load()</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI10abort_loadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MarlinUI::abort_load() &rArr; quickstop_stepper() &rArr; sync_plan_position() &rArr; Planner::set_position_mm(float, float, float, float) &rArr; Planner::set_machine_position_mm(float, float, float, float) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all_steppers()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[3d7]"></a>MarlinUI::has_status()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, marlinui.o(i._ZN8MarlinUI10has_statusEv))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
</UL>

<P><STRONG><a name="[2b1]"></a>MarlinUI::set_status(const char*, bool)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, marlinui.o(i._ZN8MarlinUI10set_statusEPKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MarlinUI::set_status(const char*, bool) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M117()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_lcd()
</UL>

<P><STRONG><a name="[f1]"></a>MarlinUI::abort_print()</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI11abort_printEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MarlinUI::abort_print() &rArr; MarlinUI::set_status_P(const char*, signed char) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::media_changed(unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu_main.o(i._Z9menu_mainv)
<LI> menu_main.o(i._ZZ9menu_mainvENKUlvE_clEv)
</UL>
<P><STRONG><a name="[1f1]"></a>MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, menu.o(i._ZN8MarlinUI11goto_screenEPFvvEthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::clear_lcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1000()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_screen()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::synchronize(const char*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()::[lambda() (instance 7)]::_FUN()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_goto_menu_move_distance_e()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_goto_manual_move(float)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep_go(void(*)())
</UL>

<P><STRONG><a name="[d6]"></a>MarlinUI::init_eeprom()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI11init_eepromEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = MarlinUI::init_eeprom() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::completion_feedback(bool)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
<LI> menu_advanced.o(i._ZZ22menu_advanced_settingsvENKUlvE1_clEv)
</UL>
<P><STRONG><a name="[30b]"></a>MarlinUI::kill_screen(const char*, const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, marlinui.o(i._ZN8MarlinUI11kill_screenEPKcS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init()
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_printf_P(unsigned char, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
</UL>

<P><STRONG><a name="[ed]"></a>MarlinUI::pause_print()</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI11pause_printEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = MarlinUI::pause_print() &rArr; GcodeSuite::process_subcommands_now(char*) &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M501() &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::synchronize(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[519]"></a>MarlinUI::synchronize(const char*)</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, menu.o(i._ZN8MarlinUI11synchronizeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MarlinUI::synchronize(const char*) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::save_previous_screen()
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_print()
</UL>

<P><STRONG><a name="[b0]"></a>MarlinUI::auto_Feeding()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI12auto_FeedingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = MarlinUI::auto_Feeding() &rArr; MarlinUI::tempload() &rArr; GCodeQueue::enqueue_now_P(const char*) &rArr; GCodeQueue::enqueue_one_now(const char*) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::tempload()
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_motion()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z11menu_motionv)
</UL>
<P><STRONG><a name="[29b]"></a>MarlinUI::reset_status(bool)</STRONG> (Thumb, 504 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI12reset_statusEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MarlinUI::reset_status(bool) &rArr; MarlinUI::set_status_P(const char*, signed char) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsPaused()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::longest_filename()
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M117()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M25()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_start_selected_file()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::resume_print()
</UL>

<P><STRONG><a name="[f0]"></a>MarlinUI::resume_print()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI12resume_printEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MarlinUI::resume_print() &rArr; MarlinUI::reset_status(bool) &rArr; MarlinUI::set_status_P(const char*, signed char) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[23f]"></a>MarlinUI::set_status_P(const char*, signed char)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, marlinui.o(i._ZN8MarlinUI12set_status_PEPKca))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MarlinUI::set_status_P(const char*, signed char) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_alert_status_P(const char*)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_print()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::abort_print()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::abort_load()
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::CompletedMaticHate()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::media_changed(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[51c]"></a>MarlinUI::_get_progress()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI13_get_progressEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MarlinUI::_get_progress() &rArr; CardReader::isFileOpen()
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[b1]"></a>MarlinUI::auto_Desizing()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI13auto_DesizingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = MarlinUI::auto_Desizing() &rArr; MarlinUI::tempload() &rArr; GCodeQueue::enqueue_now_P(const char*) &rArr; GCodeQueue::enqueue_one_now(const char*) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::tempload()
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_motion()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z11menu_motionv)
</UL>
<P><STRONG><a name="[c3]"></a>MarlinUI::load_settings()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI13load_settingsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = MarlinUI::load_settings() &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::completion_feedback(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(i._Z18menu_configurationv)
</UL>
<P><STRONG><a name="[338]"></a>MarlinUI::media_changed(unsigned char, unsigned char)</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI13media_changedEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = MarlinUI::media_changed(unsigned char, unsigned char) &rArr; PrintJobRecovery::purge() &rArr; CardReader::removeJobRecoveryFile() &rArr; CardReader::removeFile(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsActive()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_lcd()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::abort_print()
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
</UL>

<P><STRONG><a name="[104]"></a>MarlinUI::status_screen()</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, marlinui.o(i._ZN8MarlinUI13status_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = MarlinUI::status_screen() &rArr; MarlinUI::draw_status_screen() &rArr; MarlinUI::draw_status_message(bool) &rArr; lcd_put_u8str_max(const char*, unsigned short) &rArr; uxg_DrawUtf8Str(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_lcd()
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> menu.o(i._ZN8MarlinUI11goto_screenEPFvvEthh)
<LI> menu.o(i._ZN8MarlinUI16return_to_statusEv)
<LI> marlinui.o(i.__sti___12_marlinui_cpp_ui)
<LI> marlinui.o(i._ZN8MarlinUI16on_status_screenEv)
</UL>
<P><STRONG><a name="[51f]"></a>MarlinUI::quick_feedback(bool)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI14quick_feedbackEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MarlinUI::quick_feedback(bool) &rArr; MarlinUI::buzz(long, unsigned short) &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tick()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::buzz(long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
</UL>

<P><STRONG><a name="[c4]"></a>MarlinUI::reset_settings()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI14reset_settingsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = MarlinUI::reset_settings() &rArr; MarlinSettings::reset() &rArr; Endstops::enable_globally(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::completion_feedback(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(i._Z18menu_configurationv)
</UL>
<P><STRONG><a name="[c2]"></a>MarlinUI::store_settings()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI14store_settingsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = MarlinUI::store_settings() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::completion_feedback(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu_configuration.o(i._Z18menu_configurationv)
<LI> menu_configuration.o(i._Z36_menu_configuration_preheat_settingsv)
</UL>
<P><STRONG><a name="[444]"></a>MarlinUI::update_buttons()</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, marlinui.o(i._ZN8MarlinUI14update_buttonsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MarlinUI::update_buttons() &rArr; PORT_GetBitMapp
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>

<P><STRONG><a name="[521]"></a>MarlinUI::show_bootscreen()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, marlinui_dogm.o(i._ZN8MarlinUI15show_bootscreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = MarlinUI::show_bootscreen() &rArr; MarlinUI::show_custom_bootscreen() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::show_custom_bootscreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[43f]"></a>MarlinUI::status_printf_P(unsigned char, const char*, ...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, marlinui.o(i._ZN8MarlinUI15status_printf_PEhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MarlinUI::status_printf_P(unsigned char, const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::kill_screen(const char*, const char*)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_heating_message(unsigned char)
</UL>

<P><STRONG><a name="[518]"></a>MarlinUI::draw_kill_screen()</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, marlinui_dogm.o(i._ZN8MarlinUI16draw_kill_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max(const char*, unsigned short)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_moveto(unsigned char, unsigned char)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::firstPage()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_P(unsigned char, unsigned char, const char*)
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPage
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_font(MarlinFont)
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::kill_screen(const char*, const char*)
</UL>

<P><STRONG><a name="[52a]"></a>MarlinUI::on_status_screen()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, marlinui.o(i._ZN8MarlinUI16on_status_screenEv))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
</UL>

<P><STRONG><a name="[218]"></a>MarlinUI::return_to_status()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(i._ZN8MarlinUI16return_to_statusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::kill_screen(const char*, const char*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_loss_recovery_cancel()
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_alert_status_P(const char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_job_recovery_cpp]::lcd_power_loss_recovery_resume()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_eeprom()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_autotune(heater_id_t)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_start_selected_file()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::abort_print()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::abort_load()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cooldown()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::auto_Desizing()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::auto_Feeding()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::media_changed(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[478]"></a>MarlinUI::update_selection()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, menu.o(i._ZN8MarlinUI16update_selectionEv))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[255]"></a>MarlinUI::get_preheat_label(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, marlinui.o(i._ZN8MarlinUI17get_preheat_labelEh))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
</UL>

<P><STRONG><a name="[474]"></a>MarlinUI::scrolled_filename(CardReader&, unsigned char, unsigned char, bool)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI17scrolled_filenameER10CardReaderhhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MarlinUI::scrolled_filename(CardReader&, unsigned char, unsigned char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::longest_filename()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdbase::draw(bool, unsigned char, const char*, CardReader&, bool)
</UL>

<P><STRONG><a name="[43c]"></a>MarlinUI::CompletedMaticHate()</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI18CompletedMaticHateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = MarlinUI::CompletedMaticHate() &rArr;  GcodeSuite::process_subcommands_now(char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
</UL>

<P><STRONG><a name="[51e]"></a>MarlinUI::draw_status_screen()</STRONG> (Thumb, 2334 bytes, Stack size 72 bytes, status_screen_dogm.o(i._ZN8MarlinUI18draw_status_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = MarlinUI::draw_status_screen() &rArr; MarlinUI::draw_status_message(bool) &rArr; lcd_put_u8str_max(const char*, unsigned short) &rArr; uxg_DrawUtf8Str(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max_P(const char*, unsigned short)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max(const char*, unsigned short)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_moveto(unsigned char, unsigned char)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axes_should_home(unsigned char)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned char, unsigned char, unsigned)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_font(MarlinFont)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawFrame(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawBitmapP(unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::using_inch_units()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str(unsigned char, unsigned char, const char*)
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawPixel
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::get_blink()
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_get_progress()
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i16tostr4signrj(short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i16tostr3rj(short)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr53_63(float)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr42_52(float)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr52sp(float)
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_message(bool)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_screen()
</UL>

<P><STRONG><a name="[403]"></a>MarlinUI::set_alert_status_P(const char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI18set_alert_status_PEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MarlinUI::set_alert_status_P(const char*) &rArr; MarlinUI::set_status_P(const char*, signed char) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
</UL>

<P><STRONG><a name="[516]"></a>MarlinUI::completion_feedback(bool)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, menu.o(i._ZN8MarlinUI19completion_feedbackEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MarlinUI::completion_feedback(bool) &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::store_settings()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_settings()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::load_settings()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_eeprom()
</UL>

<P><STRONG><a name="[528]"></a>MarlinUI::draw_status_message(bool)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, status_screen_dogm.o(i._ZN8MarlinUI19draw_status_messageEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MarlinUI::draw_status_message(bool) &rArr; lcd_put_u8str_max(const char*, unsigned short) &rArr; uxg_DrawUtf8Str(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_u8str_max(const char*, unsigned short)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar(unsigned)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_strlen(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[108]"></a>MarlinUI::goto_previous_screen()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu_main.o(i._ZN8MarlinUI20goto_previous_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MarlinUI::goto_previous_screen() &rArr; MarlinUI::_goto_previous_screen() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> menu_main.o(i._ZZ9menu_mainvENKUlvE_clEv)
<LI> menu_media.o(i._ZZN15MenuItem_sdfile6actionEPKcR10CardReaderENKUlvE_clEv)
<LI> menu_motion.o(i._ZZ27_menu_move_distance_e_maybevENKUlvE_clEv)
</UL>
<P><STRONG><a name="[1f0]"></a>MarlinUI::save_previous_screen()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, menu.o(i._ZN8MarlinUI20save_previous_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MarlinUI::save_previous_screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::synchronize(const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
</UL>

<P><STRONG><a name="[1eb]"></a>MarlinUI::_goto_previous_screen()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, menu.o(i._ZN8MarlinUI21_goto_previous_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MarlinUI::_goto_previous_screen() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_thermistors()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_printer()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_board()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_filament()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::synchronize(const char*)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_motion()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep(AxisEnum, const char*)
</UL>

<P><STRONG><a name="[529]"></a>MarlinUI::draw_custom_bootscreen(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, marlinui_dogm.o(i._ZN8MarlinUI22draw_custom_bootscreenEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MarlinUI::draw_custom_bootscreen(unsigned char) &rArr; u8g_DrawBitmapP &rArr; u8g_DrawHBitmapP &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBitmapP
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::show_custom_bootscreen()
</UL>

<P><STRONG><a name="[522]"></a>MarlinUI::show_custom_bootscreen()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, marlinui_dogm.o(i._ZN8MarlinUI22show_custom_bootscreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = MarlinUI::show_custom_bootscreen() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::firstPage()
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPage
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_custom_bootscreen(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::show_bootscreen()
</UL>

<P><STRONG><a name="[47a]"></a>MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*)</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, marlinui.o(i._ZN8MarlinUI25draw_select_screen_promptEPKcS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*) &rArr; wrap_string_P(unsigned char&, unsigned char&, const char*, bool) &rArr; _wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_strlen_P(const char*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_string_P(unsigned char&, unsigned char&, const char*, bool)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[26d]"></a>MarlinUI::enable_encoder_multiplier(bool)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, marlinui.o(i._ZN8MarlinUI25enable_encoder_multiplierEb))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_filament()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
</UL>

<P><STRONG><a name="[520]"></a>MarlinUI::buzz(long, unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, marlinui.o(i._ZN8MarlinUI4buzzElt))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = MarlinUI::buzz(long, unsigned short) &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::quick_feedback(bool)
</UL>

<P><STRONG><a name="[517]"></a>MarlinUI::init()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MarlinUI::init() &rArr; MarlinUI::init_lcd() &rArr; U8GLIB::initSPI(_u8g_dev_t*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_InitSPI &rArr; u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_lcd()
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update_buttons()
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::kill_screen(const char*, const char*)
</UL>

<P><STRONG><a name="[309]"></a>MarlinUI::update()</STRONG> (Thumb, 584 bytes, Stack size 32 bytes, marlinui.o(i._ZN8MarlinUI6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = MarlinUI::update() &rArr; MarlinUI::quick_feedback(bool) &rArr; MarlinUI::buzz(long, unsigned short) &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsPaused()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetColorIndex
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPage
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPage
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::clear_lcd()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_font(MarlinFont)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::on_status_screen()
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::block_buffer_runtime()
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update_buttons()
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::quick_feedback(bool)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMove::task()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
</UL>

<P><STRONG><a name="[335]"></a>MarlinUI::detected()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, marlinui_dogm.o(i._ZN8MarlinUI8detectedEv))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
</UL>

<P><STRONG><a name="[51d]"></a>MarlinUI::init_lcd()</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, marlinui_dogm.o(i._ZN8MarlinUI8init_lcdEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MarlinUI::init_lcd() &rArr; U8GLIB::initSPI(_u8g_dev_t*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; u8g_InitSPI &rArr; u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::initSPI(_u8g_dev_t*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_SetUtf8Fonts(const _uxg_fontinfo_t*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_screen()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::media_changed(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[22a]"></a>MarlinUI::set_font(MarlinFont)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, marlinui_dogm.o(i._ZN8MarlinUI8set_fontE10MarlinFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MarlinUI::set_font(MarlinFont) &rArr; u8g_SetFont &rArr; u8g_UpdateRefHeight(_u8g_t*) &rArr; u8g_font_GetCapitalAHeight(const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep(AxisEnum, const char*)
</UL>

<P><STRONG><a name="[51a]"></a>MarlinUI::tempload()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, marlinui.o(i._ZN8MarlinUI8temploadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = MarlinUI::tempload() &rArr; GCodeQueue::enqueue_now_P(const char*) &rArr; GCodeQueue::enqueue_one_now(const char*) &rArr; idle() &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_now_P(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::auto_Desizing()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::auto_Feeding()
</UL>

<P><STRONG><a name="[515]"></a>MarlinUI::clear_lcd()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, marlinui_dogm.o(i._ZN8MarlinUI9clear_lcdEv))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[526]"></a>MarlinUI::get_blink()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI9get_blinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MarlinUI::get_blink()
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[1ea]"></a>MarlinUI::use_click()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, marlinui.o(i._ZN8MarlinUI9use_clickEv))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_job_recovery()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_thermistors()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_printer()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_info_board()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_filament()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_screen()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_motion()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep(AxisEnum, const char*)
</UL>

<P><STRONG><a name="[414]"></a>SdVolume::cacheFlush()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sdvolume.o(i._ZN8SdVolume10cacheFlushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SdVolume::cacheFlush()
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove()
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
</UL>

<P><STRONG><a name="[416]"></a>SdVolume::writeBlock(unsigned, const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN8SdVolume10writeBlockEjPKh))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
</UL>

<P><STRONG><a name="[417]"></a>SdVolume::cacheRawBlock(unsigned, bool)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sdvolume.o(i._ZN8SdVolume13cacheRawBlockEjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::init(DiskIODriver*, unsigned char)
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
</UL>

<P><STRONG><a name="[40d]"></a>SdVolume::allocContiguous(unsigned, unsigned*)</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, sdvolume.o(i._ZN8SdVolume15allocContiguousEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addCluster()
</UL>

<P><STRONG><a name="[358]"></a>SdVolume::init(DiskIODriver*, unsigned char)</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, sdvolume.o(i._ZN8SdVolume4initEP12DiskIODriverh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SdVolume::init(DiskIODriver*, unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
</UL>

<P><STRONG><a name="[424]"></a>SdVolume::fatGet(unsigned, unsigned*)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sdvolume.o(i._ZN8SdVolume6fatGetEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::freeChain(unsigned)
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::chainSize(unsigned, unsigned*)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[42b]"></a>SdVolume::fatPut(unsigned, unsigned)</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sdvolume.o(i._ZN8SdVolume6fatPutEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::freeChain(unsigned)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
</UL>

<P><STRONG><a name="[41b]"></a>SdVolume::chainSize(unsigned, unsigned*)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, sdvolume.o(i._ZN8SdVolume9chainSizeEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SdVolume::chainSize(unsigned, unsigned*) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::isEOC(unsigned) const
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openRoot(SdVolume*)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[42a]"></a>SdVolume::freeChain(unsigned)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sdvolume.o(i._ZN8SdVolume9freeChainEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SdVolume::freeChain(unsigned) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::isEOC(unsigned) const
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
</UL>

<P><STRONG><a name="[3e7]"></a>Stopwatch::stop()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stopwatch.o(i._ZN9Stopwatch4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stopwatch::stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M77()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::abort_load()
</UL>

<P><STRONG><a name="[3e4]"></a>Stopwatch::pause()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stopwatch.o(i._ZN9Stopwatch5pauseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stopwatch::pause()
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M25()
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M76()
</UL>

<P><STRONG><a name="[52c]"></a>Stopwatch::reset()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stopwatch.o(i._ZN9Stopwatch5resetEv))
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::resume(unsigned)
</UL>

<P><STRONG><a name="[278]"></a>Stopwatch::start()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stopwatch.o(i._ZN9Stopwatch5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Stopwatch::start() &rArr; Stopwatch::duration()
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::reset()
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::resume_print()
</UL>

<P><STRONG><a name="[3e2]"></a>Stopwatch::resume(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stopwatch.o(i._ZN9Stopwatch6resumeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Stopwatch::resume(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
</UL>

<P><STRONG><a name="[3e5]"></a>Stopwatch::duration()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stopwatch.o(i._ZN9Stopwatch8durationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stopwatch::duration()
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[36c]"></a>GCodeQueue::RingBuffer::full(unsigned char) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, queue.o(i._ZNK10GCodeQueue10RingBuffer4fullEh))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_available_commands()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[376]"></a>GCodeQueue::RingBuffer::occupied() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, queue.o(i._ZNK10GCodeQueue10RingBuffer8occupiedEv))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
</UL>

<P><STRONG><a name="[412]"></a>SdBaseFile::isDir() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK10SdBaseFile5isDirEv))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDirCache()
</UL>

<P><STRONG><a name="[426]"></a>SdBaseFile::isFile() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK10SdBaseFile6isFileEv))
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[32f]"></a>SdBaseFile::isOpen() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cardreader.o(i._ZNK10SdBaseFile6isOpenEv))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openJobRecoveryFile(bool)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openRoot(SdVolume*)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::~SdBaseFile()
</UL>

<P><STRONG><a name="[40e]"></a>SdBaseFile::isRoot() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK10SdBaseFile6isRootEv))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
</UL>

<P><STRONG><a name="[52d]"></a>duration_t::day() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, m31.o(i._ZNK10duration_t3dayEv))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toString(char*) const
</UL>

<P><STRONG><a name="[3e6]"></a>duration_t::toString(char*) const</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, m31.o(i._ZNK10duration_t8toStringEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = duration_t::toString(char*) const &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::day() const
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
</UL>

<P><STRONG><a name="[415]"></a>SdVolume::clusterStartBlock(unsigned) const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK8SdVolume17clusterStartBlockEj))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
</UL>

<P><STRONG><a name="[427]"></a>SdVolume::isEOC(unsigned) const</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK8SdVolume5isEOCEj))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::freeChain(unsigned)
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::chainSize(unsigned, unsigned*)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[46e]"></a>std::isnan(float)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, settings.o(i._ZSt5isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[534]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5aa]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1a9]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlockDMA
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock_DMA
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResetCause()
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::init()
</UL>

<P><STRONG><a name="[5ab]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[5ac]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[536]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5ad]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[225]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toString(char*) const
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_autotune(heater_id_t)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
</UL>

<P><STRONG><a name="[47e]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
</UL>

<P><STRONG><a name="[5ae]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[537]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5af]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[5b0]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[523]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_printf_P(unsigned char, const char*, ...)
</UL>

<P><STRONG><a name="[5b1]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[53d]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[5b2]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[547]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_temperature_cpp_ca4fe824
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_cardreader_cpp_M23_STR
</UL>

<P><STRONG><a name="[327]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::synchronize(const char*)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[154]"></a>__cxa_pure_virtual</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cxxabi-compat.o(i.__cxa_pure_virtual))
<BR>[Address Reference Count : 2]<UL><LI> hardwareserial.o(.constdata__ZTV6Stream)
<LI> print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[538]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[314]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
</UL>

<P><STRONG><a name="[316]"></a>__hardfp_ceilf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, float, float)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[5b3]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[318]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
</UL>

<P><STRONG><a name="[317]"></a>__hardfp_floorf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, floorf.o(i.__hardfp_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, float, float)
</UL>

<P><STRONG><a name="[4f3]"></a>__hardfp_lroundf</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, lroundf.o(i.__hardfp_lroundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_lroundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(float, float, float, float)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(float)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(float, float, float, float, float, unsigned char, float)
</UL>

<P><STRONG><a name="[1e5]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr53_63(float)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr42_52(float)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr52sp(float)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr5rj(float)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr52sign(float)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr43sign(float, char)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr41sign(float)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr51rj(float)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr63(float)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr53sign(float)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr52(float)
</UL>

<P><STRONG><a name="[5b4]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[319]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
</UL>

<P><STRONG><a name="[313]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_task()
</UL>

<P><STRONG><a name="[3d6]"></a>__hardfp_strtof</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strtof.o(i.__hardfp_strtof))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_per_axis_units(AxisEnum)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M85()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
</UL>

<P><STRONG><a name="[544]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[542]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[53f]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[541]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[543]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[53e]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[188]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>

<P><STRONG><a name="[540]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[5b5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[5b6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[5b7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[53c]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[193]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2e2]"></a>adc_read</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, adc.o(i.adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_read &rArr; HAL_watchdog_refresh() &rArr; iwdg_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_adc_start_conversion(unsigned char)
</UL>

<P><STRONG><a name="[2a8]"></a>dtostrf</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, dtostrf.o(i.dtostrf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dtostrf &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
</UL>

<P><STRONG><a name="[494]"></a>enIrqRegistration</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, hc32f46x_interrupts.o(i.enIrqRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = enIrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DmaIrqRegister(stc_irq_regi_conf*, unsigned)
</UL>

<P><STRONG><a name="[495]"></a>enShareIrqEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.enShareIrqEnable))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DmaIrqRegister(stc_irq_regi_conf*, unsigned)
</UL>

<P><STRONG><a name="[111]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32f46x_utility.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[189]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_now_P(const char*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[539]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[310]"></a>init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, startup.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = init &rArr; [local to startup_cpp]::setup_SysClk() &rArr; CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_gpio
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_UartInit
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Extinterrupt
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResetCause()
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_systick
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adcs
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;premain()
</UL>

<P><STRONG><a name="[ab]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wstring.o(i.isspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2c8]"></a>iwdg_feed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iwdg.o(i.iwdg_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iwdg_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_RefreshCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
</UL>

<P><STRONG><a name="[248]"></a>iwdg_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, iwdg.o(i.iwdg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iwdg_init &rArr; Ddl_Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_RefreshCounter
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1ms
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_ClrResetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init()
</UL>

<P><STRONG><a name="[555]"></a>loop</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, marlincore.o(i.loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = loop &rArr; GCodeQueue::advance() &rArr; GCodeQueue::process_injected_command_P() &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M501() &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_now(const char*)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = main &rArr; loop &rArr; GCodeQueue::advance() &rArr; GCodeQueue::process_injected_command_P() &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M501() &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[175]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_now_P(const char*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[288]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_tim0.o(i.millis))
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tick()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::host_keepalive()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_user_response(unsigned, bool)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_steps(AxisEnum, short)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M85()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::T(signed char)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::dwell(unsigned)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::pause()
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M155()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::get_blink()
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMove::soon(AxisEnum)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update_buttons()
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::quick_feedback(bool)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::media_changed(unsigned char, unsigned char)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMove::task()
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::sync_fan_speeds(unsigned char(&)[1])
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short)
</UL>

<P><STRONG><a name="[556]"></a>setup</STRONG> (Thumb, 540 bytes, Stack size 24 bytes, marlincore.o(i.setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = setup &rArr; MarlinSettings::load() &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::reset()
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init()
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::show_bootscreen()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::init()
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::check()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::init()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::connected()
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_init()
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clear_reset_source()
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_delay_loop()
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_get_reset_source()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_ternary(bool, const char*, const char*, const char*, const char*)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[551]"></a>setup_Extinterrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_extint.o(i.setup_Extinterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[550]"></a>setup_adcs</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adc.o(i.setup_adcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = setup_adcs &rArr; [local to adc_c]::adc_setclk() &rArr; CLK_XtalCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_foreach(void(*)(adc_dev*))
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[54f]"></a>setup_gpio</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board_gpio.o(i.setup_gpio))
<BR><BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[54d]"></a>setup_systick</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, board_tim0.o(i.setup_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = setup_systick &rArr; CLK_GetClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to board_tim0_c]::__NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[54e]"></a>setup_time</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_tim0.o(i.setup_time))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[262]"></a>setup_time2A</STRONG> (Thumb, 134 bytes, Stack size 64 bytes, board_tim0.o(i.setup_time2A))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = setup_time2A &rArr; TIMER0_BaseInit &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IntCmd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to board_tim0_c]::__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to board_tim0_c]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to board_tim0_c]::__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_start(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[261]"></a>setup_time2B</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, board_tim0.o(i.setup_time2B))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = setup_time2B &rArr; TIMER0_BaseInit &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IntCmd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to board_tim0_c]::__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to board_tim0_c]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to board_tim0_c]::__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_start(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[31b]"></a>steup_sdio</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sdio_f1.o(i.steup_sdio))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = steup_sdio &rArr; Sdioc_Class::init() &rArr; SDCARD_Init &rArr; [local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*) &rArr; SDMMC_Cmd6_SwitchFunc &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::~Sdioc_Class()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::Sdioc_Class(M4_SDIOC_TypeDef*)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init()
</UL>

<P><STRONG><a name="[511]"></a>timer_disable_irq</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, board_tim0.o(i.timer_disable_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
</UL>

<P><STRONG><a name="[449]"></a>timer_enable_irq</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, board_tim0.o(i.timer_enable_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_enable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::endstop_triggered(AxisEnum)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(float, float, float, float, float, unsigned char, float)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::quick_stop()
</UL>

<P><STRONG><a name="[50f]"></a>timer_get_count</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, board_tim0.o(i.timer_get_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_get_count
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_GetCntReg
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_TIMED_PULSE(unsigned char)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
</UL>

<P><STRONG><a name="[2f7]"></a>timer_irq_enabled</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, board_tim0.o(i.timer_irq_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_interrupt_enabled(unsigned char)
</UL>

<P><STRONG><a name="[564]"></a>timer_preset_compare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, board_tim0.o(i.timer_preset_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer_preset_compare &rArr; TIMER0_WriteCmpReg &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_WriteCmpReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_compare
</UL>

<P><STRONG><a name="[2ce]"></a>timer_set_compare</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, board_tim0.o(i.timer_set_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_set_compare &rArr; timer_preset_compare &rArr; TIMER0_WriteCmpReg &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_preset_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_set_compare(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[4e3]"></a>u8g_Begin</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, u8g_ll_api.o(i.u8g_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitLL
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::firstPage()
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitSPI
</UL>

<P><STRONG><a name="[2fa]"></a>u8g_Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, u8g_delay.o(i.u8g_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_Delay &rArr; delayMicroseconds(unsigned) &rArr; Ddl_Delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
</UL>

<P><STRONG><a name="[25c]"></a>u8g_Draw8Pixel</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, u8g_ll_api.o(i.u8g_Draw8Pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8PixelLL
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_vline(_u8g_t*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_hline(_u8g_t*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHBitmapP
</UL>

<P><STRONG><a name="[567]"></a>u8g_Draw8PixelLL</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, u8g_ll_api.o(i.u8g_Draw8PixelLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
</UL>

<P><STRONG><a name="[4d9]"></a>u8g_DrawBitmapP</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, u8g_bitmap.o(i.u8g_DrawBitmapP))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = u8g_DrawBitmapP &rArr; u8g_DrawHBitmapP &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHBitmapP
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_custom_bootscreen(unsigned char)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawBitmapP(unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*)
</UL>

<P><STRONG><a name="[27f]"></a>u8g_DrawBox</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, u8g_rect.o(i.u8g_DrawBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = u8g_DrawBox &rArr; u8g_draw_box &rArr; u8g_draw_hline(_u8g_t*, unsigned char, unsigned char, unsigned char) &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_box
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_boxed_string(unsigned char, unsigned char, const char*, bool)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawBox(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4e0]"></a>u8g_DrawFrame</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, u8g_rect.o(i.u8g_DrawFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = u8g_DrawFrame &rArr; u8g_draw_vline(_u8g_t*, unsigned char, unsigned char, unsigned char) &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_vline(_u8g_t*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_hline(_u8g_t*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawFrame(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4da]"></a>u8g_DrawGlyph</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, u8g_font.o(i.u8g_DrawGlyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = u8g_DrawGlyph &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::write(unsigned char)
</UL>

<P><STRONG><a name="[569]"></a>u8g_DrawHBitmapP</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, u8g_bitmap.o(i.u8g_DrawHBitmapP))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = u8g_DrawHBitmapP &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBitmapP
</UL>

<P><STRONG><a name="[4e1]"></a>u8g_DrawHLine</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, u8g_rect.o(i.u8g_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = u8g_DrawHLine &rArr; u8g_draw_hline(_u8g_t*, unsigned char, unsigned char, unsigned char) &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_hline(_u8g_t*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawHLine(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[527]"></a>u8g_DrawPixel</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = u8g_DrawPixel &rArr; u8g_DrawPixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawPixelLL
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen()
</UL>

<P><STRONG><a name="[56c]"></a>u8g_DrawPixelLL</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, u8g_ll_api.o(i.u8g_DrawPixelLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_DrawPixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawPixel
</UL>

<P><STRONG><a name="[4bf]"></a>u8g_DrawStr</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, u8g_font.o(i.u8g_DrawStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = u8g_DrawStr &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_cb_draw_u8g(void*, const void*, const char*)
</UL>

<P><STRONG><a name="[246]"></a>u8g_DrawStrP</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, u8g_font.o(i.u8g_DrawStrP))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_DrawUtf8Str(_u8g_t*, unsigned, unsigned, const char*, unsigned short)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[4e4]"></a>u8g_FirstPage</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_ll_api.o(i.u8g_FirstPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_FirstPage &rArr; u8g_FirstPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPageLL
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::firstPage()
</UL>

<P><STRONG><a name="[56d]"></a>u8g_FirstPageLL</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_FirstPageLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_FirstPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPage
</UL>

<P><STRONG><a name="[285]"></a>u8g_GetFontBBXWidth</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_GetFontBBXWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_GetFontBBXWidth &rArr; [local to u8g_font_c]::u8g_font_GetBBXWidth(const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_GetBBXWidth(const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_wchar_max(unsigned, unsigned short)
</UL>

<P><STRONG><a name="[56e]"></a>u8g_GetHeightLL</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_GetHeightLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_GetHeightLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
</UL>

<P><STRONG><a name="[4be]"></a>u8g_GetStrPixelWidth</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, u8g_font.o(i.u8g_GetStrPixelWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = u8g_GetStrPixelWidth &rArr; u8g_font_calc_str_pixel_width(_u8g_t*, const char*, char(*)(const void*)) &rArr; u8g_GetGlyph(_u8g_t*, unsigned char) &rArr; [local to u8g_font_c]::u8g_CopyGlyphDataToCache(_u8g_t*, void*) &rArr; [local to u8g_font_c]::u8g_font_GetFormat(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_calc_str_pixel_width(_u8g_t*, const char*, char(*)(const void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_cb_draw_u8gstrlen(void*, const void*, const char*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_cb_draw_u8g(void*, const void*, const char*)
</UL>

<P><STRONG><a name="[56f]"></a>u8g_GetWidthLL</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_GetWidthLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
</UL>

<P><STRONG><a name="[565]"></a>u8g_InitLL</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_InitLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_InitLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
</UL>

<P><STRONG><a name="[4de]"></a>u8g_InitSPI</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, u8g_ll_api.o(i.u8g_InitSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = u8g_InitSPI &rArr; u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_ll_api_c]::u8g_init_data(_u8g_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::initSPI(_u8g_dev_t*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[568]"></a>u8g_IsBBXIntersection</STRONG> (Thumb, 182 bytes, Stack size 28 bytes, u8g_clip.o(i.u8g_IsBBXIntersection))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = u8g_IsBBXIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawHLine
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBox
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBitmapP
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawFrame
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>

<P><STRONG><a name="[524]"></a>u8g_NextPage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, u8g_ll_api.o(i.u8g_NextPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_NextPage &rArr; u8g_NextPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPageLL
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::show_custom_bootscreen()
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
</UL>

<P><STRONG><a name="[570]"></a>u8g_NextPageLL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_NextPageLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_NextPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPage
</UL>

<P><STRONG><a name="[27e]"></a>u8g_SetColorIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_ll_api.o(i.u8g_SetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_boxed_string(unsigned char, unsigned char, const char*, bool)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_ll_api_c]::u8g_init_data(_u8g_t*)
</UL>

<P><STRONG><a name="[245]"></a>u8g_SetFont</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, u8g_font.o(i.u8g_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_SetFont &rArr; u8g_UpdateRefHeight(_u8g_t*) &rArr; u8g_font_GetCapitalAHeight(const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight(_u8g_t*)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFontPosBaseline
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_DrawUtf8Str(_u8g_t*, unsigned, unsigned, const char*, unsigned short)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_GetUtf8StrPixelWidthP(_u8g_t*, const char*)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_GetUtf8StrPixelWidth(_u8g_t*, const char*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_font(MarlinFont)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_cb_draw_u8gstrlen(void*, const void*, const char*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_cb_draw_u8g(void*, const void*, const char*)
</UL>

<P><STRONG><a name="[4b7]"></a>u8g_SetFontPosBaseline</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_font.o(i.u8g_SetFontPosBaseline))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_ll_api_c]::u8g_init_data(_u8g_t*)
</UL>

<P><STRONG><a name="[566]"></a>u8g_UpdateDimension</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, u8g_ll_api.o(i.u8g_UpdateDimension))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_UpdateDimension &rArr; u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetWidthLL
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetHeightLL
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetModeLL(_u8g_t*, _u8g_dev_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
</UL>

<P><STRONG><a name="[241]"></a>u8g_call_dev_fn</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, u8g_ll_api.o(i.u8g_call_dev_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPageLL
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitLL
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetWidthLL
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetHeightLL
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPageLL
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawPixelLL
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8PixelLL
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetModeLL(_u8g_t*, _u8g_dev_t*)
</UL>

<P><STRONG><a name="[b]"></a>u8g_com_null_fn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, u8g_com_null.o(i.u8g_com_null_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_com_null_fn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ultralcd_st7920_u8glib_rrd_avr.o(.data)
</UL>
<P><STRONG><a name="[2fb]"></a>u8g_dev_pb16h1_base_fn</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, u8g_pb16h1.o(i.u8g_dev_pb16h1_base_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = u8g_dev_pb16h1_base_fn &rArr; u8g_pb16h1_Set8PixelOpt2(_u8g_pb_t*, _u8g_dev_arg_pixel_t*) &rArr; u8g_pb16h1_SetPixel(_u8g_pb_t*, const _u8g_dev_arg_pixel_t*) &rArr; u8g_pb16h1_set_pixel(_u8g_pb_t*, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16h1_Set8PixelOpt2(_u8g_pb_t*, _u8g_dev_arg_pixel_t*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16h1_SetPixel(_u8g_pb_t*, const _u8g_dev_arg_pixel_t*)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16h1_Clear(_u8g_pb_t*)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_page_Next
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_page_First
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_Is8PixelVisible
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_GetPageBox
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_rrd_st7920_128x64_fn(_u8g_t*, _u8g_dev_t*, unsigned char, void*)
</UL>

<P><STRONG><a name="[56a]"></a>u8g_draw_box</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, u8g_rect.o(i.u8g_draw_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = u8g_draw_box &rArr; u8g_draw_hline(_u8g_t*, unsigned char, unsigned char, unsigned char) &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_hline(_u8g_t*, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawBox
</UL>

<P><STRONG><a name="[56b]"></a>u8g_draw_glyph</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, u8g_font.o(i.u8g_draw_glyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph(_u8g_t*, unsigned char)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_GetGlyphDataStart(const void*, void*)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawGlyph
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStrP
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr
</UL>

<P><STRONG><a name="[21f]"></a>u8g_font_GetFontEndEncoding</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontEndEncoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontEndEncoding
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_get_byte(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph(_u8g_t*, unsigned char)
</UL>

<P><STRONG><a name="[21e]"></a>u8g_font_GetFontStartEncoding</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontStartEncoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontStartEncoding
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_get_byte(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph(_u8g_t*, unsigned char)
</UL>

<P><STRONG><a name="[11b]"></a>u8g_font_calc_vref_font</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_font.o(i.u8g_font_calc_vref_font))
<BR>[Address Reference Count : 1]<UL><LI> u8g_font.o(i.u8g_SetFontPosBaseline)
</UL>
<P><STRONG><a name="[573]"></a>u8g_page_First</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, u8g_page.o(i.u8g_page_First))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16h1_base_fn
</UL>

<P><STRONG><a name="[574]"></a>u8g_page_Next</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, u8g_page.o(i.u8g_page_Next))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16h1_base_fn
</UL>

<P><STRONG><a name="[575]"></a>u8g_pb_GetPageBox</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, u8g_pb.o(i.u8g_pb_GetPageBox))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16h1_base_fn
</UL>

<P><STRONG><a name="[571]"></a>u8g_pb_Is8PixelVisible</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, u8g_pb.o(i.u8g_pb_Is8PixelVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_pb_Is8PixelVisible &rArr; u8g_pb_IsYIntersection
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_IsYIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16h1_base_fn
</UL>

<P><STRONG><a name="[576]"></a>u8g_pb_IsYIntersection</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, u8g_pb.o(i.u8g_pb_IsYIntersection))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = u8g_pb_IsYIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_Is8PixelVisible
</UL>

<P><STRONG><a name="[102]"></a>u8g_state_dummy_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, u8g_state.o(i.u8g_state_dummy_cb))
<BR>[Address Reference Count : 1]<UL><LI> u8g_ll_api.o(i._ZN34_INTERNAL_12_u8g_ll_api_c_2adb469613u8g_init_dataEP6_u8g_t)
</UL>
<P><STRONG><a name="[450]"></a>usart_enable</STRONG> (Thumb, 602 bytes, Stack size 16 bytes, usart.o(i.usart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usart_enable &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[44e]"></a>usart_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usart_init &rArr; USART_UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_init(ring_buffer*, unsigned short, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[44f]"></a>usart_set_baud_rate</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usart.o(i.usart_set_baud_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usart_set_baud_rate &rArr; USART_SetBaudrate &rArr; [local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[451]"></a>usart_tx</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usart.o(i.usart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usart_tx &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_insert(ring_buffer*, unsigned char)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_empty(ring_buffer*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_full(ring_buffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
</UL>

<P><STRONG><a name="[30d]"></a>yield</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wirish_time.o(i.yield))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
</UL>

<P><STRONG><a name="[342]"></a>void SERIAL_ECHO&lang;char*&rang;(T1)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cardreader.o(t._Z11SERIAL_ECHOIPcEvT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void SERIAL_ECHO&lang;char*&rang;(T1) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[433]"></a>void SERIAL_ECHO&lang;long&rang;(T1)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, temperature.o(t._Z11SERIAL_ECHOIlEvT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = void SERIAL_ECHO&lang;long&rang;(T1) &rArr; Print::print(long, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
</UL>

<P><STRONG><a name="[3db]"></a>void SERIAL_ECHO&lang;unsigned short&rang;(T1)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gcode.o(t._Z11SERIAL_ECHOItEvT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = void SERIAL_ECHO&lang;unsigned short&rang;(T1) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
</UL>

<P><STRONG><a name="[4ba]"></a>void SERIAL_PRINT&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, temperature.o(t._Z12SERIAL_PRINTIfiEvT_T0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = void SERIAL_PRINT&lang;float, int&rang;(T1, T2) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)
</UL>

<P><STRONG><a name="[343]"></a>void SERIAL_ECHOLN&lang;unsigned&rang;(T1)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cardreader.o(t._Z13SERIAL_ECHOLNIjEvT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = void SERIAL_ECHOLN&lang;unsigned&rang;(T1) &rArr; Print::println(unsigned, int) &rArr; Print::print(unsigned, int) &rArr; Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[4d6]"></a>CircularQueue&lang;tone_t, (unsigned char)4&rang;::isFull()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, buzzer.o(t._ZN13CircularQueueI6tone_tLh4EE6isFullEv))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[4d5]"></a>CircularQueue&lang;tone_t, (unsigned char)4&rang;::isEmpty()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, buzzer.o(t._ZN13CircularQueueI6tone_tLh4EE7isEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tick()
</UL>

<P><STRONG><a name="[12e]"></a>TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::edit_screen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E6actionEPKcPsssPFvvEb)
</UL>
<P><STRONG><a name="[270]"></a>TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E4drawEbhPKcPsz))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_int3::strfunc(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
</UL>

<P><STRONG><a name="[12c]"></a>TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::load(void*, int)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E4loadEPvi))
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E11edit_screenEv)
</UL>
<P><STRONG><a name="[26f]"></a>TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E6actionEPKcPsssPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::save_previous_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
</UL>

<P><STRONG><a name="[12d]"></a>TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::to_string(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::to_string(int) &rArr; MenuEditItemInfo_int3::strfunc(float) &rArr; i16tostr3rj(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_int3::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E11edit_screenEv)
</UL>
<P><STRONG><a name="[131]"></a>TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::edit_screen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E6actionEPKcPfffPFvvEb)
</UL>
<P><STRONG><a name="[297]"></a>TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float3::strfunc(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
</UL>

<P><STRONG><a name="[12f]"></a>TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::load(void*, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E4loadEPvi))
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E11edit_screenEv)
</UL>
<P><STRONG><a name="[295]"></a>TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::action(const char*, float*, float, float, void(*)(), bool)</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E6actionEPKcPfffPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::action(const char*, float*, float, float, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::save_previous_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
</UL>

<P><STRONG><a name="[130]"></a>TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::to_string(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::to_string(int) &rArr; MenuEditItemInfo_float3::strfunc(float) &rArr; i16tostr3rj(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float3::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E11edit_screenEv)
</UL>
<P><STRONG><a name="[134]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::edit_screen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E6actionEPKcPfffPFvvEb)
</UL>
<P><STRONG><a name="[2da]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float5::strfunc(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
</UL>

<P><STRONG><a name="[132]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::load(void*, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E4loadEPvi))
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E11edit_screenEv)
</UL>
<P><STRONG><a name="[2d9]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool)</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E6actionEPKcPfffPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::save_previous_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
</UL>

<P><STRONG><a name="[133]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::to_string(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::to_string(int) &rArr; MenuEditItemInfo_float5::strfunc(float) &rArr; ftostr5rj(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float5::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E11edit_screenEv)
</UL>
<P><STRONG><a name="[ce]"></a>TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::edit_screen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_filamentv)
</UL>
<P><STRONG><a name="[2d6]"></a>TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float43::strfunc(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_filament()
</UL>

<P><STRONG><a name="[135]"></a>TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::load(void*, int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E11edit_screenEv)
</UL>
<P><STRONG><a name="[2d3]"></a>TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::scale(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_filament()
</UL>

<P><STRONG><a name="[57b]"></a>TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::unscale(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::to_string(int)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[136]"></a>TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::to_string(int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::to_string(int) &rArr; MenuEditItemInfo_float43::strfunc(float) &rArr; ftostr43sign(float, char) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::unscale(float)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float43::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E11edit_screenEv)
</UL>
<P><STRONG><a name="[139]"></a>TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::edit_screen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E6actionEPKcPfffPFvvEb)
</UL>
<P><STRONG><a name="[2f4]"></a>TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float51::strfunc(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()
</UL>

<P><STRONG><a name="[137]"></a>TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::load(void*, int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E11edit_screenEv)
</UL>
<P><STRONG><a name="[57d]"></a>TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::scale(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::action(const char*, float*, float, float, void(*)(), bool)
</UL>

<P><STRONG><a name="[2f3]"></a>TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::action(const char*, float*, float, float, void(*)(), bool)</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E6actionEPKcPfffPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::action(const char*, float*, float, float, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::save_previous_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::scale(float)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()
</UL>

<P><STRONG><a name="[57c]"></a>TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::unscale(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::to_string(int)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[138]"></a>TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::to_string(int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::to_string(int) &rArr; MenuEditItemInfo_float51::strfunc(float) &rArr; ftostr51rj(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::unscale(float)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float51::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E11edit_screenEv)
</UL>
<P><STRONG><a name="[ba]"></a>TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::edit_screen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 3]<UL><LI> menu_temperature.o(i._Z16menu_temperaturev)
<LI> menu_tune.o(i._Z9menu_tunev)
<LI> menu_configuration.o(i._Z36_menu_configuration_preheat_settingsv)
</UL>
<P><STRONG><a name="[275]"></a>TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE4drawEbhPKcPhz))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_percent::strfunc(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
</UL>

<P><STRONG><a name="[13a]"></a>TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::load(void*, int)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE11edit_screenEv)
</UL>
<P><STRONG><a name="[271]"></a>TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::scale(float)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
</UL>

<P><STRONG><a name="[57e]"></a>TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::unscale(float)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::to_string(int)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[13b]"></a>TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::to_string(int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::to_string(int) &rArr; MenuEditItemInfo_percent::strfunc(float) &rArr; ui8tostr4pctrj(unsigned char) &rArr; pcttostrpctrj(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::unscale(float)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_percent::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE11edit_screenEv)
</UL>
<P><STRONG><a name="[13e]"></a>TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::edit_screen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E6actionEPKcPjjjPFvvEb)
</UL>
<P><STRONG><a name="[2f2]"></a>TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::draw(bool, unsigned char, const char*, unsigned*, ...)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E4drawEbhPKcPjz))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::draw(bool, unsigned char, const char*, unsigned*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_long5_25::strfunc(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
</UL>

<P><STRONG><a name="[13c]"></a>TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::load(void*, int)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E11edit_screenEv)
</UL>
<P><STRONG><a name="[580]"></a>TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::scale(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::action(const char*, unsigned*, unsigned, unsigned, void(*)(), bool)
</UL>

<P><STRONG><a name="[2f1]"></a>TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::action(const char*, unsigned*, unsigned, unsigned, void(*)(), bool)</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E6actionEPKcPjjjPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::action(const char*, unsigned*, unsigned, unsigned, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::save_previous_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::scale(float)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
</UL>

<P><STRONG><a name="[57f]"></a>TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::unscale(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::to_string(int)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[13d]"></a>TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::to_string(int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::to_string(int) &rArr; MenuEditItemInfo_long5_25::strfunc(float) &rArr; ftostr5rj(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::unscale(float)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_long5_25::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E11edit_screenEv)
</UL>
<P><STRONG><a name="[141]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::edit_screen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E6actionEPKcPfffPFvvEb)
</UL>
<P><STRONG><a name="[2f0]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float5_25::strfunc(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
</UL>

<P><STRONG><a name="[13f]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::load(void*, int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E11edit_screenEv)
</UL>
<P><STRONG><a name="[582]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::scale(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::action(const char*, float*, float, float, void(*)(), bool)
</UL>

<P><STRONG><a name="[2ef]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::action(const char*, float*, float, float, void(*)(), bool)</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E6actionEPKcPfffPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::action(const char*, float*, float, float, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::save_previous_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::scale(float)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
</UL>

<P><STRONG><a name="[581]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::unscale(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::to_string(int)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[140]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::to_string(int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::to_string(int) &rArr; MenuEditItemInfo_float5_25::strfunc(float) &rArr; ftostr5rj(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::unscale(float)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float5_25::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E11edit_screenEv)
</UL>
<P><STRONG><a name="[d8]"></a>TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::edit_screen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI27MenuEditItemInfo_float42_52E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z25menu_advanced_temperaturev)
</UL>
<P><STRONG><a name="[2ea]"></a>TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, menu_advanced.o(t._ZN13TMenuEditItemI27MenuEditItemInfo_float42_52E4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float42_52::strfunc(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
</UL>

<P><STRONG><a name="[142]"></a>TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::load(void*, int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI27MenuEditItemInfo_float42_52E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI27MenuEditItemInfo_float42_52E11edit_screenEv)
</UL>
<P><STRONG><a name="[2e9]"></a>TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::scale(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI27MenuEditItemInfo_float42_52E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
</UL>

<P><STRONG><a name="[583]"></a>TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::unscale(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI27MenuEditItemInfo_float42_52E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::to_string(int)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[143]"></a>TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::to_string(int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI27MenuEditItemInfo_float42_52E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::to_string(int) &rArr; MenuEditItemInfo_float42_52::strfunc(float) &rArr; ftostr42_52(float) &rArr; ftostr52(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float42_52&rang;::unscale(float)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float42_52::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI27MenuEditItemInfo_float42_52E11edit_screenEv)
</UL>
<P><STRONG><a name="[146]"></a>TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::edit_screen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE6actionEPKcPfffPFvvEb)
</UL>
<P><STRONG><a name="[2ec]"></a>TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float41sign::strfunc(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
</UL>

<P><STRONG><a name="[144]"></a>TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::load(void*, int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE11edit_screenEv)
</UL>
<P><STRONG><a name="[585]"></a>TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::scale(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
</UL>

<P><STRONG><a name="[2eb]"></a>TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::action(const char*, float*, float, float, void(*)(), bool)</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE6actionEPKcPfffPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::action(const char*, float*, float, float, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::save_previous_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::scale(float)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
</UL>

<P><STRONG><a name="[584]"></a>TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::unscale(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::to_string(int)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[145]"></a>TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::to_string(int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::to_string(int) &rArr; MenuEditItemInfo_float41sign::strfunc(float) &rArr; ftostr41sign(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::unscale(float)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float41sign::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float41signE11edit_screenEv)
</UL>
<P><STRONG><a name="[149]"></a>TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::edit_screen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE6actionEPKcPfffPFvvEb)
</UL>
<P><STRONG><a name="[299]"></a>TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float52sign::strfunc(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
</UL>

<P><STRONG><a name="[147]"></a>TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::load(void*, int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE11edit_screenEv)
</UL>
<P><STRONG><a name="[587]"></a>TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::scale(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
</UL>

<P><STRONG><a name="[298]"></a>TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool)</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE6actionEPKcPfffPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::save_previous_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::scale(float)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
</UL>

<P><STRONG><a name="[586]"></a>TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::unscale(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::to_string(int)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[148]"></a>TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::to_string(int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::to_string(int) &rArr; MenuEditItemInfo_float52sign::strfunc(float) &rArr; ftostr52sign(float) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::unscale(float)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float52sign::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE11edit_screenEv)
</UL>
<P><STRONG><a name="[470]"></a>void MarlinSettings::EEPROM_READ&lang;PID_t&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READI5PID_tEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = void MarlinSettings::EEPROM_READ&lang;PID_t&rang;(T1&) &rArr; PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool) &rArr; eeprom_read_byte(unsigned char*) &rArr; BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[46c]"></a>void MarlinSettings::EEPROM_READ&lang;XYval&lang;float&rang;&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READI5XYvalIfEEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = void MarlinSettings::EEPROM_READ&lang;XYval&lang;float&rang;&rang;(T1&) &rArr; PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool) &rArr; eeprom_read_byte(unsigned char*) &rArr; BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[46a]"></a>void MarlinSettings::EEPROM_READ&lang;XYZval&lang;float&rang;&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READI6XYZvalIfEEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = void MarlinSettings::EEPROM_READ&lang;XYZval&lang;float&rang;&rang;(T1&) &rArr; PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool) &rArr; eeprom_read_byte(unsigned char*) &rArr; BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[46b]"></a>void MarlinSettings::EEPROM_READ&lang;signed char&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READIaEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = void MarlinSettings::EEPROM_READ&lang;signed char&rang;(T1&) &rArr; PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool) &rArr; eeprom_read_byte(unsigned char*) &rArr; BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[46d]"></a>void MarlinSettings::EEPROM_READ&lang;bool&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READIbEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = void MarlinSettings::EEPROM_READ&lang;bool&rang;(T1&) &rArr; PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool) &rArr; eeprom_read_byte(unsigned char*) &rArr; BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[469]"></a>void MarlinSettings::EEPROM_READ&lang;float&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READIfEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = void MarlinSettings::EEPROM_READ&lang;float&rang;(T1&) &rArr; PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool) &rArr; eeprom_read_byte(unsigned char*) &rArr; BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[471]"></a>void MarlinSettings::EEPROM_READ&lang;unsigned char&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READIhEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = void MarlinSettings::EEPROM_READ&lang;unsigned char&rang;(T1&) &rArr; PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool) &rArr; eeprom_read_byte(unsigned char*) &rArr; BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[46f]"></a>void MarlinSettings::EEPROM_READ&lang;short&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READIsEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = void MarlinSettings::EEPROM_READ&lang;short&rang;(T1&) &rArr; PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool) &rArr; eeprom_read_byte(unsigned char*) &rArr; BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[463]"></a>void MarlinSettings::EEPROM_WRITE&lang;PID_t&rang;(const T1&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEI5PID_tEEvRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = void MarlinSettings::EEPROM_WRITE&lang;PID_t&rang;(const T1&) &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[460]"></a>void MarlinSettings::EEPROM_WRITE&lang;XYval&lang;float&rang;&rang;(const T1&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEI5XYvalIfEEEvRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = void MarlinSettings::EEPROM_WRITE&lang;XYval&lang;float&rang;&rang;(const T1&) &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[45e]"></a>void MarlinSettings::EEPROM_WRITE&lang;XYZval&lang;float&rang;&rang;(const T1&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEI6XYZvalIfEEEvRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = void MarlinSettings::EEPROM_WRITE&lang;XYZval&lang;float&rang;&rang;(const T1&) &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[45a]"></a>void MarlinSettings::EEPROM_WRITE&lang;char[4]&rang;(const T1&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEIA4_cEEvRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = void MarlinSettings::EEPROM_WRITE&lang;char[4]&rang;(const T1&) &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[45f]"></a>void MarlinSettings::EEPROM_WRITE&lang;signed char&rang;(const T1&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEIaEEvRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = void MarlinSettings::EEPROM_WRITE&lang;signed char&rang;(const T1&) &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[461]"></a>void MarlinSettings::EEPROM_WRITE&lang;bool&rang;(const T1&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEIbEEvRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = void MarlinSettings::EEPROM_WRITE&lang;bool&rang;(const T1&) &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[45d]"></a>void MarlinSettings::EEPROM_WRITE&lang;float&rang;(const T1&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEIfEEvRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = void MarlinSettings::EEPROM_WRITE&lang;float&rang;(const T1&) &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[45b]"></a>void MarlinSettings::EEPROM_WRITE&lang;unsigned char&rang;(const T1&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEIhEEvRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = void MarlinSettings::EEPROM_WRITE&lang;unsigned char&rang;(const T1&) &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[462]"></a>void MarlinSettings::EEPROM_WRITE&lang;short&rang;(const T1&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEIsEEvRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = void MarlinSettings::EEPROM_WRITE&lang;short&rang;(const T1&) &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[467]"></a>void MarlinSettings::EEPROM_READ_ALWAYS&lang;unsigned char&rang;(T1&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, settings.o(t._ZN14MarlinSettings18EEPROM_READ_ALWAYSIhEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = void MarlinSettings::EEPROM_READ_ALWAYS&lang;unsigned char&rang;(T1&) &rArr; PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool) &rArr; eeprom_read_byte(unsigned char*) &rArr; BL24CXX::readOneByte(unsigned short) &rArr; IIC::read_byte(unsigned char) &rArr; IIC::nAck() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1c1]"></a>[local to hc32f46x_sdioc_c]::SdiocGetClkDiv(unsigned, unsigned)</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, hc32f46x_sdioc.o(i._ZN38_INTERNAL_16_hc32f46x_sdioc_c_89428c0814SdiocGetClkDivEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to hc32f46x_sdioc_c]::SdiocGetClkDiv(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetClk
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_Init
</UL>

<P><STRONG><a name="[1c0]"></a>[local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hc32f46x_sdioc.o(i._ZN38_INTERNAL_16_hc32f46x_sdioc_c_89428c0821SdiocGetInternDataPtrEPK16M4_SDIOC_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_IrqHandler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_Init
</UL>

<P><STRONG><a name="[1db]"></a>[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i._ZN39_INTERNAL_17_hc32f46x_timer0_c_4644dad510AsyncDelayEP15M4_TMR0_TypeDef15en_tim0_channel19en_functional_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::TIMER0_GetClkMode(M4_TMR0_TypeDef*, en_tim0_channel)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_WriteCmpReg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IntCmd
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ClearFlag
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
</UL>

<P><STRONG><a name="[4c0]"></a>[local to hc32f46x_timer0_c]::TIMER0_GetClkMode(M4_TMR0_TypeDef*, en_tim0_channel)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hc32f46x_timer0.o(i._ZN39_INTERNAL_17_hc32f46x_timer0_c_4644dad517TIMER0_GetClkModeEP15M4_TMR0_TypeDef15en_tim0_channel))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>

<P><STRONG><a name="[4bb]"></a>[local to hc32f46x_usart_c]::UsartGetClk(const M4_USART_TypeDef*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hc32f46x_usart.o(i._ZN38_INTERNAL_16_hc32f46x_usart_c_0262f0bf11UsartGetClkEPK16M4_USART_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetClkSyncBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetUartBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[1e1]"></a>[local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned)</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, hc32f46x_usart.o(i._ZN38_INTERNAL_16_hc32f46x_usart_c_0262f0bf13SetScBaudrateEP16M4_USART_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::UsartGetClk(const M4_USART_TypeDef*)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[1e3]"></a>[local to hc32f46x_usart_c]::SetUartBaudrate(M4_USART_TypeDef*, unsigned)</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, hc32f46x_usart.o(i._ZN38_INTERNAL_16_hc32f46x_usart_c_0262f0bf15SetUartBaudrateEP16M4_USART_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to hc32f46x_usart_c]::SetUartBaudrate(M4_USART_TypeDef*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::UsartGetClk(const M4_USART_TypeDef*)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[1e2]"></a>[local to hc32f46x_usart_c]::SetClkSyncBaudrate(M4_USART_TypeDef*, unsigned)</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, hc32f46x_usart.o(i._ZN38_INTERNAL_16_hc32f46x_usart_c_0262f0bf18SetClkSyncBaudrateEP16M4_USART_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [local to hc32f46x_usart_c]::SetClkSyncBaudrate(M4_USART_TypeDef*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::UsartGetClk(const M4_USART_TypeDef*)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[19f]"></a>[local to hc32f46x_utility_c]::SetUartBaudrate(unsigned)</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, hc32f46x_utility.o(i._ZN40_INTERNAL_18_hc32f46x_utility_c_985ce00315SetUartBaudrateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to hc32f46x_utility_c]::SetUartBaudrate(unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_UartInit
</UL>

<P><STRONG><a name="[156]"></a>__sti___12_board_gpio_c_PIN_MAP</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, board_gpio.o(i.__sti___12_board_gpio_c_PIN_MAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___12_board_gpio_c_PIN_MAP &rArr; HardwareSerial::HardwareSerial(usart_dev*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial(usart_dev*, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_gpio.o(.init_array)
</UL>
<P><STRONG><a name="[157]"></a>__sti___14_MarlinCore_cpp_card</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, marlincore.o(i.__sti___14_MarlinCore_cpp_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___14_MarlinCore_cpp_card &rArr; CardReader::CardReader() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::CardReader()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> marlincore.o(.init_array)
</UL>
<P><STRONG><a name="[158]"></a>__sti___13_powerloss_cpp_1e506b3c</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, powerloss.o(i.__sti___13_powerloss_cpp_1e506b3c))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __sti___13_powerloss_cpp_1e506b3c &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerloss.o(.init_array)
</UL>
<P><STRONG><a name="[3f3]"></a>[local to M115_cpp]::cap_line(const char*, bool)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, m115.o(i._ZN29_INTERNAL_8_M115_cpp_d86c21268cap_lineEPKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to M115_cpp]::cap_line(const char*, bool) &rArr; serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M115()
</UL>

<P><STRONG><a name="[315]"></a>const T1 [local to G2_G3_cpp]::ABS&lang;float&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, g2_g3.o(t._ZN30_INTERNAL_9_G2_G3_cpp_e4fdbed73ABSIfEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
</UL>

<P><STRONG><a name="[44a]"></a>[local to marlinui_DOGM_cpp]::mark_as_selected(unsigned char, bool)</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, marlinui_dogm.o(i._ZN34_INTERNAL_17_marlinui_DOGM_cpp_u8g16mark_as_selectedEhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [local to marlinui_DOGM_cpp]::mark_as_selected(unsigned char, bool) &rArr; U8GLIB::drawHLine(unsigned char, unsigned char, unsigned char) &rArr; u8g_DrawHLine &rArr; u8g_draw_hline(_u8g_t*, unsigned char, unsigned char, unsigned char) &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_moveto(unsigned char, unsigned char)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8GLIB::drawHLine(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdbase::draw(bool, unsigned char, const char*, CardReader&, bool)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
</UL>

<P><STRONG><a name="[159]"></a>__sti___17_marlinui_DOGM_cpp_u8g</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, marlinui_dogm.o(i.__sti___17_marlinui_DOGM_cpp_u8g))
<BR>[Address Reference Count : 1]<UL><LI> marlinui_dogm.o(.init_array)
</UL>
<P><STRONG><a name="[4bc]"></a>[local to u8g_fontutf8_cpp]::fontgroup_find(_font_group_t*, unsigned)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, u8g_fontutf8.o(i._ZN38_INTERNAL_16_u8g_fontutf8_cpp_853c9b3b14fontgroup_findEP13_font_group_tj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [local to u8g_fontutf8_cpp]::fontgroup_find(_font_group_t*, unsigned) &rArr; pf_bsearch_r(void*, unsigned, int(*)(void*, unsigned, void*), void*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_bsearch_r(void*, unsigned, int(*)(void*, unsigned, void*), void*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_drawwchar(_font_group_t*, const void*, unsigned, void*, int(*)(void*, const void*, const char*))
</UL>

<P><STRONG><a name="[244]"></a>[local to u8g_fontutf8_cpp]::fontgroup_drawwchar(_font_group_t*, const void*, unsigned, void*, int(*)(void*, const void*, const char*))</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, u8g_fontutf8.o(i._ZN38_INTERNAL_16_u8g_fontutf8_cpp_853c9b3b19fontgroup_drawwcharEP13_font_group_tPKvjPvPFiS4_S3_PKcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [local to u8g_fontutf8_cpp]::fontgroup_drawwchar(_font_group_t*, const void*, unsigned, void*, int(*)(void*, const void*, const char*)) &rArr; [local to u8g_fontutf8_cpp]::fontgroup_find(_font_group_t*, unsigned) &rArr; pf_bsearch_r(void*, unsigned, int(*)(void*, unsigned, void*), void*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_find(_font_group_t*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_drawstring(_font_group_t*, const void*, const char*, unsigned char(*)(unsigned char*), void*, int(*)(void*, const void*, const char*))
</UL>

<P><STRONG><a name="[269]"></a>[local to u8g_fontutf8_cpp]::fontgroup_drawstring(_font_group_t*, const void*, const char*, unsigned char(*)(unsigned char*), void*, int(*)(void*, const void*, const char*))</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, u8g_fontutf8.o(i._ZN38_INTERNAL_16_u8g_fontutf8_cpp_853c9b3b20fontgroup_drawstringEP13_font_group_tPKvPKcPFhPhEPvPFiS9_S3_S5_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [local to u8g_fontutf8_cpp]::fontgroup_drawstring(_font_group_t*, const void*, const char*, unsigned char(*)(unsigned char*), void*, int(*)(void*, const void*, const char*)) &rArr; [local to u8g_fontutf8_cpp]::fontgroup_drawwchar(_font_group_t*, const void*, unsigned, void*, int(*)(void*, const void*, const char*)) &rArr; [local to u8g_fontutf8_cpp]::fontgroup_find(_font_group_t*, unsigned) &rArr; pf_bsearch_r(void*, unsigned, int(*)(void*, unsigned, void*), void*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_fontutf8_cpp]::fontgroup_drawwchar(_font_group_t*, const void*, unsigned, void*, int(*)(void*, const void*, const char*))
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_DrawUtf8Str(_u8g_t*, unsigned, unsigned, const char*, unsigned short)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_GetUtf8StrPixelWidthP(_u8g_t*, const char*)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_GetUtf8StrPixelWidth(_u8g_t*, const char*)
</UL>

<P><STRONG><a name="[b4]"></a>[local to u8g_fontutf8_cpp]::fontgroup_cb_draw_u8g(void*, const void*, const char*)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, u8g_fontutf8.o(i._ZN38_INTERNAL_16_u8g_fontutf8_cpp_853c9b3b21fontgroup_cb_draw_u8gEPvPKvPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = [local to u8g_fontutf8_cpp]::fontgroup_cb_draw_u8g(void*, const void*, const char*) &rArr; u8g_DrawStr &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetStrPixelWidth
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr
</UL>
<BR>[Address Reference Count : 3]<UL><LI> u8g_fontutf8.o(i._Z13uxg_DrawWcharP6_u8g_tjjjt)
<LI> u8g_fontutf8.o(i._Z15uxg_DrawUtf8StrP6_u8g_tjjPKct)
<LI> u8g_fontutf8.o(i._Z16uxg_DrawUtf8StrPP6_u8g_tjjPKct)
</UL>
<P><STRONG><a name="[d7]"></a>[local to u8g_fontutf8_cpp]::fontgroup_cb_draw_u8gstrlen(void*, const void*, const char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, u8g_fontutf8.o(i._ZN38_INTERNAL_16_u8g_fontutf8_cpp_853c9b3b27fontgroup_cb_draw_u8gstrlenEPvPKvPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = [local to u8g_fontutf8_cpp]::fontgroup_cb_draw_u8gstrlen(void*, const void*, const char*) &rArr; u8g_GetStrPixelWidth &rArr; u8g_font_calc_str_pixel_width(_u8g_t*, const char*, char(*)(const void*)) &rArr; u8g_GetGlyph(_u8g_t*, unsigned char) &rArr; [local to u8g_font_c]::u8g_CopyGlyphDataToCache(_u8g_t*, void*) &rArr; [local to u8g_font_c]::u8g_font_GetFormat(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetStrPixelWidth
</UL>
<BR>[Address Reference Count : 2]<UL><LI> u8g_fontutf8.o(i._Z25uxg_GetUtf8StrPixelWidthPP6_u8g_tPKc)
<LI> u8g_fontutf8.o(i._Z24uxg_GetUtf8StrPixelWidthP6_u8g_tPKc)
</UL>
<P><STRONG><a name="[103]"></a>[local to u8g_fontutf8_cpp]::pf_bsearch_cb_comp_fntifo_pgm(void*, unsigned, void*)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, u8g_fontutf8.o(i._ZN38_INTERNAL_16_u8g_fontutf8_cpp_853c9b3b29pf_bsearch_cb_comp_fntifo_pgmEPvjS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to u8g_fontutf8_cpp]::pf_bsearch_cb_comp_fntifo_pgm(void*, unsigned, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g_fontutf8.o(i._ZN38_INTERNAL_16_u8g_fontutf8_cpp_853c9b3b14fontgroup_findEP13_font_group_tj)
</UL>
<P><STRONG><a name="[105]"></a>MarlinUI::synchronize(const char*)::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, menu.o(i._ZZN8MarlinUI11synchronizeEPKcENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = MarlinUI::synchronize(const char*)::[lambda() (instance 1)]::_FUN() &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(i._ZN8MarlinUI11synchronizeEPKc)
</UL>
<P><STRONG><a name="[52e]"></a>menu_advanced_settings()::[lambda() (instance 3)]::operator ()() const</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, menu_advanced.o(i._ZZ22menu_advanced_settingsvENKUlvE1_clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = menu_advanced_settings()::[lambda() (instance 3)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*) &rArr; wrap_string_P(unsigned char&, unsigned char&, const char*, bool) &rArr; _wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()::[lambda() (instance 3)]::_FUN()
</UL>

<P><STRONG><a name="[d5]"></a>menu_advanced_settings()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ22menu_advanced_settingsvENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = menu_advanced_settings()::[lambda() (instance 3)]::_FUN() &rArr; menu_advanced_settings()::[lambda() (instance 3)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*) &rArr; wrap_string_P(unsigned char&, unsigned char&, const char*, bool) &rArr; _wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()::[lambda() (instance 3)]::operator ()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[2d7]"></a>menu_advanced_settings()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ22menu_advanced_settingsvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = menu_advanced_settings()::[lambda() (instance 1)]::_FUN() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
</UL>

<P><STRONG><a name="[da]"></a>menu_advanced_temperature()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ25menu_advanced_temperaturevENUlvE1_4_FUNEv))
<BR><BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_scalePID_d(short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z25menu_advanced_temperaturev)
</UL>
<P><STRONG><a name="[db]"></a>menu_advanced_temperature()::[lambda() (instance 5)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ25menu_advanced_temperaturevENUlvE3_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = menu_advanced_temperature()::[lambda() (instance 5)]::_FUN() &rArr; _lcd_autotune(heater_id_t) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_autotune(heater_id_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z25menu_advanced_temperaturev)
</UL>
<P><STRONG><a name="[dc]"></a>menu_advanced_temperature()::[lambda() (instance 7)]::_FUN()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ25menu_advanced_temperaturevENUlvE5_4_FUNEv))
<BR><BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_scalePID_i(short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z25menu_advanced_temperaturev)
</UL>
<P><STRONG><a name="[dd]"></a>menu_advanced_temperature()::[lambda() (instance 9)]::_FUN()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ25menu_advanced_temperaturevENUlvE7_4_FUNEv))
<BR><BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_scalePID_d(short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z25menu_advanced_temperaturev)
</UL>
<P><STRONG><a name="[de]"></a>menu_advanced_temperature()::[lambda() (instance 11)]::_FUN()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ25menu_advanced_temperaturevENUlvE9_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = menu_advanced_temperature()::[lambda() (instance 11)]::_FUN() &rArr; _lcd_autotune(heater_id_t) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_autotune(heater_id_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z25menu_advanced_temperaturev)
</UL>
<P><STRONG><a name="[d9]"></a>menu_advanced_temperature()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ25menu_advanced_temperaturevENUlvE_4_FUNEv))
<BR><BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_scalePID_i(short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z25menu_advanced_temperaturev)
</UL>
<P><STRONG><a name="[e1]"></a>menu_advanced_acceleration()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = menu_advanced_acceleration()::[lambda() (instance 3)]::_FUN() &rArr; Planner::reset_acceleration_rates()
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_accelerationv)
</UL>
<P><STRONG><a name="[e2]"></a>menu_advanced_acceleration()::[lambda() (instance 5)]::_FUN()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE3_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = menu_advanced_acceleration()::[lambda() (instance 5)]::_FUN() &rArr; Planner::reset_acceleration_rates()
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_accelerationv)
</UL>
<P><STRONG><a name="[e3]"></a>menu_advanced_acceleration()::[lambda() (instance 7)]::_FUN()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE5_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = menu_advanced_acceleration()::[lambda() (instance 7)]::_FUN() &rArr; Planner::reset_acceleration_rates()
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_accelerationv)
</UL>
<P><STRONG><a name="[e0]"></a>menu_advanced_acceleration()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = menu_advanced_acceleration()::[lambda() (instance 1)]::_FUN() &rArr; Planner::reset_acceleration_rates()
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_accelerationv)
</UL>
<P><STRONG><a name="[e5]"></a>menu_advanced_steps_per_mm()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = menu_advanced_steps_per_mm()::[lambda() (instance 3)]::_FUN() &rArr; Planner::refresh_positioning() &rArr; Planner::set_position_mm(float, float, float, float) &rArr; Planner::set_machine_position_mm(float, float, float, float) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
</UL>
<P><STRONG><a name="[e6]"></a>menu_advanced_steps_per_mm()::[lambda() (instance 5)]::_FUN()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE3_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = menu_advanced_steps_per_mm()::[lambda() (instance 5)]::_FUN() &rArr; Planner::refresh_positioning() &rArr; Planner::set_position_mm(float, float, float, float) &rArr; Planner::set_machine_position_mm(float, float, float, float) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
</UL>
<P><STRONG><a name="[e7]"></a>menu_advanced_steps_per_mm()::[lambda() (instance 7)]::_FUN()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE5_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = menu_advanced_steps_per_mm()::[lambda() (instance 7)]::_FUN() &rArr; Planner::refresh_positioning() &rArr; Planner::set_position_mm(float, float, float, float) &rArr; Planner::set_machine_position_mm(float, float, float, float) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
</UL>
<P><STRONG><a name="[e4]"></a>menu_advanced_steps_per_mm()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = menu_advanced_steps_per_mm()::[lambda() (instance 1)]::_FUN() &rArr; Planner::refresh_positioning() &rArr; Planner::set_position_mm(float, float, float, float) &rArr; Planner::set_machine_position_mm(float, float, float, float) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr; Stepper::suspend() &rArr; timer_disable_irq &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
</UL>
<P><STRONG><a name="[2d4]"></a>decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN39_INTERNAL_17_menu_advanced_cpp_05cde99b4_MAXIfiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::action(const char*, unsigned*, unsigned, unsigned, void(*)(), bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_filament()
</UL>

<P><STRONG><a name="[2d5]"></a>decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN39_INTERNAL_17_menu_advanced_cpp_05cde99b4_MINIfiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float41sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::action(const char*, unsigned*, unsigned, unsigned, void(*)(), bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_temperature()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_filament()
</UL>

<P><STRONG><a name="[e8]"></a>_menu_configuration_preheat_settings()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, menu_configuration.o(i._ZZ36_menu_configuration_preheat_settingsvENUlvE_4_FUNEv))
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(i._Z36_menu_configuration_preheat_settingsv)
</UL>
<P><STRONG><a name="[303]"></a>decltype(((const param#1+const param#2))) [local to menu_configuration_cpp]::_MAX&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_configuration.o(t._ZN44_INTERNAL_22_menu_configuration_cpp_8c7fe78d4_MAXIfiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
</UL>

<P><STRONG><a name="[304]"></a>decltype(((const param#1+const param#2))) [local to menu_configuration_cpp]::_MIN&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_configuration.o(t._ZN44_INTERNAL_22_menu_configuration_cpp_8c7fe78d4_MINIfiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
</UL>

<P><STRONG><a name="[bd]"></a>[local to menu_job_recovery_cpp]::lcd_power_loss_recovery_resume()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu_job_recovery.o(i._ZN43_INTERNAL_21_menu_job_recovery_cpp_ae259b3f30lcd_power_loss_recovery_resumeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to menu_job_recovery_cpp]::lcd_power_loss_recovery_resume() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_job_recovery()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_job_recovery.o(i._Z17menu_job_recoveryv)
</UL>
<P><STRONG><a name="[4c1]"></a>[local to menu_language_cpp]::set_lcd_language(unsigned char)</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, menu_language.o(i._ZN39_INTERNAL_17_menu_language_cpp_e79bc25216set_lcd_languageEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = [local to menu_language_cpp]::set_lcd_language(unsigned char) &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxg_SetUtf8Fonts(const _uxg_fontinfo_t*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 11)]::_FUN()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 9)]::_FUN()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 7)]::_FUN()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 5)]::_FUN()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 3)]::_FUN()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 17)]::_FUN()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 15)]::_FUN()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 13)]::_FUN()
</UL>

<P><STRONG><a name="[23c]"></a>menu_language()::[lambda() (instance 13)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_language.o(i._ZZ13menu_languagevENUlvE11_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = menu_language()::[lambda() (instance 13)]::_FUN() &rArr; [local to menu_language_cpp]::set_lcd_language(unsigned char) &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
</UL>

<P><STRONG><a name="[23d]"></a>menu_language()::[lambda() (instance 15)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_language.o(i._ZZ13menu_languagevENUlvE13_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = menu_language()::[lambda() (instance 15)]::_FUN() &rArr; [local to menu_language_cpp]::set_lcd_language(unsigned char) &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
</UL>

<P><STRONG><a name="[23e]"></a>menu_language()::[lambda() (instance 17)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_language.o(i._ZZ13menu_languagevENUlvE15_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = menu_language()::[lambda() (instance 17)]::_FUN() &rArr; [local to menu_language_cpp]::set_lcd_language(unsigned char) &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
</UL>

<P><STRONG><a name="[237]"></a>menu_language()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_language.o(i._ZZ13menu_languagevENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = menu_language()::[lambda() (instance 3)]::_FUN() &rArr; [local to menu_language_cpp]::set_lcd_language(unsigned char) &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
</UL>

<P><STRONG><a name="[238]"></a>menu_language()::[lambda() (instance 5)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_language.o(i._ZZ13menu_languagevENUlvE3_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = menu_language()::[lambda() (instance 5)]::_FUN() &rArr; [local to menu_language_cpp]::set_lcd_language(unsigned char) &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
</UL>

<P><STRONG><a name="[239]"></a>menu_language()::[lambda() (instance 7)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_language.o(i._ZZ13menu_languagevENUlvE5_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = menu_language()::[lambda() (instance 7)]::_FUN() &rArr; [local to menu_language_cpp]::set_lcd_language(unsigned char) &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
</UL>

<P><STRONG><a name="[23a]"></a>menu_language()::[lambda() (instance 9)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_language.o(i._ZZ13menu_languagevENUlvE7_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = menu_language()::[lambda() (instance 9)]::_FUN() &rArr; [local to menu_language_cpp]::set_lcd_language(unsigned char) &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
</UL>

<P><STRONG><a name="[23b]"></a>menu_language()::[lambda() (instance 11)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_language.o(i._ZZ13menu_languagevENUlvE9_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = menu_language()::[lambda() (instance 11)]::_FUN() &rArr; [local to menu_language_cpp]::set_lcd_language(unsigned char) &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
</UL>

<P><STRONG><a name="[236]"></a>menu_language()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_language.o(i._ZZ13menu_languagevENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = menu_language()::[lambda() (instance 1)]::_FUN() &rArr; [local to menu_language_cpp]::set_lcd_language(unsigned char) &rArr; MarlinSettings::save() &rArr; PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; lcd_put_u8str_P(unsigned char, unsigned char, const char*) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
</UL>

<P><STRONG><a name="[532]"></a>menu_main()::[lambda() (instance 1)]::operator ()() const</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, menu_main.o(i._ZZ9menu_mainvENKUlvE_clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = menu_main()::[lambda() (instance 1)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*) &rArr; wrap_string_P(unsigned char&, unsigned char&, const char*, bool) &rArr; _wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()::[lambda() (instance 1)]::_FUN()
</UL>

<P><STRONG><a name="[ee]"></a>menu_main()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_main.o(i._ZZ9menu_mainvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = menu_main()::[lambda() (instance 1)]::_FUN() &rArr; menu_main()::[lambda() (instance 1)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*) &rArr; wrap_string_P(unsigned char&, unsigned char&, const char*, bool) &rArr; _wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()::[lambda() (instance 1)]::operator ()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[533]"></a>MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, menu_media.o(i._ZZN15MenuItem_sdfile6actionEPKcR10CardReaderENKUlvE_clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*) &rArr; wrap_string_P(unsigned char&, unsigned char&, const char*, bool) &rArr; _wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::_FUN()
</UL>

<P><STRONG><a name="[ae]"></a>MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_media.o(i._ZZN15MenuItem_sdfile6actionEPKcR10CardReaderENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::_FUN() &rArr; MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*) &rArr; wrap_string_P(unsigned char&, unsigned char&, const char*, bool) &rArr; _wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_media.o(i._Z10menu_mediav)
</UL>
<P><STRONG><a name="[4b9]"></a>[local to menu_motion_cpp]::lcd_move_e()</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, menu_motion.o(i._ZN37_INTERNAL_15_menu_motion_cpp_1861504310lcd_move_eEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = [local to menu_motion_cpp]::lcd_move_e() &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr41sign(float)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMove::soon(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_goto_menu_move_distance_e()::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 1)]::_FUN()
</UL>

<P><STRONG><a name="[1e7]"></a>[local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum)</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, menu_motion.o(i._ZN37_INTERNAL_15_menu_motion_cpp_1861504313_lcd_move_xyzEPKc8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = [local to menu_motion_cpp]::_lcd_move_xyz(const char*, AxisEnum) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::using_inch_units()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr41sign(float)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMove::soon(AxisEnum)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr63(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_move_z()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_move_y()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_move_x()
</UL>

<P><STRONG><a name="[cc]"></a>_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 13)]::_FUN()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_motion.o(i._ZZ19_menu_move_distance8AxisEnumPFvvEaENUlvE11_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 13)]::_FUN() &rArr; _goto_manual_move(float) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_goto_manual_move(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa)
</UL>
<P><STRONG><a name="[c7]"></a>_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_motion.o(i._ZZ19_menu_move_distance8AxisEnumPFvvEaENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 3)]::_FUN() &rArr; _goto_manual_move(float) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_goto_manual_move(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa)
</UL>
<P><STRONG><a name="[c8]"></a>_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 5)]::_FUN()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_motion.o(i._ZZ19_menu_move_distance8AxisEnumPFvvEaENUlvE3_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 5)]::_FUN() &rArr; _goto_manual_move(float) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_goto_manual_move(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa)
</UL>
<P><STRONG><a name="[c9]"></a>_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 7)]::_FUN()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_motion.o(i._ZZ19_menu_move_distance8AxisEnumPFvvEaENUlvE5_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 7)]::_FUN() &rArr; _goto_manual_move(float) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_goto_manual_move(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa)
</UL>
<P><STRONG><a name="[ca]"></a>_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 9)]::_FUN()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_motion.o(i._ZZ19_menu_move_distance8AxisEnumPFvvEaENUlvE7_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 9)]::_FUN() &rArr; _goto_manual_move(float) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_goto_manual_move(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa)
</UL>
<P><STRONG><a name="[cb]"></a>_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 11)]::_FUN()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_motion.o(i._ZZ19_menu_move_distance8AxisEnumPFvvEaENUlvE9_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 11)]::_FUN() &rArr; _goto_manual_move(float) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_goto_manual_move(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa)
</UL>
<P><STRONG><a name="[c6]"></a>_menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu_motion.o(i._ZZ19_menu_move_distance8AxisEnumPFvvEaENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _menu_move_distance(AxisEnum, void(*)(), signed char)::[lambda() (instance 1)]::_FUN() &rArr; _goto_manual_move(float) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_goto_manual_move(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z19_menu_move_distance8AxisEnumPFvvEa)
</UL>
<P><STRONG><a name="[df]"></a>_goto_menu_move_distance_e()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu_motion.o(i._ZZ26_goto_menu_move_distance_evENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _goto_menu_move_distance_e()::[lambda() (instance 1)]::_FUN() &rArr; _menu_move_distance(AxisEnum, void(*)(), signed char) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z26_goto_menu_move_distance_ev)
</UL>
<P><STRONG><a name="[531]"></a>_menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, menu_motion.o(i._ZZ27_menu_move_distance_e_maybevENKUlvE_clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*) &rArr; wrap_string_P(unsigned char&, unsigned char&, const char*, bool) &rArr; _wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance_e_maybe()::[lambda() (instance 1)]::_FUN()
</UL>

<P><STRONG><a name="[10c]"></a>_menu_move_distance_e_maybe()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_motion.o(i._ZZ27_menu_move_distance_e_maybevENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _menu_move_distance_e_maybe()::[lambda() (instance 1)]::_FUN() &rArr; _menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; MarlinUI::draw_select_screen_prompt(const char*, const char*, const char*) &rArr; wrap_string_P(unsigned char&, unsigned char&, const char*, bool) &rArr; _wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool) &rArr; lcd_put_wchar_max(unsigned, unsigned short) &rArr; uxg_DrawWchar(_u8g_t*, unsigned, unsigned, unsigned, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._ZZ9menu_movevENUlvE5_4_FUNEv)
</UL>
<P><STRONG><a name="[f8]"></a>menu_move()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu_motion.o(i._ZZ9menu_movevENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = menu_move()::[lambda() (instance 3)]::_FUN() &rArr; _menu_move_distance(AxisEnum, void(*)(), signed char) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z9menu_movev)
</UL>
<P><STRONG><a name="[f9]"></a>menu_move()::[lambda() (instance 5)]::_FUN()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu_motion.o(i._ZZ9menu_movevENUlvE3_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = menu_move()::[lambda() (instance 5)]::_FUN() &rArr; _menu_move_distance(AxisEnum, void(*)(), signed char) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z9menu_movev)
</UL>
<P><STRONG><a name="[fa]"></a>menu_move()::[lambda() (instance 7)]::_FUN()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, menu_motion.o(i._ZZ9menu_movevENUlvE5_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = menu_move()::[lambda() (instance 7)]::_FUN() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_goto_menu_move_distance_e()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z9menu_movev)
</UL>
<P><STRONG><a name="[f7]"></a>menu_move()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu_motion.o(i._ZZ9menu_movevENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = menu_move()::[lambda() (instance 1)]::_FUN() &rArr; _menu_move_distance(AxisEnum, void(*)(), signed char) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance(AxisEnum, void(*)(), signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z9menu_movev)
</UL>
<P><STRONG><a name="[107]"></a>_goto_menu_move_distance_e()::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu_motion.o(i._ZZZ26_goto_menu_move_distance_evENKUlvE_clEvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _goto_menu_move_distance_e()::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 1)]::_FUN() &rArr; [local to menu_motion_cpp]::lcd_move_e() &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; lcd_put_u8str_ind_P(const char*, signed char, const char*, unsigned char) &rArr; lcd_put_u8str_max_P(const char*, unsigned short) &rArr; uxg_DrawUtf8StrP(_u8g_t*, unsigned, unsigned, const char*, unsigned short) &rArr; u8g_DrawStrP &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._ZZ26_goto_menu_move_distance_evENUlvE_4_FUNEv)
</UL>
<P><STRONG><a name="[257]"></a>menu_preheat_m()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_temperature.o(i._ZZ14menu_preheat_mvENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = menu_preheat_m()::[lambda() (instance 3)]::_FUN() &rArr; Temperature::lcd_preheat(unsigned char, signed char, signed char) &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
</UL>

<P><STRONG><a name="[256]"></a>menu_preheat_m()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_temperature.o(i._ZZ14menu_preheat_mvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = menu_preheat_m()::[lambda() (instance 1)]::_FUN() &rArr; Temperature::lcd_preheat(unsigned char, signed char, signed char) &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
</UL>

<P><STRONG><a name="[b7]"></a>menu_temperature()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_temperature.o(i._ZZ16menu_temperaturevENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = menu_temperature()::[lambda() (instance 1)]::_FUN() &rArr; Temperature::start_watching_hotend(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_temperature.o(i._Z16menu_temperaturev)
</UL>
<P><STRONG><a name="[272]"></a>decltype(((const param#1+const param#2))) [local to menu_temperature_cpp]::_MAX&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_temperature.o(t._ZN42_INTERNAL_20_menu_temperature_cpp_66fc3edd4_MAXIfiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
</UL>

<P><STRONG><a name="[273]"></a>decltype(((const param#1+const param#2))) [local to menu_temperature_cpp]::_MIN&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_temperature.o(t._ZN42_INTERNAL_20_menu_temperature_cpp_66fc3edd4_MINIfiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
</UL>

<P><STRONG><a name="[fc]"></a>menu_tune()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, menu_tune.o(i._ZZ9menu_tunevENUlvE1_4_FUNEv))
<BR>[Address Reference Count : 1]<UL><LI> menu_tune.o(i._Z9menu_tunev)
</UL>
<P><STRONG><a name="[fd]"></a>menu_tune()::[lambda() (instance 5)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_tune.o(i._ZZ9menu_tunevENUlvE3_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = menu_tune()::[lambda() (instance 5)]::_FUN() &rArr; _lcd_babystep_go(void(*)()) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep_go(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tune.o(i._Z9menu_tunev)
</UL>
<P><STRONG><a name="[fe]"></a>menu_tune()::[lambda() (instance 7)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_tune.o(i._ZZ9menu_tunevENUlvE5_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = menu_tune()::[lambda() (instance 7)]::_FUN() &rArr; _lcd_babystep_go(void(*)()) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_babystep_go(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tune.o(i._Z9menu_tunev)
</UL>
<P><STRONG><a name="[fb]"></a>menu_tune()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_tune.o(i._ZZ9menu_tunevENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = menu_tune()::[lambda() (instance 1)]::_FUN() &rArr; Temperature::start_watching_hotend(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tune.o(i._Z9menu_tunev)
</UL>
<P><STRONG><a name="[31f]"></a>decltype(((const param#1+const param#2))) [local to menu_tune_cpp]::_MAX&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_tune.o(t._ZN35_INTERNAL_13_menu_tune_cpp_499e3b724_MAXIfiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
</UL>

<P><STRONG><a name="[320]"></a>decltype(((const param#1+const param#2))) [local to menu_tune_cpp]::_MIN&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_tune.o(t._ZN35_INTERNAL_13_menu_tune_cpp_499e3b724_MINIfiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
</UL>

<P><STRONG><a name="[20b]"></a>[local to fontutils_cpp]::utf8_strlen_cb(const char*, unsigned char(*)(unsigned char*))</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fontutils.o(i._ZN35_INTERNAL_13_fontutils_cpp_ae2a2fdb14utf8_strlen_cbEPKcPFhPhE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to fontutils_cpp]::utf8_strlen_cb(const char*, unsigned char(*)(unsigned char*))
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to fontutils_cpp]::utf8_is_start_byte_of_char(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_strlen_P(const char*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_strlen(const char*)
</UL>

<P><STRONG><a name="[283]"></a>[local to fontutils_cpp]::utf8_is_start_byte_of_char(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fontutils.o(i._ZN35_INTERNAL_13_fontutils_cpp_ae2a2fdb26utf8_is_start_byte_of_charEh))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to fontutils_cpp]::utf8_strlen_cb(const char*, unsigned char(*)(unsigned char*))
</UL>

<P><STRONG><a name="[20f]"></a>_wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool)::[lambda() (instance 1)]::operator ()() const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, marlinui.o(i._ZZ12_wrap_stringRhS_PKcPFhPhEbENKUlvE_clEv))
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_moveto(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wrap_string(unsigned char&, unsigned char&, const char*, unsigned char(*)(unsigned char*), bool)
</UL>

<P><STRONG><a name="[15a]"></a>__sti___12_marlinui_cpp_ui</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, marlinui.o(i.__sti___12_marlinui_cpp_ui))
<BR>[Address Reference Count : 1]<UL><LI> marlinui.o(.init_array)
</UL>
<P><STRONG><a name="[15b]"></a>__sti___10_buzzer_cpp_f84fbc67</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, buzzer.o(i.__sti___10_buzzer_cpp_f84fbc67))
<BR>[Address Reference Count : 1]<UL><LI> buzzer.o(.init_array)
</UL>
<P><STRONG><a name="[4b5]"></a>[local to endstops_cpp]::print_es_state(bool, const char*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, endstops.o(i._ZN34_INTERNAL_12_endstops_cpp_2ca379fb14print_es_stateEbPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to endstops_cpp]::print_es_state(bool, const char*) &rArr; serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::report_states()
</UL>

<P><STRONG><a name="[252]"></a>void [local to motion_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motion.o(t._ZN32_INTERNAL_10_motion_cpp_db549edf6NOLESSIffEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_z_clearance(float, bool)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_motion_limits(XYZval&lang;float&rang;&)
</UL>

<P><STRONG><a name="[2aa]"></a>void [local to motion_cpp]::NOMORE&lang;float, float&rang;(T1&, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motion.o(t._ZN32_INTERNAL_10_motion_cpp_db549edf6NOMOREIffEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_motion_limits(XYZval&lang;float&rang;&)
</UL>

<P><STRONG><a name="[15c]"></a>__sti___11_planner_cpp_planner</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, planner.o(i.__sti___11_planner_cpp_planner))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___11_planner_cpp_planner
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> planner.o(.init_array)
</UL>
<P><STRONG><a name="[4f4]"></a>const T1 [local to planner_cpp]::ABS&lang;float&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner3ABSIfEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[4f7]"></a>decltype(((const param#1+const param#2))) [local to planner_cpp]::_MAX&lang;float, float&rang;(T1, T2)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner4_MAXIffEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[4f9]"></a>decltype(((const param#1+const param#2))) [local to planner_cpp]::_MIN&lang;float, float&rang;(T1, T2)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner4_MINIffEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass_kernel(block_t*, const block_t*)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[4f2]"></a>void [local to planner_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner6NOLESSIffEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_task()
</UL>

<P><STRONG><a name="[4f5]"></a>void [local to planner_cpp]::NOMORE&lang;float, float&rang;(T1&, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner6NOMOREIffEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[4f6]"></a>void [local to planner_cpp]::NOMORE&lang;unsigned, float&rang;(T1&, T2)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner6NOMOREIjfEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[473]"></a>[local to settings_cpp]::config_heading(bool, const char*, bool)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, settings.o(i._ZN34_INTERNAL_12_settings_cpp_7a1ff5ce14config_headingEbPKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to settings_cpp]::config_heading(bool, const char*, bool) &rArr; serial_echo_start() &rArr; serialprintPGM(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
</UL>

<P><STRONG><a name="[468]"></a>decltype(((const param#1+const param#2))) [local to settings_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, settings.o(t._ZN34_INTERNAL_12_settings_cpp_7a1ff5ce4_MINIhiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[509]"></a>decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MAX&lang;unsigned, unsigned long&rang;(T1, T2)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stepper.o(t._ZN33_INTERNAL_11_stepper_cpp_209733ab4_MAXIjmEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[50a]"></a>decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MAX&lang;unsigned long, unsigned long&rang;(T1, T2)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stepper.o(t._ZN33_INTERNAL_11_stepper_cpp_209733ab4_MAXImmEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[43d]"></a>[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, temperature.o(i._ZN37_INTERNAL_15_temperature_cpp_ca4fe82418print_heater_stateEfff11heater_id_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = [local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_PRINT&lang;float, int&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>

<P><STRONG><a name="[15d]"></a>__sti___15_temperature_cpp_ca4fe824</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, temperature.o(i.__sti___15_temperature_cpp_ca4fe824))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sti___15_temperature_cpp_ca4fe824 &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temperature.o(.init_array)
</UL>
<P><STRONG><a name="[434]"></a>const T1 [local to temperature_cpp]::ABS&lang;float&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, temperature.o(t._ZN37_INTERNAL_15_temperature_cpp_ca4fe8243ABSIfEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
</UL>

<P><STRONG><a name="[115]"></a>&lang;Func48&rang;</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cardreader.o(i.<Func48>))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = &lang;Func48&rang; &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(i.__sti___14_cardreader_cpp_M23_STR)
</UL>
<P><STRONG><a name="[33e]"></a>[local to cardreader_cpp]::DIR_IS_SUBDIR(const directoryEntry*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cardreader.o(i._ZN35_INTERNAL_14_cardreader_cpp_M23_STR13DIR_IS_SUBDIREPK14directoryEntry))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::is_dir_or_gcode(const directoryEntry&)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[34e]"></a>CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cardreader.o(i._ZZN10CardReader14getAbsFilenameEPcENKUlR6SdFileE_clES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const &rArr; SdBaseFile::getDosName(char*) &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush()
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::getAbsFilename(char*)
</UL>

<P><STRONG><a name="[15e]"></a>__sti___14_cardreader_cpp_M23_STR</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, cardreader.o(i.__sti___14_cardreader_cpp_M23_STR))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___14_cardreader_cpp_M23_STR &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(.init_array)
</UL>
<P><STRONG><a name="[419]"></a>[local to SdBaseFile_cpp]::DIR_IS_FILE(const directoryEntry*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN36_INTERNAL_14_SdBaseFile_cpp_9a4d697f11DIR_IS_FILEEPK14directoryEntry))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[41a]"></a>[local to SdBaseFile_cpp]::DIR_IS_SUBDIR(const directoryEntry*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN36_INTERNAL_14_SdBaseFile_cpp_9a4d697f13DIR_IS_SUBDIREPK14directoryEntry))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[481]"></a>[local to adc_c]::adc_setclk()</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc110adc_setclkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = [local to adc_c]::adc_setclk() &rArr; CLK_XtalCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllCmd
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPeriClkSource
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adcs
</UL>

<P><STRONG><a name="[55c]"></a>[local to adc_c]::adc_foreach(void(*)(adc_dev*))</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc111adc_foreachEPFvP7adc_devE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to adc_c]::adc_foreach(void(*)(adc_dev*))
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adcs
</UL>

<P><STRONG><a name="[486]"></a>[local to adc_c]::adc_SetPinMode(unsigned char, en_pin_mode)</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc114adc_SetPinModeEh11en_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = [local to adc_c]::adc_SetPinMode(unsigned char, en_pin_mode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_SetChannelPinMode(const M4_ADC_TypeDef*, unsigned, en_pin_mode)
</UL>

<P><STRONG><a name="[487]"></a>[local to adc_c]::adc_initconfig(adc_dev*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc114adc_initconfigEP7adc_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to adc_c]::adc_initconfig(adc_dev*) &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg3PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_default_config(adc_dev*)
</UL>

<P><STRONG><a name="[48a]"></a>[local to adc_c]::adc_DMAIrqConfig()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc116adc_DMAIrqConfigEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = [local to adc_c]::adc_DMAIrqConfig() &rArr; [local to adc_c]::adc_DmaIrqRegister(stc_irq_regi_conf*, unsigned) &rArr; enIrqRegistration
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DmaIrqRegister(stc_irq_regi_conf*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_default_config(adc_dev*)
</UL>

<P><STRONG><a name="[48c]"></a>[local to adc_c]::adc_DMAInitConfig(adc_dev*)</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc117adc_DMAInitConfigEP7adc_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = [local to adc_c]::adc_DMAInitConfig(adc_dev*) &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_default_config(adc_dev*)
</UL>

<P><STRONG><a name="[492]"></a>[local to adc_c]::adc_TriggerConfig(adc_dev*, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc117adc_TriggerConfigEP7adc_devj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to adc_c]::adc_TriggerConfig(adc_dev*, unsigned) &rArr; PWC_Fcg0PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TriggerSrcCmd
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_default_config(adc_dev*)
</UL>

<P><STRONG><a name="[48b]"></a>[local to adc_c]::adc_DmaIrqRegister(stc_irq_regi_conf*, unsigned)</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc118adc_DmaIrqRegisterEP17stc_irq_regi_confj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = [local to adc_c]::adc_DmaIrqRegister(stc_irq_regi_conf*, unsigned) &rArr; enIrqRegistration
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enShareIrqEnable
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAIrqConfig()
</UL>

<P><STRONG><a name="[496]"></a>[local to adc_c]::adc_channelchonfig(adc_dev*, en_pin_mode)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc118adc_channelchonfigEP7adc_dev11en_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to adc_c]::adc_channelchonfig(adc_dev*, en_pin_mode) &rArr; [local to adc_c]::adc_SetChannelPinMode(const M4_ADC_TypeDef*, unsigned, en_pin_mode) &rArr; [local to adc_c]::adc_SetPinMode(unsigned char, en_pin_mode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AddAdcChannel
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_SetChannelPinMode(const M4_ADC_TypeDef*, unsigned, en_pin_mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_default_config(adc_dev*)
</UL>

<P><STRONG><a name="[117]"></a>[local to adc_c]::adc_default_config(adc_dev*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc118adc_default_configEP7adc_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = [local to adc_c]::adc_default_config(adc_dev*) &rArr; [local to adc_c]::adc_channelchonfig(adc_dev*, en_pin_mode) &rArr; [local to adc_c]::adc_SetChannelPinMode(const M4_ADC_TypeDef*, unsigned, en_pin_mode) &rArr; [local to adc_c]::adc_SetPinMode(unsigned char, en_pin_mode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConvert
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_channelchonfig(adc_dev*, en_pin_mode)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_TriggerConfig(adc_dev*, unsigned)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAIrqConfig()
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_initconfig(adc_dev*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i.setup_adcs)
</UL>
<P><STRONG><a name="[497]"></a>[local to adc_c]::adc_SetChannelPinMode(const M4_ADC_TypeDef*, unsigned, en_pin_mode)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc121adc_SetChannelPinModeEPK14M4_ADC_TypeDefj11en_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = [local to adc_c]::adc_SetChannelPinMode(const M4_ADC_TypeDef*, unsigned, en_pin_mode) &rArr; [local to adc_c]::adc_SetPinMode(unsigned char, en_pin_mode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_SetPinMode(unsigned char, en_pin_mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_channelchonfig(adc_dev*, en_pin_mode)
</UL>

<P><STRONG><a name="[561]"></a>[local to board_tim0_c]::__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, board_tim0.o(i._ZN34_INTERNAL_12_board_tim0_c_e2b14bb216__NVIC_EnableIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
</UL>

<P><STRONG><a name="[55e]"></a>[local to board_tim0_c]::__NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, board_tim0.o(i._ZN34_INTERNAL_12_board_tim0_c_e2b14bb218__NVIC_SetPriorityE4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to board_tim0_c]::__NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_systick
</UL>

<P><STRONG><a name="[560]"></a>[local to board_tim0_c]::__NVIC_ClearPendingIRQ(IRQn)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board_tim0.o(i._ZN34_INTERNAL_12_board_tim0_c_e2b14bb222__NVIC_ClearPendingIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
</UL>

<P><STRONG><a name="[4a4]"></a>[local to startup_cpp]::setup_SysClk()</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, startup.o(i._ZN30_INTERNAL_11_startup_cpp_F_CPU12setup_SysClkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to startup_cpp]::setup_SysClk() &rArr; CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysClkConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetSysClkSource
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetLatency
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_InstructionCacheCmd
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[4cb]"></a>[local to HardwareSerial_cpp]::rb_full_count(ring_buffer*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hardwareserial.o(i._ZN40_INTERNAL_18_HardwareSerial_cpp_1ae1736c13rb_full_countEP11ring_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to HardwareSerial_cpp]::rb_full_count(ring_buffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HardwareSerial_cpp]::usart_data_available(usart_dev*)
</UL>

<P><STRONG><a name="[44b]"></a>[local to HardwareSerial_cpp]::usart_data_available(usart_dev*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hardwareserial.o(i._ZN40_INTERNAL_18_HardwareSerial_cpp_1ae1736c20usart_data_availableEP9usart_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to HardwareSerial_cpp]::usart_data_available(usart_dev*) &rArr; [local to HardwareSerial_cpp]::rb_full_count(ring_buffer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HardwareSerial_cpp]::rb_full_count(ring_buffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::available()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::read()
</UL>

<P><STRONG><a name="[4b6]"></a>[local to u8g_ll_api_c]::u8g_init_data(_u8g_t*)</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, u8g_ll_api.o(i._ZN34_INTERNAL_12_u8g_ll_api_c_2adb469613u8g_init_dataEP6_u8g_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to u8g_ll_api_c]::u8g_init_data(_u8g_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetColorIndex
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFontPosBaseline
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitSPI
</UL>

<P><STRONG><a name="[2db]"></a>[local to u8g_font_c]::u8g_font_get_byte(const unsigned char*, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8g_font.o(i._ZN32_INTERNAL_10_u8g_font_c_482b454917u8g_font_get_byteEPKhh))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontStartEncoding
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontEndEncoding
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetCapitalAHeight(const void*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetLowerGDescent(const void*)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXDescent(const void*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXAscent(const void*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontDescent(const void*)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontAscent(const void*)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_GetBBXWidth(const void*)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_GetFormat(const unsigned char*)
</UL>

<P><STRONG><a name="[2ed]"></a>[local to u8g_font_c]::u8g_font_get_word(const unsigned char*, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, u8g_font.o(i._ZN32_INTERNAL_10_u8g_font_c_482b454917u8g_font_get_wordEPKhh))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding97Pos(const void*)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding65Pos(const void*)
</UL>

<P><STRONG><a name="[21c]"></a>[local to u8g_font_c]::u8g_font_GetFormat(const unsigned char*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i._ZN32_INTERNAL_10_u8g_font_c_482b454918u8g_font_GetFormatEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to u8g_font_c]::u8g_font_GetFormat(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_get_byte(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph(_u8g_t*, unsigned char)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_GetFontGlyphStructureSize(const unsigned char*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_CopyGlyphDataToCache(_u8g_t*, void*)
</UL>

<P><STRONG><a name="[4b1]"></a>[local to u8g_font_c]::u8g_font_GetBBXWidth(const void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i._ZN32_INTERNAL_10_u8g_font_c_482b454920u8g_font_GetBBXWidthEPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to u8g_font_c]::u8g_font_GetBBXWidth(const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_get_byte(const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetFontBBXWidth
</UL>

<P><STRONG><a name="[222]"></a>[local to u8g_font_c]::u8g_FillEmptyGlyphCache(_u8g_t*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, u8g_font.o(i._ZN32_INTERNAL_10_u8g_font_c_482b454923u8g_FillEmptyGlyphCacheEP6_u8g_t))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph(_u8g_t*, unsigned char)
</UL>

<P><STRONG><a name="[223]"></a>[local to u8g_font_c]::u8g_CopyGlyphDataToCache(_u8g_t*, void*)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, u8g_font.o(i._ZN32_INTERNAL_10_u8g_font_c_482b454924u8g_CopyGlyphDataToCacheEP6_u8g_tPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to u8g_font_c]::u8g_CopyGlyphDataToCache(_u8g_t*, void*) &rArr; [local to u8g_font_c]::u8g_font_GetFormat(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_GetFormat(const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph(_u8g_t*, unsigned char)
</UL>

<P><STRONG><a name="[4b2]"></a>[local to u8g_font_c]::u8g_font_GetGlyphDataStart(const void*, void*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, u8g_font.o(i._ZN32_INTERNAL_10_u8g_font_c_482b454926u8g_font_GetGlyphDataStartEPKvPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to u8g_font_c]::u8g_font_GetGlyphDataStart(const void*, void*) &rArr; [local to u8g_font_c]::u8g_font_GetFontGlyphStructureSize(const unsigned char*) &rArr; [local to u8g_font_c]::u8g_font_GetFormat(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_GetFontGlyphStructureSize(const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>

<P><STRONG><a name="[21d]"></a>[local to u8g_font_c]::u8g_font_GetFontGlyphStructureSize(const unsigned char*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, u8g_font.o(i._ZN32_INTERNAL_10_u8g_font_c_482b454934u8g_font_GetFontGlyphStructureSizeEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to u8g_font_c]::u8g_font_GetFontGlyphStructureSize(const unsigned char*) &rArr; [local to u8g_font_c]::u8g_font_GetFormat(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_GetFormat(const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph(_u8g_t*, unsigned char)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to u8g_font_c]::u8g_font_GetGlyphDataStart(const void*, void*)
</UL>

<P><STRONG><a name="[29e]"></a>[local to usart_c]::rb_is_full(ring_buffer*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev410rb_is_fullEP11ring_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_tx
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4RxIrqCallback()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3RxIrqCallback()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2RxIrqCallback()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1RxIrqCallback()
</UL>

<P><STRONG><a name="[2a1]"></a>[local to usart_c]::rb_is_empty(ring_buffer*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev411rb_is_emptyEP11ring_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_tx
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4TxIrqCallback()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3TxIrqCallback()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2TxIrqCallback()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1TxIrqCallback()
</UL>

<P><STRONG><a name="[579]"></a>[local to usart_c]::__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev416__NVIC_EnableIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>

<P><STRONG><a name="[577]"></a>[local to usart_c]::__NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev418__NVIC_SetPriorityE4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to usart_c]::__NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>

<P><STRONG><a name="[578]"></a>[local to usart_c]::__NVIC_ClearPendingIRQ(IRQn)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev422__NVIC_ClearPendingIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>

<P><STRONG><a name="[57a]"></a>[local to usart_c]::rb_init(ring_buffer*, unsigned short, unsigned char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev47rb_initEP11ring_buffertPh))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[2a0]"></a>[local to usart_c]::rb_insert(ring_buffer*, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev49rb_insertEP11ring_bufferh))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_tx
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4RxIrqCallback()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3RxIrqCallback()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2RxIrqCallback()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1RxIrqCallback()
</UL>

<P><STRONG><a name="[29f]"></a>[local to usart_c]::rb_remove(ring_buffer*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev49rb_removeEP11ring_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4TxIrqCallback()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4RxIrqCallback()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3TxIrqCallback()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3RxIrqCallback()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2TxIrqCallback()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2RxIrqCallback()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1TxIrqCallback()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1RxIrqCallback()
</UL>

<P><STRONG><a name="[1ab]"></a>[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a12SdCardInitSdEP13stc_sd_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to sd_card_c]::SdCardInitSd(stc_sd_handle*) &rArr; SDMMC_Cmd7_SelectDeselectCard &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd9_SendCSD
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd7_SelectDeselectCard
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd3_SendRelativeAddr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd2_AllSendCID
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[1aa]"></a>[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a13SdCardPowerONEP13stc_sd_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = [local to sd_card_c]::SdCardPowerON(stc_sd_handle*) &rArr; SDMMC_Cmd55_AppCmd &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd8_SendIfCond
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd0_GoIdleState
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd41_SdSendOpCond
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[1a8]"></a>[local to sd_card_c]::SdCardInitHost(const stc_sd_handle*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a14SdCardInitHostEPK13stc_sd_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to sd_card_c]::SdCardInitHost(const stc_sd_handle*) &rArr; SDIOC_Init &rArr; [local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_Init
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[1ad]"></a>[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)</STRONG> (Thumb, 328 bytes, Stack size 104 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a14SdCardSetSpeedEP13stc_sd_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = [local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*) &rArr; SDMMC_Cmd6_SwitchFunc &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetSpeedMode
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetClk
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ReadBuffer
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetNormalIrqFlag
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ConfigData
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearNormalIrqFlag
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd6_SwitchFunc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[1b2]"></a>[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)</STRONG> (Thumb, 208 bytes, Stack size 88 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a16DmaSdiocRxConfigEP14M4_DMA_TypeDef14en_dma_channelP16M4_SDIOC_TypeDefPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short) &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>

<P><STRONG><a name="[1ba]"></a>[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)</STRONG> (Thumb, 208 bytes, Stack size 88 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a16DmaSdiocTxConfigEP14M4_DMA_TypeDef14en_dma_channelP16M4_SDIOC_TypeDefPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short) &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[1ac]"></a>[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a17SdCardSetBusWidthEP13stc_sd_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*) &rArr; SDMMC_Cmd55_AppCmd &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetBusWidth
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd6_SetBusWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[1be]"></a>[local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a22SdCardCheckReayForDataEP13stc_sd_handlej))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd13_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[1cc]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp1EP16M4_SDIOC_TypeDefPjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd7_SelectDeselectCard
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd6_SwitchFunc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd25_WriteMultipleBlock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd24_WriteSingleBlock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd18_ReadMultipleBlock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd17_ReadSingleBlock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd13_SendStatus
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd6_SetBusWidth
</UL>

<P><STRONG><a name="[1d1]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp2EP16M4_SDIOC_TypeDefPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd9_SendCSD
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd2_AllSendCID
</UL>

<P><STRONG><a name="[1ca]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp3EP16M4_SDIOC_TypeDefPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd41_SdSendOpCond
</UL>

<P><STRONG><a name="[1d3]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp6EP16M4_SDIOC_TypeDefPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd3_SendRelativeAddr
</UL>

<P><STRONG><a name="[1d8]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp7EP16M4_SDIOC_TypeDefPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd8_SendIfCond
</UL>

<P><STRONG><a name="[1c8]"></a>[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_WaitBusIdleEP16M4_SDIOC_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd9_SendCSD
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd8_SendIfCond
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd7_SelectDeselectCard
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd6_SwitchFunc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd3_SendRelativeAddr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd2_AllSendCID
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd25_WriteMultipleBlock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd24_WriteSingleBlock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd18_ReadMultipleBlock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd17_ReadSingleBlock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd13_SendStatus
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd0_GoIdleState
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd6_SetBusWidth
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd41_SdSendOpCond
</UL>

<P><STRONG><a name="[1ce]"></a>[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f18SDMMC_WaitResponseEP16M4_SDIOC_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetNormalIrqFlag
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearNormalIrqFlag
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd0_GoIdleState
</UL>

<P><STRONG><a name="[4b4]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f22SDMMC_GetCardDetectionEP16M4_SDIOC_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[548]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[535]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[54a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[549]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[113]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[112]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[18e]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[190]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
